<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>叉叉白</title>
  
  <subtitle>叉叉白，听我跟你瞎白话</subtitle>
  <link href="https://blog.xxwhite.com/atom.xml" rel="self"/>
  
  <link href="https://blog.xxwhite.com/"/>
  <updated>2021-03-25T02:35:30.816Z</updated>
  <id>https://blog.xxwhite.com/</id>
  
  <author>
    <name>MonoLogueChi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次大型学术会议直播技术要点</title>
    <link href="https://blog.xxwhite.com/2020/Academic-conference-live-broadcast.html"/>
    <id>https://blog.xxwhite.com/2020/Academic-conference-live-broadcast.html</id>
    <published>2020-10-29T12:08:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>一次大型的学术会议直播，简单记录一下技术要点，分享给新入行的朋友们。</p><span id="more"></span><p>前段时间公司接了一个大型学术会议直播的活，我就一直加班忙着搞这个，现在搞完了，简单分享一下，低成本，线上线下学术会议的直播方案。</p><p>其实这个事搞得挺失败的，分享出来大家看看乐子就好，关于公司和大会的情况文章中都不会透漏。</p><h2 id="吐槽">吐槽<a class="header-anchor" href="#吐槽">➴</a></h2><p>大型直播这东西，只有真正做过才知道有多麻烦，而且这个还要再加上远程会议，想要吐槽的就免了吧，连的那一堆线，别说是外行，一个内行看了都头疼。别以为直播就是带两台电脑，几张采集卡，连几根线就可以了，设计视频流和音频流走向真的很麻烦。</p><h2 id="难点">难点<a class="header-anchor" href="#难点">➴</a></h2><p>这个最难的地方就是第二天有 4 个会场，4 个会场真的太难搞了，需要的设备就是 4 倍数量的。</p><h2 id="方案选型">方案选型<a class="header-anchor" href="#方案选型">➴</a></h2><p>这个真的是一言难尽啊，我在公司是做技术的，当时人家找到我们，我们商务那边跟我说的大概就是下面几点：</p><ul><li>一个国际会议</li><li>有线上和线下做报告的，而且需要现场和线上交流</li><li>有线上不做报告的人参会</li><li>第一天一个主会场，第二天四个分会场</li></ul><p>需求看起来很简单，我当时就给了一个方案，但是却忽略了一个很重要的因素，参会人数，我们没问人家，我以为一个国际会议，怎么也要有几百人参会，那线上的应该也要上百了吧。但是现实给了我一巴掌，现场参会接近 200 人，线上不足 30 人。</p><p>接着说方案搭建的问题，我按照线上几百人写的方案，因为会议报名也是我们公司开发的系统，所以就自己搭建了一个直播页面，用来给线上不需要做报告的人看直播，用腾讯会议连线现场和远程，用来做线上报告。如果是几百人的话，这套方案确实挺不错的，但是只有几十人，直接全加腾讯会议不就好了，干嘛还要搞个直播，现场接线复杂程度成倍上升。</p><p>反正最终基本上就是这样的方案：</p><ul><li>现场搭建 LED 大屏，音响系统（租用酒店的）</li><li>远程做报告使用腾讯会议</li><li>线上参会使用直播系统</li></ul><p>在说用到的设备之前，先简单说明一下，我们公司发展情况真的是一言难尽，属于起个大早，赶个晚集那种，起步很早，但是啥都没抢到。公司的设备也全都是业余的，就是钱没花到刀刃上。</p><p>直播这东西，画质音质啥的都是虚的，不重要，最重要的是包装。真正花钱的主都在现场坐着，就在旁边看着你，把自己包装成一个专业的团队，线上只要不掉线，能听得清声音，那就一切 OK。以前我也提议过做一个专业的导播台，但是一直没结果，这次做了这个大型直播之后，老板终于看到不专业的设备做这种直播有多麻烦了，但是导播台这个钱估计还是不想花。</p><p>其实一个专业的导播台也没有多复杂，就是一个定制的电脑机箱，里面装上一台性能过得去的电脑，多配上几块屏幕，搞上一张多路采集卡，一两张带环出的采集卡，再配上一个多路声卡或者调音台，都是很简单的东西。导播台这东西直播用起来方便，最重要的是拿出去装 B 啊，人家一看就是专业团队。</p><p>题外话说完了，接着说我们用到的设备：</p><ul><li>摄像机 3 台</li><li>BMD ATEM MINI 导播台 1 台</li><li>笔记本电脑 3 台</li><li>声卡 1 张</li><li>采集卡 3 张</li><li>HDMI 分线器 2 个</li><li>HDMI 音频分离器 1 个</li><li>显示器 1 个</li><li>线材若干</li></ul><p>其中 3 台笔记本，一台用于播放 PPT，一台用于登录腾讯会议，一台用于直播推流。</p><p>简单说一下主会场几个视频信号和音频信号的走向：</p><ul><li>现场摄像机一共有 3 个机位，一个拍摄讲台，给报告人特写，一个拍摄观众，一个在场后拍摄全景，三个都是固定机位。三个摄像机的视频信号全部进 ATEM MINI 导播台，然后采集到的信号进导播电脑，环出的信号经一张采集卡进入登录腾讯会议的电脑，作为腾讯会议的摄像头。</li><li>PPT 电脑复制主屏幕的信号出来后通过一个 HDMI 分线器分信号出来，其中一路信号直接接到报告台上的屏幕上，其中一路经采集卡进入腾讯会议电脑，这台电脑上使用 OBS 的全屏投影功能投射到一个虚拟屏幕上，腾讯会议可以选择共享这块虚拟屏幕，让远程的参会人员观看现场报告的 PPT，最后还有一路信号接入到 LED 屏幕那边，他们那边有个信号切换台可以切换信号，我需要他们给我一个环出信号，这个信号后面会一起说。</li><li>腾讯会议电脑复制主屏幕的信号出来以后，直接给现场 LED 屏幕那边，进他们的信号切换台，然后给我环出一路信号，这个和前面提到的 PPT 电脑信号进入到同一个切换台，反正就是现场大屏显示的是什么，他们就要给我环出一路什么信号，环出的信号经一张采集卡进入导播电脑。</li></ul><p>音频信号：</p><ul><li>PPT 播放电脑的音频信号通过 AUX 线，接入 ATEM 导播台，采集进入导播电脑。</li><li>腾讯会议的电脑，音频信号通过 AUX 线接入导播电脑的话筒插口上。</li><li>现场麦克风信号接入导播电脑的声卡输入接口上。</li><li>腾讯会议和 PPT 播放电脑的音频，在导播电脑上混音输出到现场调音台上。</li><li>现场麦克风和 PPT 播放电脑的音频在导播电脑上混音输出到腾讯视频电脑上。</li><li>PPT 播放电脑，腾讯会议电脑，现场麦克风，三种音频都要采集直播出去。</li></ul><p>软件选择：</p><ul><li>线上会议选择腾讯会议，前面已经提到好多次了。</li><li>直播推流使用 OBS。</li><li>声音控制使用 Voicemeeter。</li></ul><p>导播电脑预设场景：</p><ul><li>一个现场 4:3 画面的场景。</li><li>一个现场 16:9 画面的场景。</li><li>一个现场全景（只放摄像机画面）的场景。</li><li>一个腾讯会议的场景。</li></ul><p>一切看起来都很完美，然而现实给了我们一大巴掌。</p><h2 id="遇到的问题">遇到的问题<a class="header-anchor" href="#遇到的问题">➴</a></h2><p>我们那天大概是晚上九点多开始布置设备，同时租用的 LED 屏幕也开始拼装，然后大概到十二点开始测试设备。</p><p>遇到的第一个问题就是音频，这个是彩排的时候根本没遇到的，以前也根本没遇到过，音频里电流声贼大。我们推测是酒店的调音台不够好，因为我们接了 LED 屏上去，一个长 12 米，高 3.5 米的大型 P2 LED 屏，42 平米的屏幕，平均功率要在 50KW 以上，峰值功率应该能超过 100KW，这么大的设备产生多大的电磁干扰就不用多说了吧。因为我们以前也没做过这种直播，没有经验，其实解决起来也很简单，搞一个音频隔离墙就可以了。但是搞音频隔离器又遇到了一个麻烦，我们用的都是 3.5mm 或者是 6.35mm 的接口，能借到的音频隔离器都是卡侬接口的，没有纯 6.35 输入 + 输出的，最后也只能借到一个特别特别小的音频隔离器，先把现场的解决了，线上的声音就用软件降噪解决一下吧。</p><p>第二个问题是视频接口的问题。因为我们的设备全是 HDMI 接口，但是 LED 屏那边全是 DVI 接口，他们的切换器全是 DVI 接口，这个是我们没考虑周到，应该提前问清楚他们都是什么接口。</p><p>第三个问题还是音频的问题，酒店是设备实在是太烂了，第二天四个会场中有一个会场是我们自己租的音响设备，也只有那一个会场一点问题没有，其他三个会场都或多或少有一些问题。说实话，这些设备能尽量用自己的就用自己的，要不就专门租一套，让他们配一个专门的技术，酒店的设备差不说，音响师还找不到人，他们的接线又搞不清，真的很麻烦。</p><p>第四个是时间问题，时间太紧了，有四个会场需要调试，而且只有我一个人去接线，拖着两大箱的设备，一个一个会场去调试，从晚上七点半一直搞到凌晨两点半才搞得差不多，第二天早上六点半起床，上去接着搞，搞到八点半正式开始直播，时间看似很充裕，但是分到每个会场的，只有那么一点点时间。</p><p>总之前面这些问题都是没钱才会遇到的，如果预算充足，所有会场都自己租音响，多买几个导播台，自己组两台导播机器，所有的问题都能解决。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一次大型的学术会议直播，简单记录一下技术要点，分享给新入行的朋友们。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随便水水" scheme="https://blog.xxwhite.com/tags/%E9%9A%8F%E4%BE%BF%E6%B0%B4%E6%B0%B4/"/>
    
    <category term="涨姿势" scheme="https://blog.xxwhite.com/tags/%E6%B6%A8%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>OMV用户、权限和共享</title>
    <link href="https://blog.xxwhite.com/2020/omv-4.html"/>
    <id>https://blog.xxwhite.com/2020/omv-4.html</id>
    <published>2020-09-04T13:05:30.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>这是 NAS 主要功能的介绍，共享目录。</p><span id="more"></span><blockquote><p>本文所介绍的权限控制主要是 ACL，按照 OMV 文档说明：<br>Provides fine grained permission control besides the standard POSIX permissions. The usage of ACL is not recommended for the average home user. If a server is using an extensive list of users then ACL could suit better<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.<br>简单来说就是人少不建议用 ACL，但是有大量用户的时候 ACL 更加合适。</p></blockquote><h2 id="RAID-管理">RAID 管理<a class="header-anchor" href="#RAID-管理">➴</a></h2><p>首先看 RAID 管理，在 omv 里，组件 RAID 有多种方式，比如像 freenas 一样，用 zfs，但是相比之下，我更推荐直接使用软 RAID。</p><p><img src="/assets/img/2020/09/200904_114237_msedge_W14X.png" alt="zfs插件"></p><p>在 <code>存储器</code> - <code>RAID管理</code> 选项卡里，可以管理和新建 RAID，本期只讲创建 RAID，扩充和恢复，以后再讲。</p><p><img src="/assets/img/2020/09/200904_115033_msedge_hdkh.png" alt="RAID类型"></p><p>点击 <code>新建</code>，可以看到 RAID 级别有这么多种，简单的对应关系如下表<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>：</p><table><thead><tr><th>名称</th><th>RAID 级别</th><th>最少硬盘</th><th>最大容错</th><th>可用容量</th><th>读取性能</th><th>写入性能</th><th>安全性</th><th>目的</th><th>应用产业</th></tr></thead><tbody><tr><td>带条</td><td>0</td><td>1</td><td>0</td><td>n</td><td>n</td><td>n</td><td>一个硬盘异常，全部硬盘都会异常</td><td>追求最大容量、速度</td><td>影片剪接缓存用途</td></tr><tr><td>镜像</td><td>1</td><td>2</td><td>n-1</td><td>1</td><td>n</td><td>1</td><td>高，一个正常即可</td><td>追求最大安全性 个人、企业备份</td><td></td></tr><tr><td>线性</td><td>JBOD</td><td>1</td><td>0</td><td>n</td><td>1</td><td>1</td><td>无（同 RAID 0）</td><td>增加容量</td><td>个人（暂时）存储备份</td></tr><tr><td>RAID 5</td><td>5</td><td>3</td><td>1</td><td>n-1</td><td>n-1</td><td>n-1</td><td>高</td><td>追求最大容量、最小预算 个人、企业备份</td><td></td></tr><tr><td>RAID 6</td><td>6</td><td>4</td><td>2</td><td>n-2</td><td>n-2</td><td>n-2</td><td>安全性较 RAID 5 高</td><td>同 RAID 5，但较安全</td><td>个人、企业备份</td></tr></tbody></table><p>我们这次挂载了 3 块硬盘，所以就用 RAID5，如果有 5 块或更多硬盘，推荐使用 RAID6，但是每个阵列最好不要超过 8 块硬盘。</p><p><img src="/assets/img/2020/09/200904_140645_msedge_KfR8.png" alt="创建RAID"></p><p>新创建的 RAID 最好不要马上使用，可以创建分区，但不要马上去写入内容。</p><p><img src="/assets/img/2020/09/200904_140859_msedge_RKVg.png" alt="RAID"></p><blockquote><p>提示：如果硬盘上有其他分区，请先擦除硬盘，否则无法创建 RAID。<br><img src="/assets/img/2020/09/200904_135813_msedge_GZ8E.png" alt="擦除硬盘"></p></blockquote><h2 id="创建文件系统">创建文件系统<a class="header-anchor" href="#创建文件系统">➴</a></h2><p>创建好 RAID 之后，再到 <code>文件系统</code> 选项卡中创建文件系统，设备就选刚才创建的 RAID，文件系统类型推荐使用 btrfs。</p><p><img src="/assets/img/2020/09/200904_142620_msedge_tsC3.png" alt="创建文件系统"></p><p>创建完成之后不要忘记挂载分区。</p><h2 id="共享文件夹">共享文件夹<a class="header-anchor" href="#共享文件夹">➴</a></h2><p>找到 <code>共享文件夹</code> 选项卡，在这里面创建共享文件夹。</p><p><img src="/assets/img/2020/09/200904_145010_msedge_x7bw.png" alt=""></p><p><img src="/assets/img/2020/09/200904_145058_msedge_TWQQ.png" alt=""></p><h2 id="用户和权限管理">用户和权限管理<a class="header-anchor" href="#用户和权限管理">➴</a></h2><blockquote><p>权限管理这部分大家看看就好，我写的也不是特别好，虽然会用，但是不能总结不出来权限管理应该怎么用。</p></blockquote><h3 id="用户组权限管理">用户组权限管理<a class="header-anchor" href="#用户组权限管理">➴</a></h3><p>这种情况适合企业或者小型工作室使用。</p><p>下面的演示我们以用户组+用户权限管理为例。</p><p>首先创建三个用户组</p><p><img src="/assets/img/2020/09/200904_144635_msedge_Jo53.png" alt=""></p><p><img src="/assets/img/2020/09/200904_144833_msedge_jT7a.png" alt=""></p><p>然后回到 <code>共享文件夹</code> 选项卡里，这里可以对用户组设置权限</p><p><img src="/assets/img/2020/09/200904_145618_msedge_T5PH.png" alt=""></p><p><img src="/assets/img/2020/09/200904_145709_msedge_bAZx.png" alt=""></p><p>按照上图的设置</p><ul><li>media 目录，bosss 用户组下的用户有读写权限，Media-department 用户组下的用户有读写权限，Network-department 用户组下的用户有读取权限；</li><li>network 目录，bosss 用户组下的用户有读写权限，Network-department 用户组下的用户有读写权限。</li></ul><p>然后来到 <code>用户</code> 选项卡，然后添加用户，别忘了要加入到相应的用户组</p><p><img src="/assets/img/2020/09/200904_150312_msedge_PS5D.png" alt=""></p><p><img src="/assets/img/2020/09/200904_150418_msedge_eeLl.png" alt=""></p><p>接着为每个部门的每个用户创建账号，就可以按照用户组管理权限了。</p><h3 id="直接使用用户管理权限">直接使用用户管理权限<a class="header-anchor" href="#直接使用用户管理权限">➴</a></h3><p>这种方式更适合自己使用 NAS，或者固定的几个人使用，适合家庭 NAS。</p><p>和前面类似，知识不需要创建那么多用户组，创建用户的时候也不需要加入用户组。</p><p><img src="/assets/img/2020/09/200904_150923_msedge_iJXX.png" alt=""></p><p>注意，看上面那张图，分清用户组和用户的不同。</p><p>不创建用户组是因为用户少，而且固定，直接管理即可，没必要那么麻烦，搞多个用户组。</p><h3 id="特权">特权<a class="header-anchor" href="#特权">➴</a></h3><p>特权是 ACL 之外的补充，是一种更灵活的权限管理.</p><h2 id="SMB-共享">SMB 共享<a class="header-anchor" href="#SMB-共享">➴</a></h2><p>前面的步骤只是在磁盘里创建了共享目录，但是并没有真正共享出去，我们还需要开启 SMB 服务。</p><p>在 <code>服务</code> - <code>SMB/CIFS</code> 选项卡下，启用 SMB 服务</p><p><img src="/assets/img/2020/09/200904_151722_msedge_HHwQ.png" alt=""></p><p>然后添加共享，注意前面创建的共享文件夹都要添加到共享，共享下面的选项可以自行判断是否需要勾选，比如是否开启某些特性（可以百度），是否开启回收站等。</p><p><img src="/assets/img/2020/09/200904_151828_msedge_oB7M.png" alt=""></p><p>然后在 Windows 电脑上，资源管理器地址栏输入 <code>\\omv</code> 或者是 <code>\\192.168.1.xxx</code>（ip），就可以访问，输入账号和密码登录。如果需要磁盘映射，可以直接右键点击需要映射的目录，然后映射网络驱动器即可。</p><p><img src="/assets/img/2020/09/200904_152540_dopus_1d20.png" alt=""></p><p><img src="/assets/img/2020/09/200904_152640_dopus_7F9P.png" alt=""></p><p><img src="/assets/img/2020/09/200904_152659_dopus_7O5q.png" alt=""></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://openmediavault.readthedocs.io/en/5.x/administration/access_rights_management.html#acl-access-control-list">ACL (Access Control List)</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://zh.wikipedia.org/wiki/RAID">RAID</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是 NAS 主要功能的介绍，共享目录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="NAS" scheme="https://blog.xxwhite.com/tags/NAS/"/>
    
    <category term="OMV" scheme="https://blog.xxwhite.com/tags/OMV/"/>
    
  </entry>
  
  <entry>
    <title>OMV面板介绍</title>
    <link href="https://blog.xxwhite.com/2020/omv-3.html"/>
    <id>https://blog.xxwhite.com/2020/omv-3.html</id>
    <published>2020-09-03T13:05:30.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>占坑，以后更新。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;占坑，以后更新</summary>
        
      
    
    
    
    
    <category term="NAS" scheme="https://blog.xxwhite.com/tags/NAS/"/>
    
    <category term="OMV" scheme="https://blog.xxwhite.com/tags/OMV/"/>
    
  </entry>
  
  <entry>
    <title>OMV安装拓展插件</title>
    <link href="https://blog.xxwhite.com/2020/omv-2.html"/>
    <id>https://blog.xxwhite.com/2020/omv-2.html</id>
    <published>2020-08-28T13:05:30.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇文章我们讲 OMV 上安装扩展插件。</p><span id="more"></span><blockquote><p>本文适用于 OMV5。</p></blockquote><p>接上一篇教程，咱们装完了OMV系统，但是刚刚装完的系统，插件会特别少，我们需要安装扩展才可以。</p><h2 id="安装">安装<a class="header-anchor" href="#安装">➴</a></h2><p>使用root用户登录到omv。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="symbol">root@</span>omv</span><br></pre></td></tr></table></figure><p>然后安装插件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O - https:<span class="regexp">//gi</span>thub.com<span class="regexp">/OpenMediaVault-Plugin-Developers/</span>packages<span class="regexp">/raw/m</span>aster/install | bash</span><br></pre></td></tr></table></figure><p>安装之后就可以发现，插件变多了。</p><p><img src="/assets/img/2020/08/200828_101711_msedge_lxgB.png" alt="插件"></p><p><img src="/assets/img/2020/08/200828_101727_msedge_9bD8.png" alt="插件"></p><h2 id="参考">参考<a class="header-anchor" href="#参考">➴</a></h2><p><a href="https://omv-extras.org/">https://omv-extras.org/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这一篇文章我们讲 OMV 上安装扩展插件。&lt;/p&gt;</summary>
    
    
    
    
    <category term="NAS" scheme="https://blog.xxwhite.com/tags/NAS/"/>
    
    <category term="OMV" scheme="https://blog.xxwhite.com/tags/OMV/"/>
    
  </entry>
  
  <entry>
    <title>OMV安装在raid上</title>
    <link href="https://blog.xxwhite.com/2020/omv-1.html"/>
    <id>https://blog.xxwhite.com/2020/omv-1.html</id>
    <published>2020-08-26T20:05:30.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇文章讲怎么让 OMV 系统拥有冗余功能。也就是在 raid 上安装 OMV 系统，坏掉任意一块硬盘的情况下，系统照样能启动。</p><span id="more"></span><h2 id="准备">准备<a class="header-anchor" href="#准备">➴</a></h2><blockquote><p>本文所用镜像为 <code>debian-10.5.0-amd64-netinst.iso</code></p></blockquote><blockquote><p>注意，演示所用环境，启动方式为 UEFI，非 secure boot，硬盘协议为 SATA，需要空间，10G 以上，推荐 60G 或更大空间。安装之前推荐将机器连接网络。</p></blockquote><blockquote><p>最好有 Linux 安装经验，看到英文不要慌，遇到和文章里不一样的，或者是看不懂的，尝试去翻译一下。每张图具体是什么意思，翻译一下图上的英文就能看懂，这个真的不难，我这个四级没过的废物都能看得懂。</p></blockquote><p>这一次我们需要从 Debian 安装 OMV，所以需要一个 Debian10 的镜像，可以在<a href="https://mirrors.huaweicloud.com/debian-cd/">这里</a>下载。</p><p>本文目的是讲 Debian 安装在 raid1 上，并在每个硬盘上安装引导，做的在任意一块硬盘损坏的情况下，系统均能正常启动。</p><h2 id="视频教程">视频教程<a class="header-anchor" href="#视频教程">➴</a></h2><style>.bbplayer{width: 100%; max-width: 950px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-OaIwbflkXlLUEXrh" src="https://player.bilibili.com/player.html?bvid=BV1Hh411R7iD&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-OaIwbflkXlLUEXrh").style.height=document.getElementById("mmedia-OaIwbflkXlLUEXrh").scrollWidth*0.76+"px";    window.onresize = function(){      document.getElementById("mmedia-OaIwbflkXlLUEXrh").style.height=document.getElementById("mmedia-OaIwbflkXlLUEXrh").scrollWidth*0.76+"px";    }; </script><h2 id="安装-Debian">安装 Debian<a class="header-anchor" href="#安装-Debian">➴</a></h2><p>请确保系统插入了两块以上的硬盘用于安装系统盘，接下来跟我我的讲解进入安装步骤。</p><p>首先进入图形化安装界面，语言选择英文即可。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-34-19.png" alt="安装界面"></p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-34-31.png" alt="语言选择"></p><p>区域选择中国，键盘选择美式键盘。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-34-37.png" alt="区域和键盘"></p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-35-01.png" alt="区域和键盘"></p><p>再接下来是网络设置，下面两张图填写的是主机名，这里根据你自己的实际情况填写，不懂的话默认即可，不需要修改。如果你的机器没有联网，会让你手动设置，这个时候跳过即可。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-38-37.png" alt="网络设置"></p><p>接下来输入 root 密码。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-39-09.png" alt="输入root密码"></p><p>再接下来创建一个新用户。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-39-14.png" alt="创建新用户"></p><p>然后是硬盘部分，这是这篇文章的重点之一，这里选择手动分区。</p><p>先创建好分区表，选择对应的硬盘，直接回车即可创建。注意这会清空硬盘里原有的分区，并且会清空数据。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-40-41.png" alt="创建好分区表"></p><p>然后创建一个 EFI 分区，不用太大，够用就行，你如果嫌小，可以自己改大一点。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-40-47.png" alt="创建EFI分区"></p><p>对另一块硬盘做相同的操作，两块硬盘最好是完全一致。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-41-54.png" alt="另一块硬盘"></p><p>然后开始创建软 raid，过程可以看图，看不懂的简单翻译一下就明白了。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-42-00.png" alt="创建软raid"></p><p>两块硬盘都选上，空闲 0 块。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-42-23.png" alt="创建软raid"></p><p>选择未分区的两个位置，创建软 raid。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-42-42.png" alt="创建软raid"></p><p>然后为创建出来的软 raid 分区，这里演示只有一个分区，没有必要按照网上教程分那么多区，然后分目录去挂载，一个就可以。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-43-21.png" alt="软raid分区"></p><p>然后确定不要 swap 分区，并且确定分区的更改。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-43-59.png" alt="确定分区更改"></p><p>确定不插入其他 CD。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-48-04.png" alt="CD"></p><p>选择合适的镜像源，这里选你认为最快的。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-48-15.png" alt="选择镜像源"></p><p>选择需要安装的服务。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-48-53.png" alt="需要安装的服务"></p><p>最后等安装完成，重启应该就可以进入系统。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-16-51-30.png" alt="安装完成"></p><h2 id="创建另一个启动项">创建另一个启动项<a class="header-anchor" href="#创建另一个启动项">➴</a></h2><p>这样虽然把系统安装在了 raid1 上，但是引导只安装在了一块硬盘上，如果引导所在的硬盘挂了，那系统照样是会挂的。</p><p>接下来需要安装另一个启动引导。</p><p>登录系统，输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ip addr</span></span><br></pre></td></tr></table></figure><p>查看当前 ip。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-17-27-02.png" alt="查看ip"></p><p>然后远程登录上去。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span> mc@<span class="number">192.168.91.136</span></span><br></pre></td></tr></table></figure><p>然后切换到 root 用户，安装一些必要的软件</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">su</span></span><br><span class="line"></span><br><span class="line">apt <span class="keyword">update</span></span><br><span class="line">apt install sudo vim <span class="keyword">net</span>-tools efibootmgr</span><br></pre></td></tr></table></figure><p>将 mc 添加进 sudo 用户组</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/sbin/u</span>sermod -a -G sudo mc</span><br></pre></td></tr></table></figure><p>然后关掉 ssh 连接，重新登录一遍。</p><p>输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">df -h</span></span><br></pre></td></tr></table></figure><p><img src="/assets/img/2020/08/200826_173142_WindowsTerminal_iMc2.png" alt="查看磁盘"></p><p>可以看到 <code>/dev/sda1</code> 是当前的 efi 磁盘，需要克隆到 <code>/dev/sdb1</code> 上（这个需要自行判断实际情况）。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd <span class="keyword">if</span>=<span class="regexp">/dev/</span>sda1 of=<span class="regexp">/dev/</span>sdb1</span><br></pre></td></tr></table></figure><p>然后创建新的引导项（下面的命令需要你根据实际情况自行修改）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo efibootmgr -c -g -d <span class="regexp">/dev/</span>sdb -p <span class="number">1</span> -L <span class="string">&quot;debian #2&quot;</span> -l <span class="string">&#x27;\EFI\debian\shimx64.efi&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="测试">测试<a class="header-anchor" href="#测试">➴</a></h2><p>然后重启看一下是不是有了一个启动项 <code>debian #2</code>，尝试一下用这个启动项启动系统，然后再尝试分别拔掉两块硬盘，系统能否正常启动。</p><h2 id="安装-OMV">安装 OMV<a class="header-anchor" href="#安装-OMV">➴</a></h2><blockquote><p>建议：安装OMV之前将 <code>security.debian.org</code> 也替换掉</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&quot;s@http://security.debian.org@https://mirrors.huaweicloud.com@g&quot;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure></blockquote><p>首先将系统更新到最新</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> dist-upgrade</span><br></pre></td></tr></table></figure><p>添加密钥</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install --yes gnupg</span><br><span class="line">sudo wget -O <span class="string">&quot;/etc/apt/trusted.gpg.d/openmediavault-archive-keyring.asc&quot;</span> https:<span class="regexp">//</span>packages.openmediavault.org<span class="regexp">/public/</span>archive.key</span><br><span class="line">sudo apt-key add <span class="string">&quot;/etc/apt/trusted.gpg.d/openmediavault-archive-keyring.asc&quot;</span></span><br></pre></td></tr></table></figure><p>添加软件源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list.d/</span>openmediavault.list</span><br></pre></td></tr></table></figure><p>写入内容为：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//packages.openmediavault.org/public usul main</span><br><span class="line"># <span class="keyword">deb</span> http<span class="variable">s:</span>//downloads.sourceforge.net/project/openmediavault/packages usul main</span><br><span class="line">## Uncomment the following <span class="built_in">line</span> <span class="keyword">to</span> <span class="built_in">add</span> software from the proposed repository.</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//packages.openmediavault.org/public usul-proposed main</span><br><span class="line"># <span class="keyword">deb</span> http<span class="variable">s:</span>//downloads.sourceforge.net/project/openmediavault/packages usul-proposed main</span><br><span class="line">## This software <span class="keyword">is</span> not part of OpenMediaVault, but <span class="keyword">is</span> offered by third-party</span><br><span class="line">## developers <span class="keyword">as</span> <span class="keyword">a</span> service <span class="keyword">to</span> OpenMediaVault users.</span><br><span class="line"># <span class="keyword">deb</span> http<span class="variable">s:</span>//packages.openmediavault.org/public usul partner</span><br><span class="line"># <span class="keyword">deb</span> http<span class="variable">s:</span>//downloads.sourceforge.net/project/openmediavault/packages usul partner</span><br></pre></td></tr></table></figure><p>然后安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">LANG</span>=C.UTF-8</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">DEBIAN_FRONTEND</span>=noninteractive</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">APT_LISTCHANGES_FRONTEND</span>=none</span><br><span class="line"></span><br><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> --yes --auto-<span class="builtin-name">remove</span> --show-upgraded \</span><br><span class="line">    --allow-downgrades --allow-change-held-packages \</span><br><span class="line">    --no-install-recommends \</span><br><span class="line">    --option Dpkg::Options::=<span class="string">&quot;--force-confdef&quot;</span> \</span><br><span class="line">    --option DPkg::Options::=<span class="string">&quot;--force-confold&quot;</span> \</span><br><span class="line">    install openmediavault-keyring openmediavault</span><br><span class="line"></span><br><span class="line">sudo omv-confdbadm populate</span><br></pre></td></tr></table></figure><p>中间遇到什么需要让你手动选择的，全都是默认选项即可。</p><p>然后在浏览器输入机器的ip或者是<code>debian/</code>即可访问后台网络面板。</p><p>至于硬盘坏了怎么恢复，会在以后的文章中讲到。</p><h2 id="参考">参考<a class="header-anchor" href="#参考">➴</a></h2><p><a href="https://www.jianshu.com/p/5557b6172b97">https://www.jianshu.com/p/5557b6172b97</a><br><a href="https://openmediavault.readthedocs.io/en/5.x/installation/on_debian.html">https://openmediavault.readthedocs.io/en/5.x/installation/on_debian.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这一篇文章讲怎么让 OMV 系统拥有冗余功能。也就是在 raid 上安装 OMV 系统，坏掉任意一块硬盘的情况下，系统照样能启动。&lt;/p&gt;</summary>
    
    
    
    
    <category term="NAS" scheme="https://blog.xxwhite.com/tags/NAS/"/>
    
    <category term="OMV" scheme="https://blog.xxwhite.com/tags/OMV/"/>
    
  </entry>
  
  <entry>
    <title>OMV安装</title>
    <link href="https://blog.xxwhite.com/2020/omv-0.html"/>
    <id>https://blog.xxwhite.com/2020/omv-0.html</id>
    <published>2020-08-26T19:05:30.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>前面写了几篇 OMV 的文章，看网上这类中文教程很少，我决定写一系列的 OMV 介绍文章。</p><p>我自己都不是踩坑了，直接从水里趟过来的，希望大家看了我的文章，能少踩一些坑。</p><span id="more"></span><blockquote><p>本文所用 OMV 版本为 OMV5，安装镜像为 <code>openmediavault_5.3.9-amd64.iso</code> 。</p></blockquote><h2 id="视频教程">视频教程<a class="header-anchor" href="#视频教程">➴</a></h2><style>.bbplayer{width: 100%; max-width: 950px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-OuDUeXpOUQRVIUvf" src="https://player.bilibili.com/player.html?bvid=BV1Lv411173Q&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-OuDUeXpOUQRVIUvf").style.height=document.getElementById("mmedia-OuDUeXpOUQRVIUvf").scrollWidth*0.76+"px";    window.onresize = function(){      document.getElementById("mmedia-OuDUeXpOUQRVIUvf").style.height=document.getElementById("mmedia-OuDUeXpOUQRVIUvf").scrollWidth*0.76+"px";    }; </script><h2 id="简介与镜像下载">简介与镜像下载<a class="header-anchor" href="#简介与镜像下载">➴</a></h2><p>OMV 全称是 OpenMediavault，是基于 Debian 的一个开源 NAS 系统，具体资料可以去百度，我个人认为这是一个非常优秀和易用的 NAS 系统。</p><p>我喜欢用 OMV 的原因，主要是因为它基于 Debian 开发，遇到什么幺蛾子都不用怕，Debian 算是 Linux 家族中最易用的系统了，而且网上资料众多，解决问题相对容易。如果用 FreeNAS，基于 FreeBSD 的系统，出问题了想修都修不好。</p><p>只想将 OMV 当普通 NAS 用，没啥基础，找人帮你安装好系统，然后剩下的都在网页上操作就可以了，但是想要用好 OMV，基础的 Linux 知识是要有的，Debian 能在命令行模式下进行基本的操作。</p><p>OMV 的镜像可以可以在<a href="https://www.openmediavault.org/">官网</a>下载，就不过多赘述了。</p><p>下载之后用 <a href="https://www.balena.io/etcher/">etcher</a> 将镜像烧录到 U 盘里，做成启动盘。</p><h2 id="安装">安装<a class="header-anchor" href="#安装">➴</a></h2><blockquote><p>安装部分使用虚拟机演示，实机操作与虚拟机完全一致。</p></blockquote><blockquote><p>注意，演示所用环境，启动方式为 UEFI，非 secure boot，硬盘协议为 SATA，需要空间，10G 以上，推荐 60G 或更大空间。安装之前推荐将机器连接网络。</p></blockquote><blockquote><p>常用按键：左上右下、Tab、Enter、Speace。</p></blockquote><p>首先开机，进入安装界面，选项 Install 开始安装。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-15-02-03.png" alt="安装界面"></p><p>安装语言选择英文即可，不要选中文，中文会乱码。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-15-02-17.png" alt="语言选择"></p><p>然后是区域设置，这里我们选择中国。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-15-02-44.png" alt="区域设置"></p><p>再接下来是本地化和键盘设置，全都选择美国即可。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-15-03-01.png" alt="本地化设置"></p><p>然后是设置密码，输入两次root密码。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-15-06-37.png" alt="设置密码"></p><p>再接下来是网络设置，下面两张图填写的是主机名，这里根据你自己的实际情况填写，不懂的话默认即可，不需要修改。如果你的机器没有联网，会让你手动设置，这个时候跳过即可。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-15-06-55.png" alt="网络设置"></p><p>再接下来是选择安装硬盘，如果只有一块硬盘，就不会出现这个界面。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-15-07-11.png" alt="选择硬盘"></p><p>等完成基本系统安装之后，就是选择镜像源了，这一步选择你认为最快的镜像源。</p><p><img src="/assets/img/2020/08/OMV-2020-08-26-15-08-38.png" alt="选择镜像源"></p><p>等完成基本软件更新之后，再接下来就会自动重启，不出意外的话，重启之后就可以正常进入系统了。</p><p>安装教程到此结束。</p><h2 id="结语">结语<a class="header-anchor" href="#结语">➴</a></h2><p>这篇文章简单讲解了怎么安装OMV，但是安装仅仅只是迈出的第一步，看完这篇文章别着急做，希望多看几篇，有一定的知识储备之后再开始动手。</p><h2 id="参考">参考<a class="header-anchor" href="#参考">➴</a></h2><p><a href="https://openmediavault.readthedocs.io/en/5.x/installation/via_iso.html">https://openmediavault.readthedocs.io/en/5.x/installation/via_iso.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面写了几篇 OMV 的文章，看网上这类中文教程很少，我决定写一系列的 OMV 介绍文章。&lt;/p&gt;
&lt;p&gt;我自己都不是踩坑了，直接从水里趟过来的，希望大家看了我的文章，能少踩一些坑。&lt;/p&gt;</summary>
    
    
    
    
    <category term="NAS" scheme="https://blog.xxwhite.com/tags/NAS/"/>
    
    <category term="OMV" scheme="https://blog.xxwhite.com/tags/OMV/"/>
    
  </entry>
  
  <entry>
    <title>基于OMV打造的All In One</title>
    <link href="https://blog.xxwhite.com/2020/omv-oia.html"/>
    <id>https://blog.xxwhite.com/2020/omv-oia.html</id>
    <published>2020-08-21T23:05:30.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>在 OMV (Debian) 上安装软路由虚拟机，并且网卡直通给虚拟机。</p><span id="more"></span><p>本文适用于 OMV5 ，演示版本为 5.5.8-1，其他版本是否适用，请自行判定。</p><p>这篇教程很复杂，不懂的可以看我以前写的教程，或者是到网上自己爬。</p><p>在前面一段时间，我写过一篇教程，讲的是在 PVE 上安装虚拟机组装 All In One，但是那一期并不完美，只把硬盘直通给了 OMV，而没有直通显卡，这样 OMV 并没有硬件解码的能力。</p><p>看网上大部分 Up 主的方案，都是创建 PVE 虚拟机，然后虚拟机上装 NAS，然后把 SATA 控制器和核显直通给 NAS，我就在想，为什么不直接在 NAS 上安装软路由虚拟机，然后再把网卡直通给软路由？</p><h2 id="准备">准备<a class="header-anchor" href="#准备">➴</a></h2><p>有想法就开搞，看几个常见的 NAS 系统，Synology，FreeNAS，OpenMediaVault。</p><p>这三个系统中，首先把 FreeNAS 排除，基于 FreeBSD 的系统，搞不定，然后是 Synology，白的教程我可以出，黑的是不可能的，但是白的那台我不会瞎折腾的。系统就敲定是 OpenMediaVault，基于 Debian，贼方便。</p><p>安装系统就略过了，这个网上有很多的教程，不过大部分 OMV 都是安装在单盘上的，如果想安装在 Raid 上，只需要一点技巧，这个以后可能会出一期教程的。</p><h2 id="安装拓展插件和内核">安装拓展插件和内核<a class="header-anchor" href="#安装拓展插件和内核">➴</a></h2><p>安装完 OMV 之后先更新系统</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo apt update</span></span><br><span class="line"><span class="attribute">sudo apt dist-upgrade</span></span><br></pre></td></tr></table></figure><p>然后安装<a href="https://github.com/OpenMediaVault-Plugin-Developers/installScript">拓展插件</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O - https:<span class="regexp">//gi</span>thub.com<span class="regexp">/OpenMediaVault-Plugin-Developers/i</span>nstallScript<span class="regexp">/raw/m</span>aster/install | sudo bash</span><br></pre></td></tr></table></figure><p>安装完拓展插件以后，刷新网页，会有<code>OMV-Extras</code>这个选项，在内核选项卡中安装 PVE 内核，并设为默认启动内核。</p><p><img src="/assets/img/2020/200822_102319_msedge_EMI8.png" alt="安装拓展"></p><p>然后重启系统，使用 PVE 内核启动。</p><h2 id="安装-KVM-和-Cockpit">安装 KVM 和 Cockpit<a class="header-anchor" href="#安装-KVM-和-Cockpit">➴</a></h2><p>接下来安装虚拟机，首先安装 <code>Cockpit</code>，这个直接在 OMV 的面板上安装即可（这一步也可以不做，直接使用下面的命令行安装）</p><p><img src="/assets/img/2020/200822_102759_msedge_cwdv.png" alt="安装Cockpit"></p><p>然后安装 KVM 虚拟机相关的东西（如果不懂，直接照抄就行）</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install </span>cockpit cockpit-* qemu qemu-kvm qemu-utils libvirt-* <span class="keyword">bridge-utils </span>virt-* net-tools</span><br></pre></td></tr></table></figure><p>尝试打开 Cockpit 面板看一下可设置的内容。</p><h2 id="创建网桥">创建网桥<a class="header-anchor" href="#创建网桥">➴</a></h2><p>如果你有多个网口想要作为 LAN 口，就需要把这些网卡桥接起来，作为一个网桥使用，在 OMV 里创建网桥非常简单，只要你做了上面的操作，就可以在 OMV 管理面板创建网桥了，注意 OMV5 的网络配置文件，和正常 Debian 的不一样，尽量不要直接修改配置文件。</p><p>创建网桥的过程中，当前连接的网口是不能被选择的，可以把这个网口留作后面要用的直通 WAN 口。</p><p><img src="/assets/img/2020/200822_111808_msedge_0p5f.png" alt="创建网桥"></p><p>创建完网桥之后，需要把网桥添加进 kvm 虚拟机里。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install <span class="keyword">vim</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">vim</span> ~/br0.xml</span><br></pre></td></tr></table></figure><p>添加下面内容，注意 name，我的是 br0，你的不知道是不是。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">network</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>br0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">forward</span> <span class="attr">mode</span>=<span class="string">&quot;bridge&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">name</span>=<span class="string">&#x27;br0&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后添加进 kvm 虚拟机里</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo virsh net-define --file ~/br0.xml</span><br><span class="line">sudo virsh net-<span class="literal">start</span> br0</span><br></pre></td></tr></table></figure><p>然后就可以在 Cockpit 面板里看到这个网络了。</p><p><img src="/assets/img/2020/200822_113327_msedge_a76D.png" alt="查看网络"></p><h2 id="配置硬件直通">配置硬件直通<a class="header-anchor" href="#配置硬件直通">➴</a></h2><p>这里参考PVE虚拟机那一节</p><p>修改 grub 文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span><span class="keyword">default</span>/grub</span><br></pre></td></tr></table></figure><p>找到 <code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</code>，修改为 <code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on&quot;</code>，amd 的话就改为 <code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet amd_iommu=on&quot;</code></p><p><img src="/assets/img/2020/200721_112241_WindowsTerminal_6CmX.png" alt=""></p><p>然后保存，输入命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo update-grub</span></span><br></pre></td></tr></table></figure><p>打开 <code>/etc/modules</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/m</span>odules</span><br></pre></td></tr></table></figure><p>增加以下内容</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vfio</span><br><span class="line">vfio_iommu_type1</span><br><span class="line">vfio_pci</span><br><span class="line">vfio_virqfd</span><br></pre></td></tr></table></figure><p><img src="/assets/img/2020/200721_112418_WindowsTerminal_Oeo6.png" alt=""></p><p>保存，并<strong>重启</strong>服务器。</p><h2 id="创建虚拟机">创建虚拟机<a class="header-anchor" href="#创建虚拟机">➴</a></h2><p>如果你是多网口的机器，并且刚才创建了网桥，创建虚拟机之前，我们要先改一下网线接口的位置，将网线从刚才的网口，改到创建好网桥的网口上。</p><p>首先我们创建一个存储池，在Cockpit面板里操作即可，创建完成后记得激活。</p><p><img src="/assets/img/2020/200822_114626_msedge_oyRF.png" alt="创建存储池"></p><p>然后上传镜像到此存储池中，在电脑上用SCP上传（不是NAS上）</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp <span class="symbol">D:</span>\MonoLogueChi\Desktop\<span class="number">1</span>\openwrt-x86<span class="number">-64</span>-generic-squashfs-combined-efi.qcow2 root<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">129</span><span class="symbol">:/srv/dev-disk-by-label-v/data/vm</span></span><br></pre></td></tr></table></figure><p>如果你不知用什么镜像，可以用我编译的<a href="https://dl.u2sb.top/#/s/GPIQ?path=%2Fblog%2F%E8%BD%AF%E8%B7%AF%E7%94%B1%2FOpenWRT%2F%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E7%9A%84%E9%95%9C%E5%83%8F%2F%E7%B2%BE%E7%AE%80%E5%9B%BA%E4%BB%B6">精简版镜像</a></p><p>然后导入虚拟机，但不要立即启动，修改启动顺序，然后检查一下当前的网络接口是不是br0，如果是br0，就启动测试一下。</p><p><img src="/assets/img/2020/200822_115903_msedge_cD6K.png" alt="引导顺序"></p><p>看一下网卡是不是正常的。</p><p><img src="/assets/img/2020/200822_120500_msedge_VMYL.png" alt="网卡"></p><h2 id="硬件直通">硬件直通<a class="header-anchor" href="#硬件直通">➴</a></h2><h3 id="可以PCIE直通">可以PCIE直通<a class="header-anchor" href="#可以PCIE直通">➴</a></h3><p>测试完之后虚拟机关机，然后搞硬件直通。</p><p>下面这一步，最好打开一个记事本，把需要记录的都粘贴进去。</p><p>首先是看网卡的id，这一部分可以参考我们上一期的PVE教程。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dmesg <span class="string">| grep eth</span></span><br></pre></td></tr></table></figure><p>会输出大概这么一长串东西</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[    1.294563]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">00</span>:<span class="selector-tag">19</span><span class="selector-class">.0</span> <span class="selector-tag">eth0</span>: (PCI <span class="attribute">Express</span>:<span class="number">2.5</span>GT/<span class="attribute">s</span>:Width x1) <span class="selector-tag">bc</span>:<span class="selector-tag">5f</span>:<span class="selector-tag">f4</span>:<span class="selector-tag">ab</span>:<span class="selector-tag">d8</span>:<span class="selector-tag">7b</span></span><br><span class="line"><span class="selector-attr">[    1.294564]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">00</span>:<span class="selector-tag">19</span><span class="selector-class">.0</span> <span class="selector-tag">eth0</span>: <span class="selector-tag">Intel</span>(R) <span class="selector-tag">PRO</span>/<span class="selector-tag">1000</span> <span class="selector-tag">Network</span> <span class="selector-tag">Connection</span></span><br><span class="line"><span class="selector-attr">[    1.294597]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">00</span>:<span class="selector-tag">19</span><span class="selector-class">.0</span> <span class="selector-tag">eth0</span>: <span class="selector-tag">MAC</span>: <span class="selector-tag">10</span>, <span class="selector-tag">PHY</span>: <span class="selector-tag">11</span>, <span class="selector-tag">PBA</span> <span class="selector-tag">No</span>: <span class="selector-tag">FFFFFF-0FF</span></span><br><span class="line"><span class="selector-attr">[    1.405764]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">04</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">eth1</span>: (PCI <span class="attribute">Express</span>:<span class="number">2.5</span>GT/<span class="attribute">s</span>:Width x1) <span class="selector-tag">bc</span>:<span class="selector-tag">5f</span>:<span class="selector-tag">f4</span>:<span class="selector-tag">ab</span>:<span class="selector-tag">d8</span>:<span class="selector-tag">7c</span></span><br><span class="line"><span class="selector-attr">[    1.405765]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">04</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">eth1</span>: <span class="selector-tag">Intel</span>(R) <span class="selector-tag">PRO</span>/<span class="selector-tag">1000</span> <span class="selector-tag">Network</span> <span class="selector-tag">Connection</span></span><br><span class="line"><span class="selector-attr">[    1.405787]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">04</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">eth1</span>: <span class="selector-tag">MAC</span>: <span class="selector-tag">4</span>, <span class="selector-tag">PHY</span>: <span class="selector-tag">8</span>, <span class="selector-tag">PBA</span> <span class="selector-tag">No</span>: <span class="selector-tag">FFFFFF-0FF</span></span><br><span class="line"><span class="selector-attr">[    1.407947]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">00</span>:<span class="selector-tag">19</span><span class="selector-class">.0</span> <span class="selector-tag">enp0s25</span>: <span class="selector-tag">renamed</span> <span class="selector-tag">from</span> <span class="selector-tag">eth0</span></span><br><span class="line"><span class="selector-attr">[    1.496268]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">04</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">enp4s0</span>: <span class="selector-tag">renamed</span> <span class="selector-tag">from</span> <span class="selector-tag">eth1</span></span><br><span class="line"><span class="selector-attr">[    1.552373]</span> <span class="selector-tag">r8125</span> <span class="selector-tag">0000</span>:<span class="selector-tag">01</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">enp1s0</span>: <span class="selector-tag">renamed</span> <span class="selector-tag">from</span> <span class="selector-tag">eth0</span></span><br><span class="line"><span class="selector-attr">[    6.041822]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">04</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">eth0</span>: (PCI <span class="attribute">Express</span>:<span class="number">2.5</span>GT/<span class="attribute">s</span>:Width x1) <span class="selector-tag">bc</span>:<span class="selector-tag">5f</span>:<span class="selector-tag">f4</span>:<span class="selector-tag">ab</span>:<span class="selector-tag">d8</span>:<span class="selector-tag">7c</span></span><br><span class="line"><span class="selector-attr">[    6.041824]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">04</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">eth0</span>: <span class="selector-tag">Intel</span>(R) <span class="selector-tag">PRO</span>/<span class="selector-tag">1000</span> <span class="selector-tag">Network</span> <span class="selector-tag">Connection</span></span><br><span class="line"><span class="selector-attr">[    6.041838]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">04</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">eth0</span>: <span class="selector-tag">MAC</span>: <span class="selector-tag">4</span>, <span class="selector-tag">PHY</span>: <span class="selector-tag">8</span>, <span class="selector-tag">PBA</span> <span class="selector-tag">No</span>: <span class="selector-tag">FFFFFF-0FF</span></span><br><span class="line"><span class="selector-attr">[    6.043005]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">04</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">enp4s0</span>: <span class="selector-tag">renamed</span> <span class="selector-tag">from</span> <span class="selector-tag">eth0</span></span><br><span class="line"><span class="selector-attr">[ 5406.455848]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">04</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">eth0</span>: (PCI <span class="attribute">Express</span>:<span class="number">2.5</span>GT/<span class="attribute">s</span>:Width x1) <span class="selector-tag">bc</span>:<span class="selector-tag">5f</span>:<span class="selector-tag">f4</span>:<span class="selector-tag">ab</span>:<span class="selector-tag">d8</span>:<span class="selector-tag">7c</span></span><br><span class="line"><span class="selector-attr">[ 5406.455850]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">04</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">eth0</span>: <span class="selector-tag">Intel</span>(R) <span class="selector-tag">PRO</span>/<span class="selector-tag">1000</span> <span class="selector-tag">Network</span> <span class="selector-tag">Connection</span></span><br><span class="line"><span class="selector-attr">[ 5406.455864]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">04</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">eth0</span>: <span class="selector-tag">MAC</span>: <span class="selector-tag">4</span>, <span class="selector-tag">PHY</span>: <span class="selector-tag">8</span>, <span class="selector-tag">PBA</span> <span class="selector-tag">No</span>: <span class="selector-tag">FFFFFF-0FF</span></span><br><span class="line"><span class="selector-attr">[ 5406.457045]</span> <span class="selector-tag">e1000e</span> <span class="selector-tag">0000</span>:<span class="selector-tag">04</span>:<span class="selector-tag">00</span><span class="selector-class">.0</span> <span class="selector-tag">enp4s0</span>: <span class="selector-tag">renamed</span> <span class="selector-tag">from</span> <span class="selector-tag">eth0</span></span><br></pre></td></tr></table></figure><p>我想要直通的网卡是 <code>enp4s0</code>，我找到了相关的ID</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0000</span>:<span class="number">04</span>:<span class="number">00</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>那这个有啥用呢？再来看下面的（如果不是新手，下面这一部分其实不用做）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh nodedev-list --tree <span class="string">|grep pci</span></span><br></pre></td></tr></table></figure><p>会输出一个这样的东西</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+- pci_0000_00_00_0</span></span><br><span class="line"><span class="addition">+- pci_0000_00_01_0</span></span><br><span class="line">|   +- pci_0000_01_00_0</span><br><span class="line"><span class="addition">+- pci_0000_00_02_0</span></span><br><span class="line"><span class="addition">+- pci_0000_00_14_0</span></span><br><span class="line"><span class="addition">+- pci_0000_00_16_0</span></span><br><span class="line"><span class="addition">+- pci_0000_00_16_3</span></span><br><span class="line"><span class="addition">+- pci_0000_00_19_0</span></span><br><span class="line"><span class="addition">+- pci_0000_00_1a_0</span></span><br><span class="line"><span class="addition">+- pci_0000_00_1b_0</span></span><br><span class="line"><span class="addition">+- pci_0000_00_1c_0</span></span><br><span class="line"><span class="addition">+- pci_0000_00_1c_2</span></span><br><span class="line">|   +- pci_0000_03_00_0</span><br><span class="line"><span class="addition">+- pci_0000_00_1c_4</span></span><br><span class="line">|   +- pci_0000_04_00_0</span><br><span class="line"><span class="addition">+- pci_0000_00_1d_0</span></span><br><span class="line"><span class="addition">+- pci_0000_00_1f_0</span></span><br><span class="line"><span class="addition">+- pci_0000_00_1f_2</span></span><br><span class="line"><span class="addition">+- pci_0000_00_1f_3</span></span><br></pre></td></tr></table></figure><p>在里面找到 <code>pci_0000_04_00_0</code> ，就是前面我们找到的网卡，别着急，接着看。</p><p>输入命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">virsh</span> nodedev-dumpxml pci_<span class="number">0000</span>_<span class="number">04</span>_<span class="number">00</span>_<span class="number">0</span></span><br></pre></td></tr></table></figure><p>会输出这样的一堆东西</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">device</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>pci_0000_04_00_0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span>&gt;</span>/sys/devices/pci0000:00/0000:00:1c.4/0000:04:00.0<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span>pci_0000_00_1c_4<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">driver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>vfio-pci<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">capability</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">domain</span>&gt;</span>0<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bus</span>&gt;</span>4<span class="tag">&lt;/<span class="name">bus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>0<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span>&gt;</span>0<span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">product</span> <span class="attr">id</span>=<span class="string">&#x27;0x150c&#x27;</span>&gt;</span>82583V Gigabit Network Connection<span class="tag">&lt;/<span class="name">product</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vendor</span> <span class="attr">id</span>=<span class="string">&#x27;0x8086&#x27;</span>&gt;</span>Intel Corporation<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iommuGroup</span> <span class="attr">number</span>=<span class="string">&#x27;14&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x04&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">iommuGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pci-express</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">validity</span>=<span class="string">&#x27;cap&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">speed</span>=<span class="string">&#x27;2.5&#x27;</span> <span class="attr">width</span>=<span class="string">&#x27;1&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">validity</span>=<span class="string">&#x27;sta&#x27;</span> <span class="attr">speed</span>=<span class="string">&#x27;2.5&#x27;</span> <span class="attr">width</span>=<span class="string">&#x27;1&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pci-express</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">capability</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">device</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面这些最好记在一个地方，方便等下查看。</p><p>接着detach设备</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">virsh</span> nodedev-dettach pci_<span class="number">0000</span>_<span class="number">04</span>_<span class="number">00</span>_<span class="number">0</span></span><br></pre></td></tr></table></figure><p>然后编辑虚拟机配置文件，具体名称看你刚才设置的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>libvirt<span class="regexp">/qemu/</span>openwrt.xml</span><br></pre></td></tr></table></figure><p>添加一部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">devices</span>&gt;</span></span><br><span class="line">......</span><br><span class="line">  <span class="tag">&lt;<span class="name">hostdev</span> <span class="attr">mode</span>=<span class="string">&#x27;subsystem&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">managed</span>=<span class="string">&#x27;yes&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">source</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">address</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x04&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">hostdev</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;/<span class="name">devices</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中的 <code>&lt;address domain='0x0000' bus='0x04' slot='0x00' function='0x0'/&gt;</code>，这一部分按照上面的填。</p><p>添加完成之后，保存，然后重启主机，再打开虚拟机，看一下是否有另一张网卡。</p><h3 id="不能硬件直通">不能硬件直通<a class="header-anchor" href="#不能硬件直通">➴</a></h3><p>如果你的网卡是那种螃蟹卡，不能pcie直通，就按照下面的来做。</p><p>在虚拟机这里再添加一张网卡</p><p><img src="/assets/img/2020/200822_122635_msedge_iZ6y.png" alt="添加网卡"></p><p>这样虽然也能用，但是效率肯定没有硬件直通高。</p><p>开机，输入 <code>ifconfig -a</code> 查看另一张网卡是否存在。</p><h2 id="设置">设置<a class="header-anchor" href="#设置">➴</a></h2><p>接下来就是正常软路由的设置了，因为前面开机过一次，可能会遇到没有WAN口的情况，遇到这种情况，手动创建一个WAN口就可以了。</p><h2 id="补充">补充<a class="header-anchor" href="#补充">➴</a></h2><p>貌似按照上面操作，OMV上的DNS会被NetworkManager接管，导致DNS配置出现问题。这个可以通过修改NetworkManager配置文件解决</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>NetworkManager/NetworkManager.conf</span><br></pre></td></tr></table></figure><p>修改</p><h2 id="code￼22"><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[main]</span></span><br><span class="line"><span class="attr">dns</span>=none</span><br><span class="line"><span class="attr">no-auto-default</span>=*</span><br></pre></td></tr></table></figure><a class="header-anchor" href="#code￼22">➴</a></h2><p>参考</p><blockquote><p>KVM 安装部分 <a href="https://zhuanlan.zhihu.com/p/113187354">https://zhuanlan.zhihu.com/p/113187354</a><br>硬件直通部分 <a href="https://libvirt.org/formatdomain.html">https://libvirt.org/formatdomain.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 OMV (Debian) 上安装软路由虚拟机，并且网卡直通给虚拟机。&lt;/p&gt;</summary>
    
    
    
    
    <category term="软路由" scheme="https://blog.xxwhite.com/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
    <category term="NAS" scheme="https://blog.xxwhite.com/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>PVE虚拟机安装软路由</title>
    <link href="https://blog.xxwhite.com/2020/pve-router.html"/>
    <id>https://blog.xxwhite.com/2020/pve-router.html</id>
    <published>2020-07-20T14:05:30.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>在 PVE 虚拟机上安装软路由。</p><span id="more"></span><h2 id="准备">准备<a class="header-anchor" href="#准备">➴</a></h2><p>首先需要准备 PVE 的安装镜像，这个可以在<a href="https://www.proxmox.com/en/downloads">官网</a>下载，网络不好的同学请自行想办法解决。</p><p>然后需要软路由镜像，如果使用爱快的话，也可以直接在<a href="https://www.ikuai8.com/component/download">官网</a>下载。需要 openwrt 的话，可以到你能找到的地方下载，也可以在我的<a href="https://dl.u2sb.top/#/s/GPIQ?path=%2Fblog%2F%E8%BD%AF%E8%B7%AF%E7%94%B1%2FOpenWRT">网盘</a>里下载。</p><p>准备好镜像之后，需要把 PVE 镜像烧录到 U 盘里。</p><p><img src="/assets/img/2020/200720-114245-balenaEtcher_8E7PtNeR5D.png" alt=""></p><p>本文演示所用版本为：</p><ul><li>pve 6.2-4</li><li>ikuai iKuai8_3.3.9_Build202006150942</li></ul><p>所在网络环境：</p><ul><li>当前使用路由器，网关为 192.168.1.1</li></ul><p>阅读要求：</p><ul><li>具有一定的解决问题能力，能熟练使用百度等搜索引擎；</li><li>有一点 Linux 基础知识，常识上的东西要懂，ssh 工具要会用；</li><li>会在 Linux 上编辑文档，现在不会的话，马上去百度 vi 编辑器使用。</li></ul><h2 id="虚拟机布置示意图">虚拟机布置示意图<a class="header-anchor" href="#虚拟机布置示意图">➴</a></h2><p><img src="/assets/img/2020/pve-net.png" alt="" height="500"></p><p>我这套方案是爱快作为主路由，OpenWRT 作为旁路由，DHCP 服务端在旁路由上，内部设备默认全部走旁路由，不想走旁路由的需要手动设置 IP 和网关，适合家用。</p><p>如果还有其他的接口，如果要当 LAN 口，就全部加入到这个网桥中，如果要当 WAN 口，就直通到爱快虚拟机中。如果不需要双软路由，就把唯一的软路由放在爱快的位置。</p><p>如果你有特别多的网口，可以将一个网口直通到爱快里，连接交换机作也许可以降低一点点延时，如果你只有两个三个网口，老老实实按照我的教程走。</p><p>整台机器对外只有 WAN 口和 LAN 口两个接口，WAN 口接光猫，LAN 口接交换机之类的设备。不要把他想的多复杂，对外和普通软路由没啥区别。</p><h2 id="安装虚拟机">安装虚拟机<a class="header-anchor" href="#安装虚拟机">➴</a></h2><p>将 U 盘插入机器，进入 BIOS，选择使用 U 盘启动，如果有安全启动之类的东西，请先关掉。并且需要打开 vt-x 和 vt-d。</p><p><img src="/assets/img/2020/bandicam_2020-07-21_09-48-45-084.png" alt="" height="500"></p><p><img src="/assets/img/2020/bandicam_2020-07-21_09-48-56-157.png" alt="" height="500"></p><p>记得硬盘要改为 AHCI 模式。</p><p><img src="/assets/img/2020/bandicam_2020-07-21_09-48-01-863.png" alt="" height="500"></p><p>做完上述修改之后，就可以使用 U 盘启动安装 PVE 了。进入 PVE 安装，只要按照提示一步一步往下走就可以了，这里不做详细讲解，遇到不明白的可以百度。</p><p>注意一下，在安装过程中插有网线的那张网卡会被自动添加进网桥里，以后也就会用作路由器的 LAN 口。</p><p><img src="/assets/img/2020/bandicam_2020-07-21_10-05-20-311.png" alt="" height="500"></p><p>安装完成以后，重启并在浏览器打开后台。记得后台地址一定要加 https。</p><p><img src="/assets/img/2020/bandicam_2020-07-21_10-08-39-161.png" alt="" height="500"></p><p><img src="/assets/img/2020/200721_101427_msedge_x79A.png" alt="" height="500"></p><h2 id="设置硬件直通">设置硬件直通<a class="header-anchor" href="#设置硬件直通">➴</a></h2><p>想要让 PVE 硬件直通，需要做一些修改。</p><p>使用 ssh 登录到 pve 服务器，我这里使用 Windows Terminal 演示，大家可以根据自己的喜好选择使用别的 shell 工具，比如 xshell 或者 finalshell。</p><p><img src="/assets/img/2020/200721_112133_WindowsTerminal_F0uH.png" alt=""></p><p>以下内容使用到了 vi 编辑器，vi 编辑器的使用方法请自行百度。</p><p>修改 grub 文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span><span class="keyword">default</span>/grub</span><br></pre></td></tr></table></figure><p>找到 <code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</code>，修改为 <code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on&quot;</code>，amd 的话就改为 <code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet amd_iommu=on&quot;</code></p><p><img src="/assets/img/2020/200721_112241_WindowsTerminal_6CmX.png" alt=""></p><p>然后保存，输入命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">update-grub</span></span><br></pre></td></tr></table></figure><p>打开 <code>/etc/modules</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/m</span>odules</span><br></pre></td></tr></table></figure><p>增加以下内容</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vfio</span><br><span class="line">vfio_iommu_type1</span><br><span class="line">vfio_pci</span><br><span class="line">vfio_virqfd</span><br></pre></td></tr></table></figure><p><img src="/assets/img/2020/200721_112418_WindowsTerminal_Oeo6.png" alt=""></p><p>保存，并<strong>重启</strong>服务器。</p><h2 id="安装和配置爱快">安装和配置爱快<a class="header-anchor" href="#安装和配置爱快">➴</a></h2><h3 id="准备镜像">准备镜像<a class="header-anchor" href="#准备镜像">➴</a></h3><p>安装爱快有两种方法，一种是直接使用 ISO 镜像安装，另一种是导入 IMG 镜像，由于使用 ISO 安装 64 位爱快，必须要有 4G 以上的内存，对于小内存机器并不友好，所以我打算使用第二种方法安装。</p><p>下载爱快的 IMG 镜像，然后用 DiskGenius 处理一下镜像，这个工具在我的网盘里也有下载。</p><p>首先创建一个空的磁盘镜像文件 <code>磁盘</code>-&gt;<code>新建虚拟磁盘文件</code>-&gt;<code>img格式</code>，大小选择 1G 就可以，如果你喜欢的话，可以搞更大。</p><p><img src="/assets/img/2020/200721_114351_DiskGenius_7FnC.png" alt=""></p><p><img src="/assets/img/2020/200721_114424_DiskGenius_CWx2.png" alt=""></p><p>然后把下载好的爱快镜像也拖进来，使用 <code>工具</code>-&gt;<code>磁盘克隆</code> 功能，把爱快复制到这块新盘上面。</p><p><img src="/assets/img/2020/200721_114504_DiskGenius_QAvc.png" alt=""></p><p>将新建的这块磁盘镜像上传到服务器上，我这里使用 SCP 工具，你也可以使用其他工具。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp D:<span class="symbol">\M</span>onoLogueChi<span class="symbol">\D</span>esktop<span class="symbol">\i</span>kuai.img root@192.168.1.68:~</span><br></pre></td></tr></table></figure><p><img src="/assets/img/2020/200721_115842_WindowsTerminal_IsPX.png" alt=""></p><h3 id="创建虚拟机">创建虚拟机<a class="header-anchor" href="#创建虚拟机">➴</a></h3><p>然后创建虚拟机，这一步需要注意的几个点，硬盘选择 SATA 模式，硬盘大小无所谓，等下我们都是要删掉的。</p><p>CPU 的类别要选择你自己 CPU 对应的，如果实在不清楚，就选 KVM64（性能上会稍微差一点）或者 host（性能更强，但是兼容性较差）。</p><p>如果是用在生产环境，64 位固件推荐给 2G 或更高内存，我这里只是演示，就只给了 1G 内存。</p><p>网络那里现在只添加一个网桥的接口就可以。</p><p><img src="/assets/img/2020/200721_123457_msedge_19Og.png" alt=""></p><p><img src="/assets/img/2020/200721_123513_msedge_MZ5f.png" alt=""></p><p><img src="/assets/img/2020/200721_123530_msedge_1jTI.png" alt=""></p><p><img src="/assets/img/2020/200721_123610_msedge_1mOU.png" alt=""></p><p><img src="/assets/img/2020/200721_123632_msedge_nqMJ.png" alt=""></p><p><img src="/assets/img/2020/200721_123655_msedge_ssSb.png" alt=""></p><p><img src="/assets/img/2020/200721_123709_msedge_OLph.png" alt=""></p><p><img src="/assets/img/2020/200721_123721_msedge_5rfn.png" alt=""></p><p>然后分离并且删除刚才创建的虚拟硬盘，也就是 sata0，一定要记得删除。</p><p><img src="/assets/img/2020/200721_125612_msedge_I9PI.png" alt=""></p><p>然后再使用 ssh 登录到 PVE，定位到刚才上传镜像的目录，然后将镜像导入到 PVE 中。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">qm</span> importdisk <span class="number">100</span> ikuai.img local-lvm</span><br></pre></td></tr></table></figure><p>其中 <code>100</code> 为虚拟机 ID，可以在控制台查看，<code>ikuai.img</code> 镜像路径，可以是相对路径，也可以是绝对路径 <code>local-lvm</code> 就不要改了。</p><p>然后回到浏览器里的管理后台，可以看到编号为 100 的爱快下面，多了一块未使用的磁盘 0，把这块磁盘加上去。</p><p><img src="/assets/img/2020/200721_131026_msedge_IbbL.png" alt=""></p><p>如果你前面选的不是 sata，或者是没有删除原有的磁盘，记得要到选项里面修改启动顺序。</p><p>完成上面的操作以后，我们就开机，爱快第一次启动会自动初始化硬盘，并且会自动重启一次，这个不要担心，慢慢等就好。等开机以后会看到如下图的一个东西，看到这个就证明已经安装成功了，我们先关机。</p><p><img src="/assets/img/2020/200721_131748_msedge_qd78.png" alt=""></p><h3 id="查找网卡-ID">查找网卡 ID<a class="header-anchor" href="#查找网卡-ID">➴</a></h3><h4 id="简单方法">简单方法<a class="header-anchor" href="#简单方法">➴</a></h4><p>输入命令</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg <span class="string">| grep eth</span></span><br></pre></td></tr></table></figure><p>会输出</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[    <span class="number">1.407753</span>] e1000e <span class="number">0000:00:19</span>.<span class="number">0</span> eth0: (PCI Express:<span class="number">2</span>.<span class="number">5</span>GT/s:Width x1) bc:<span class="number">5</span>f:f4:ab:d8:<span class="number">7</span>b</span><br><span class="line">[    <span class="number">1.407754</span>] e1000e <span class="number">0000:00:19</span>.<span class="number">0</span> eth0: Intel(R) PRO/<span class="number">1000</span> Network Connection</span><br><span class="line">[    <span class="number">1.407788</span>] e1000e <span class="number">0000:00:19</span>.<span class="number">0</span> eth0: MAC: <span class="number">10</span>, PHY: <span class="number">11</span>, PBA No: FFFFFF-<span class="number">0</span>FF</span><br><span class="line">[    <span class="number">1.516131</span>] e1000e <span class="number">0000:02:00</span>.<span class="number">0</span> eth1: (PCI Express:<span class="number">2</span>.<span class="number">5</span>GT/s:Width x1) bc:<span class="number">5</span>f:f4:ab:d8:<span class="number">7</span>c</span><br><span class="line">[    <span class="number">1.516133</span>] e1000e <span class="number">0000:02:00</span>.<span class="number">0</span> eth1: Intel(R) PRO/<span class="number">1000</span> Network Connection</span><br><span class="line">[    <span class="number">1.516147</span>] e1000e <span class="number">0000:02:00</span>.<span class="number">0</span> eth1: MAC: <span class="number">4</span>, PHY: <span class="number">8</span>, PBA No: FFFFFF-<span class="number">0</span>FF</span><br><span class="line">[    <span class="number">1.516934</span>] e1000e <span class="number">0000:00:19</span>.<span class="number">0</span> enp0s25: renamed from eth0</span><br><span class="line">[    <span class="number">1.529255</span>] e1000e <span class="number">0000:02:00</span>.<span class="number">0</span> enp2s0: renamed from eth1</span><br></pre></td></tr></table></figure><p>我们就知道了网卡 ID 和网卡的对应关系</p><ul><li><code>enp0s25</code> - <code>eth0</code> - <code>00:19.0</code></li><li><code>enp2s0</code> - <code>eth1</code> - <code>02:00.0</code></li></ul><h4 id="标准方法">标准方法<a class="header-anchor" href="#标准方法">➴</a></h4><p>先输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ip addr</span></span><br></pre></td></tr></table></figure><p>看到有输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="number">1000</span></span><br><span class="line">    <span class="attribute">link</span>/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    <span class="attribute">inet</span> <span class="number">127.0.0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       <span class="attribute">valid_lft</span> forever preferred_lft forever</span><br><span class="line">    <span class="attribute">inet6</span> ::<span class="number">1</span>/<span class="number">128</span> scope host</span><br><span class="line">       <span class="attribute">valid_lft</span> forever preferred_lft forever</span><br><span class="line"><span class="attribute">2</span>: enp<span class="number">0</span>s<span class="number">25</span>: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc pfifo_fast master vmbr<span class="number">0</span> state UP group default qlen <span class="number">1000</span></span><br><span class="line">    <span class="attribute">link</span>/ether bc:<span class="number">5</span>f:f<span class="number">4</span>:ab:d<span class="number">8</span>:<span class="number">7</span>b brd ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="attribute">3</span>: enp<span class="number">2</span>s<span class="number">0</span>: &lt;BROADCAST,MULTICAST&gt; mtu <span class="number">1500</span> qdisc noop state DOWN group default qlen <span class="number">1000</span></span><br><span class="line">    <span class="attribute">link</span>/ether bc:<span class="number">5</span>f:f<span class="number">4</span>:ab:d<span class="number">8</span>:<span class="number">7</span>c brd ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="attribute">4</span>: vmbr<span class="number">0</span>: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc noqueue state UP group default qlen <span class="number">1000</span></span><br><span class="line">    <span class="attribute">link</span>/ether bc:<span class="number">5</span>f:f<span class="number">4</span>:ab:d<span class="number">8</span>:<span class="number">7</span>b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    <span class="attribute">inet</span> <span class="number">192.168.1.68</span>/<span class="number">24</span> brd <span class="number">192.168.1.255</span> scope global vmbr<span class="number">0</span></span><br><span class="line">       <span class="attribute">valid_lft</span> forever preferred_lft forever</span><br><span class="line">    <span class="attribute">inet6</span> fe<span class="number">80</span>::be<span class="number">5</span>f:f<span class="number">4</span>ff:feab:d<span class="number">87</span>b/<span class="number">64</span> scope link</span><br><span class="line">       <span class="attribute">valid_lft</span> forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>可以判断得到，两张网卡的名称分别是 <code>enp0s25</code> 和 <code>enp2s0</code>，其实这一步也可以省略，因为在 PVE 的管理后台就能看到网卡的信息。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci <span class="string">|grep net</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">00</span>:<span class="number">19</span>.<span class="number">0</span> Ethernet controller: Intel Corporation <span class="number">82579</span>LM Gigabit Network Connection (rev <span class="number">04</span>)</span><br><span class="line"><span class="attribute">02</span>:<span class="number">00</span>.<span class="number">0</span> Ethernet controller: Intel Corporation <span class="number">82583</span>V Gigabit Network Connection</span><br></pre></td></tr></table></figure><p>其中 <code>00:19.0</code> 和 <code>02:00.0</code> 就是网卡的 ID。</p><p>然后输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dmesg</span> | grep enp<span class="number">2</span>s<span class="number">0</span></span><br></pre></td></tr></table></figure><p>会输出</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[    1.529255]</span> e1000e <span class="number">0000</span>:<span class="number">02</span>:<span class="number">00.0</span> enp2s0: renamed <span class="keyword">from</span> eth1</span><br></pre></td></tr></table></figure><p>我们指定 enp2s0 对应的是 eth1，接下来接着输入</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg <span class="string">| grep eth1</span></span><br></pre></td></tr></table></figure><p>会输出</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[    <span class="number">1.516131</span>] e1000e <span class="number">0000:02:00</span>.<span class="number">0</span> eth1: (PCI Express:<span class="number">2</span>.<span class="number">5</span>GT/s:Width x1) bc:<span class="number">5</span>f:f4:ab:d8:<span class="number">7</span>c</span><br><span class="line">[    <span class="number">1.516133</span>] e1000e <span class="number">0000:02:00</span>.<span class="number">0</span> eth1: Intel(R) PRO/<span class="number">1000</span> Network Connection</span><br><span class="line">[    <span class="number">1.516147</span>] e1000e <span class="number">0000:02:00</span>.<span class="number">0</span> eth1: MAC: <span class="number">4</span>, PHY: <span class="number">8</span>, PBA No: FFFFFF-<span class="number">0</span>FF</span><br><span class="line">[    <span class="number">1.529255</span>] e1000e <span class="number">0000:02:00</span>.<span class="number">0</span> enp2s0: renamed from eth1</span><br></pre></td></tr></table></figure><p>到这里，我们就可以知道，有对应关系 <code>enp2s0</code> - <code>eth1</code> - <code>02:00.0</code>，另一张就是 <code>enp0s25</code> - <code>eth0</code> - <code>00:19.0</code></p><h3 id="设置-WAN-口直通">设置 WAN 口直通<a class="header-anchor" href="#设置-WAN-口直通">➴</a></h3><p>接下来回到后台，在 PVE 的网络选项卡里可以看到，网桥中的端口为 <code>enp0s25</code>，那我们需要直通的就是另一张网卡，也就是 <code>enp2s0</code>，ID 为 <code>02:00.0</code></p><p><img src="/assets/img/2020/200721_140132_msedge_tgAr.png" alt=""></p><p>在爱快虚拟机下的 <code>硬件</code>-&gt;<code>添加</code>-&gt;<code>PCI设备</code>，然后在下拉菜单找到对应 ID 的设备。</p><p><img src="/assets/img/2020/200721_140747_msedge_tYCK.png" alt=""></p><p>把 WAN 口插上网线，连接到原来的路由器，不要改变以前的网络设备，然后重新开机。</p><p>如果正常的话，可以看到 WAN 口和 LAN 口都是已连接。</p><p><img src="/assets/img/2020/200721_141545_msedge_mR66.png" alt=""></p><h3 id="爱快设置">爱快设置<a class="header-anchor" href="#爱快设置">➴</a></h3><p><strong>以下内容均属于爱快使用的一部分，大家可以会简略一部分</strong></p><p>下面这一步不设置也可以，只是测试看一下爱快是否正常运行，不想做的直接跳到后面安装 OpenWRT 的这一步，在最后再去设置爱快。</p><p>到了这里，就需要修改一下网络了，把电脑和交换机断开，直接插到机器的 LAN 口，也就是最开始插网线的端口上（电脑和 PVE 虚拟机的 LAN 口直连）。然后把电脑网络修改为手动获取 IP（因为爱快默认没开 DHCP，如果是 OP 的话会自动获取 IP）。</p><p><img src="/assets/img/2020/200721_142521_explorer_AlF8.png" alt=""></p><p>然后在浏览器打开 <code>192.168.1.1</code> 进入爱快后台，默认用户名和密码均为 <code>admin</code>。</p><p>设置外网，给 WAN 口绑定直通的那张网卡，然后先暂时选用 <code>DHCP</code>（这些都是临时的，等整机安装完了，怎么改随你，如果你真有能力一步到位就去搞，没有能力就按照教程走），设置完了记得点一下确定，别傻傻的等他转完圈。</p><p><img src="/assets/img/2020/200721_144443_msedge_yvwk.png" alt=""></p><p><img src="/assets/img/2020/200721_144521_msedge_eXlW.png" alt=""></p><p>至此，爱快就已经安装并且设置完成了，这里只是测试一下，测试完以后要将网线改回到初始的状态，电脑和 PVE 虚拟机的 LAN 口都接在同一交换机上。</p><h2 id="安装和配置-OpenWRT">安装和配置 OpenWRT<a class="header-anchor" href="#安装和配置-OpenWRT">➴</a></h2><h3 id="安装">安装<a class="header-anchor" href="#安装">➴</a></h3><p>和上面创建爱快虚拟机的步骤一样，创建一个 OpenWRT 虚拟机，只是不需要提前处理镜像，也不需要做直通网卡这一步了。还有有区别的就是，如果是使用 UEFI 启动的镜像，需要选择 BIOS 为 UEFI 启动的，如果是传统方式启动的，就和爱快设置一样。</p><p><img src="/assets/img/2020/200721_155550_msedge_fPSb.png" alt=""></p><p>安装完成之后开机。</p><h3 id="配置">配置<a class="header-anchor" href="#配置">➴</a></h3><p>我们需要将 OpenWRT 设置为旁路由，但是想要登录 OpenWRT 需要设置一下。</p><p>输入命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ifconfig</span> br-lan <span class="number">192.168.1.2</span></span><br></pre></td></tr></table></figure><p>然后在浏览器打开 <code>192.168.1.2</code>，就可以登录到 OpenWRT 的后台了。</p><p>再接下来修改 LAN 口，就按照旁路由的设置去修改。旁路由相关的文章，我在前几天写过，不懂的可以去翻一下（下面图片只是演示，具体要去看教程，有些需要在 DHCP 那里勾选上强制）。</p><p><img src="/assets/img/2020/200721_165018_msedge_GvRD.png" alt=""></p><p><img src="/assets/img/2020/200721_165042_msedge_a7lR.png" alt=""></p><p>接下来还是测试，将电脑和虚拟机的 LAN 口直连，如果前面设置了手动设置 IP 和 DNS 就删掉，改成自动获取 IP 和 DNS。</p><p>过一会之后看一下效果</p><p><img src="/assets/img/2020/200721_165921_explorer_XRgg.png" alt=""></p><p>如图所示，网关和 DNS 服务器都指向旁路由，就说明设置成功了。</p><p>再接下来主路由爱快和旁路由 OpenWRT 的设置就不需要我教了，大家可以发挥所长，打造自己的网络环境了，如果还是太多的内容不会的话，可以翻一翻其他的文章，多学习。</p><h2 id="安装-NAS">安装 NAS<a class="header-anchor" href="#安装-NAS">➴</a></h2><p>安装 NAS 系统的话，就在下一篇文章再来吧，这一篇已经够长了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 PVE 虚拟机上安装软路由。&lt;/p&gt;</summary>
    
    
    
    
    <category term="软路由" scheme="https://blog.xxwhite.com/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>旁路由设置</title>
    <link href="https://blog.xxwhite.com/2020/side-routing.html"/>
    <id>https://blog.xxwhite.com/2020/side-routing.html</id>
    <published>2020-07-12T23:05:30.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>学会设置旁路由，发挥单网口设备的余热。</p><span id="more"></span><p>简单说明一下怎么设置旁路由，发挥单网口设备的余热。</p><h2 id="设备简介">设备简介<a class="header-anchor" href="#设备简介">➴</a></h2><p>这次演示用的旁路由为 OpenWrt 单网口设备，主路由不方便介绍。</p><h2 id="旁路由设置">旁路由设置<a class="header-anchor" href="#旁路由设置">➴</a></h2><p>首先正常烧录镜像，不会的可以看<a href="/2020/flash-image.html">教程</a>，然后正常登录软路由。</p><p>设置 LAN 口，修改 LAN 口 IP 为主路由网段下的 IP，修改网关为主路由。</p><p><img src="/assets/img/2020/Snipaste_2020-07-13_09-34-01.png" alt=""></p><p>点击保存，先不要点应用。</p><p>然后在 <code>物理设置</code> 选项卡中取消桥接，直接选择 LAN 网卡，然后保存。</p><p><img src="/assets/img/2020/Snipaste_2020-07-13_09-31-45.png" alt=""></p><p>修改防火墙设置，添加</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">iptables</span> -t nat -I POSTROUTING -o eth<span class="number">0</span> -j MASQUERADE</span><br></pre></td></tr></table></figure><p><img src="/assets/img/2020/Snipaste_2020-07-13_10-09-30.png" alt=""></p><p>保存，然后点击右上角的未保存的配置，保存并应用。</p><p>此时将软路由插到主路由上，并且使用刚才设置的软路由 IP，应该可以正常访问到软路由。</p><h2 id="如何使用">如何使用<a class="header-anchor" href="#如何使用">➴</a></h2><p>上面旁路由已经设置完成了，但还是不能生效，我们还需要其他的设置才能使用，下面给出几种方法，任选一种即可。</p><h3 id="手动指定网关和-DNS">手动指定网关和 DNS<a class="header-anchor" href="#手动指定网关和-DNS">➴</a></h3><p>这种方法适用于临时使用，或者是你不想影响其他人正常上网，是最简单，也是最麻烦的一直方法。</p><p>首先关闭旁路由的 DHCP</p><p><img src="/assets/img/2020/Snipaste_2020-07-13_09-32-24.png" alt=""></p><p>然后在需要设置的电脑上，打开控制面板里的网络连接，然后手动设置 IP 和 DNS，其中网关需要设置为旁路由的 IP，这样运行在旁路由上的服务就可以在这台电脑上使用了。</p><p><img src="/assets/img/2020/Snipaste_2020-07-13_10-27-44.png" alt=""></p><h3 id="使用主路由的-DHCP">使用主路由的 DHCP<a class="header-anchor" href="#使用主路由的-DHCP">➴</a></h3><p>这是最常用的一种方法，需要关闭旁路由的 DHCP，并修改主路由的 DHCP 选项，设置默认网关和 DNS 服务器为旁路由。</p><p>我这里主路由不支持修改 DHCP 默认网关，就不放图了，具体可以百度 xxx 路由器修改 DHCP 网关。</p><p>OpenWrt 的修改方法可以参考下面。</p><h3 id="使用旁路由的-DHCP">使用旁路由的 DHCP<a class="header-anchor" href="#使用旁路由的-DHCP">➴</a></h3><p>开启旁路由 DHCP，并且按图设置，指定网关和 DNS 为旁路由，并关闭主路由的 DHCP。</p><p><img src="/assets/img/2020/Snipaste_2020-07-13_10-57-10.png" alt=""></p><h2 id="补充">补充<a class="header-anchor" href="#补充">➴</a></h2><p>经过以上设置之后，在旁路由搞去广告或者其他骚东西，就可以对下面的设备生效了，如果是长期使用，建议由旁路由接管 DHCP，为主路由分担压力。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学会设置旁路由，发挥单网口设备的余热。&lt;/p&gt;</summary>
    
    
    
    
    <category term="软路由" scheme="https://blog.xxwhite.com/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>软路由烧写镜像</title>
    <link href="https://blog.xxwhite.com/2020/flash-image.html"/>
    <id>https://blog.xxwhite.com/2020/flash-image.html</id>
    <published>2020-07-12T18:05:30.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>简单说一下怎么给软路由装系统</p><span id="more"></span><h2 id="下载镜像">下载镜像<a class="header-anchor" href="#下载镜像">➴</a></h2><p>首先需要下载一个合适的镜像，openwrt 的话可以在 GitHub 上找，也可以在恩山去找别人编译的，也可以自己动手编译一个，不想找的话可以用我自己编译的镜像</p><p><a href="https://dl.u2sb.top/#/s/GPIQ?path=%2Fblog%2F%E8%BD%AF%E8%B7%AF%E7%94%B1%2FOpenWRT">下载地址</a></p><p>里面每个镜像都不一样，直接往 U 盘里烧，选择 img 格式的即可。</p><h2 id="准备软件">准备软件<a class="header-anchor" href="#准备软件">➴</a></h2><p>推荐使用的软件是 <a href="https://etcher.io/">etcher</a> 或者 <a href="https://rufus.ie/">rufus</a></p><p>这两个软件都挺实用的，下面我以 etcher 为例，简单说明一下怎么烧录镜像。</p><h2 id="烧录镜像">烧录镜像<a class="header-anchor" href="#烧录镜像">➴</a></h2><p>插上 U 盘，然后打开软件。</p><p><img src="/assets/img/2020/Snipaste_2020-07-12_18-25-54.png" alt="烧录镜像"></p><p>拖入待烧录的文件，选择 U 盘设备，然后点击 Flash 即可。</p><p>等进度条走完了，弹出 U 盘，拔掉就可以了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单说一下怎么给软路由装系统&lt;/p&gt;</summary>
    
    
    
    
    <category term="软路由" scheme="https://blog.xxwhite.com/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>软路由开启WiFi的正确姿势</title>
    <link href="https://blog.xxwhite.com/2020/router-ap-wifi.html"/>
    <id>https://blog.xxwhite.com/2020/router-ap-wifi.html</id>
    <published>2020-07-12T17:05:30.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>前面做了一款软路由，写一篇关于软路由应该怎么搭配路由器开启 WiFi 的教程。</p><span id="more"></span><p>说明条件：</p><ul><li>软路由管理 IP：192.168.1.1</li><li>路由器管理 IP：192.168.5.1</li><li>可能某些路由器有专门的 AP 模式，此时就不需要按照下面这么麻烦的设置了。</li></ul><h2 id="设置路由器">设置路由器<a class="header-anchor" href="#设置路由器">➴</a></h2><p>我以 Openwrt 系统为例，介绍怎么设置</p><p>首先设置路由器，打开管理后台，找到 <code>网络-接口</code> 先关闭 WAN 口，对，我们不需要使用 WAN 口。</p><p>然后修改 LAN 口设置。</p><ul><li>协议：静态地址</li><li>IPV4 网络：192.168.1.x，建议设置小于 100</li><li>子网掩码：255.225.255.0</li><li>IPV4 网关：192.168.1.1 （软路由的地址）</li></ul><p><img src="/assets/img/2020/Snipaste_2020-07-12_16-55-06.png" alt=""></p><p>然后在这个接口上关闭 DHCP。</p><p><img src="/assets/img/2020/Snipaste_2020-07-12_16-55-17.png" alt=""></p><p>设置完成后保存并应用，此时会连不上路由器，不要着急，接着往下看。</p><h2 id="连接软路由">连接软路由<a class="header-anchor" href="#连接软路由">➴</a></h2><p>将路由器的一个 LAN 口连接到软路由的 LAN 口，我没有写错，是连 LAN 口，不是 WAN 口，路由器是充当交换机使用的。</p><p>刚接上可能无法上网，需要等一会，有的需要拔插网线，有的甚至需要自己手动设置一下电脑 IP，反正就是不能连接不要着急，等一下，或者重启电脑。</p><p>等半分钟或者一分钟，如果正常的话，此时输入 192.168.1.1 就可以访问到软路由，输入 192.168.1.100（你自己设置的 ip）就可以管理路由器。</p><p>进入路由器的后台，设置无线网络。</p><p>将模式改为 <code>接入点AP(WDS)</code>，然后应用并保存即可。</p><p><img src="/assets/img/2020/Snipaste_2020-07-12_17-02-48.png" alt=""></p><h2 id="测试">测试<a class="header-anchor" href="#测试">➴</a></h2><p>无论是用有线连接路由器，还是用无线连接，在客户端查到的 IP 都应该是 192.168.1.xx，并且在软路由上可以看到 DHCP 分配情况。</p><p>其他路由器类似，大致步骤就是：<code>LAN口改为静态IP</code> -&gt; <code>关掉DHCP</code> -&gt; <code>网线插到LAN口</code> -&gt; <code>修改无线为WDS(桥接)模式</code>。</p><p>LAN口改为静态IP的目的是，方便以后进路由器的后台。</p><p>有些路由器设置内容比较简单，步骤就是：<code>关DHCP</code> -&gt; <code>网线插LAN口</code>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面做了一款软路由，写一篇关于软路由应该怎么搭配路由器开启 WiFi 的教程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="软路由" scheme="https://blog.xxwhite.com/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Arduino 初见</title>
    <link href="https://blog.xxwhite.com/2020/arduino-first-sight.html"/>
    <id>https://blog.xxwhite.com/2020/arduino-first-sight.html</id>
    <published>2020-07-09T12:05:30.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间在做一个硬件上的项目，用到了 Arduino，学了一些知识，也踩了一些坑，简单总结分享一下。</p><span id="more"></span><h2 id="选购">选购<a class="header-anchor" href="#选购">➴</a></h2><p>Arduino 有不少的板子，国产的克隆板用起来也不错，没有必要死扣进口的，当然你如果想要支持 Arduino 的发展，可以购买那种带有 Arduino 授权标志的板子。</p><p>Arduino 常用的几种板子有 <code>Uno</code> <code>Mega</code> <code>Nano</code> <code>Pro micro</code> <code>Leonardo</code>，简单说一下区别和怎么选，不要像我一样，第一次买错了，还要多花一份冤枉钱。</p><h3 id="Uno">Uno<a class="header-anchor" href="#Uno">➴</a></h3><p>首先是 Uno，这款开发板可以说是性价比最高的一款产品，也可以说是最适合初学者学习使用的开发板。就是你不明确自己想要做什么，只是单纯的想要学习，买这块就够了。</p><h3 id="Mega">Mega<a class="header-anchor" href="#Mega">➴</a></h3><p>开发板与 Arduino Uno 类似，但尺寸要比 Uno 开发板更大，引脚更多，当你明确自己需要用很多的传感器，Uno 不能满足的需求的时候，可以选择这款。</p><h3 id="Nano">Nano<a class="header-anchor" href="#Nano">➴</a></h3><p>和 Uno 类似，但尺寸更小，引脚也稍多当你的项目对板子尺寸有要求的时候，可以选择这款，而且这款貌似也是最便宜的。</p><h3 id="Leonardo">Leonardo<a class="header-anchor" href="#Leonardo">➴</a></h3><p>功能上比 Uno 类似，但是支持 HID，可以模拟 USB 设备，如果需要模拟键盘鼠标，或者制作 HID 设备（比如赛车模拟器等）的话，Leonardo 是首选。</p><h3 id="Pro-micro">Pro micro<a class="header-anchor" href="#Pro-micro">➴</a></h3><p>与 Leonardo 类似，支持 HID，可以模拟 USB 设备，但是尺寸更小。</p><h2 id="准备开发">准备开发<a class="header-anchor" href="#准备开发">➴</a></h2><p>这一步你买板子的卖家一般会告诉你怎么做，遇到不一样的，请按照卖家的做。</p><p>开发工具使用 Arduino，我直接使用 scoop 安装，</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">scoop </span><span class="keyword">install </span>arduino</span><br></pre></td></tr></table></figure><p>我用到的板子是 Nano 板，直接 USB 插到电脑上，不需要自己手动安装驱动，Win10 会自动安装，如果不能自动安装，可以找你购买的地方要驱动，或者搜索 <code>CH340 驱动</code>。</p><p>打开设备管理器，在 <code>端口</code> 选项下面找一下</p><p><img src="/assets/img/2020/Snipaste_2020-07-09_11-48-09.png" alt=""></p><p>前面看到的端口 COM3，记住端口号，后面要用。</p><p>打开 Arduino IDE，文件-示例-Basics-Blink。</p><p><img src="/assets/img/2020/Snipaste_2020-07-09_11-58-20.png" alt=""></p><p>这是最简单的一个项目，就是让 L 灯一直闪。</p><p>然后在工具一栏选择对应的开发板和处理器</p><p><img src="/assets/img/2020/Snipaste_2020-07-09_14-03-23.png" alt=""></p><p>然后点击编译和上传</p><p><img src="/assets/img/2020/Snipaste_2020-07-09_14-05-42.png" alt=""></p><p>然后就可以看到 L 灯一闪一闪的了。</p><h2 id="ADC-程序">ADC 程序<a class="header-anchor" href="#ADC-程序">➴</a></h2><p>到了一个正式项目的时候了，我有一个需求是，采集传感器电压。</p><p>先上图</p><p><img src="/assets/img/2020/Pinout-NANO_latest.png" alt=""></p><p>在上图可以看到，有 6 个可用的 ADC 引脚，我们使用 A0。</p><p>用下图所示的接法接好传感器，其中，然后写程序</p><p><img src="/assets/img/2020/Snipaste_2020-07-09_16-55-48.png" alt=""></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">begin</span>(<span class="number">19200</span>);</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">&quot;ADC程序&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="built_in">analogRead</span>(A0);             <span class="comment">//读取A0口的输入</span></span><br><span class="line">  <span class="keyword">double</span> vol = n * (<span class="number">5</span> / <span class="number">1024.0</span>);      <span class="comment">//转换为实际电压</span></span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">print</span>(<span class="string">&quot;A0接口当前电压为&quot;</span>);</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(vol);                <span class="comment">//打印电压数值</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">500</span>);                         <span class="comment">//等待0.5s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看，程序是不是超简单，Nano 板具有 10 位 ADC 转换功能，10 位的意思就是最多可以有 2<sup>10</sup> 个分级，参考电压为 5V，所以转换为实际电压的时候就要用到上面的公式。</p><p>编译上传，然后就可以在串口监视器里看到输出了。</p><p><img src="/assets/img/2020/Snipaste_2020-07-09_17-01-48.png" alt=""></p><p>最后再说一下使用习惯，不用面包板的时候，我喜欢把这个东西插到另一块板子上，然后从另一块板子上焊排针用。</p><p><img src="/assets/img/2020/20200709-1721.jpg" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前段时间在做一个硬件上的项目，用到了 Arduino，学了一些知识，也踩了一些坑，简单总结分享一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="硬件" scheme="https://blog.xxwhite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>博客开始支持LaTeX啦</title>
    <link href="https://blog.xxwhite.com/2020/tm.html"/>
    <id>https://blog.xxwhite.com/2020/tm.html</id>
    <published>2020-06-21T14:58:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>我的博客恢复 <svg xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" viewBox="0 -716.3 2781.3 931.8" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-122-TEX-I-1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path><path id="MJX-122-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-122-TEX-I-1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path><path id="MJX-122-TEX-I-1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path><path id="MJX-122-TEX-I-1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D43F"></use></g><g data-mml-node="mspace" transform="translate(681, 0)"></g><g data-mml-node="mpadded" transform="translate(356, 0)"><g transform="translate(0, 210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D434"></use></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3, 0)"></g><g data-mml-node="mi" transform="translate(716.3, 0)"><use xlink:href="#MJX-122-TEX-I-1D447"></use></g><g data-mml-node="mspace" transform="translate(1420.3, 0)"></g><g data-mml-node="mpadded" transform="translate(1280.3, 0)"><g transform="translate(0, -215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D438"></use></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3, 0)"></g><g data-mml-node="mi" transform="translate(1929.3, 0)"><use xlink:href="#MJX-122-TEX-I-1D44B"></use></g></g></g></svg> 支持啦！！！</p><span id="more"></span><p>思考了一下，修补一下主题，把这个抛弃了许久的功能捡起来重新维护一下。</p><p>示例如下：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span> <span class="keyword">\LaTeX</span> <span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span> <span class="keyword">\frac</span>&#123;a&#125;&#123;b&#125;<span class="keyword">\pm</span> <span class="keyword">\frac</span>&#123;c&#125;&#123;d&#125;= <span class="keyword">\frac</span>&#123;ad <span class="keyword">\pm</span> bc&#125;&#123;bd&#125; <span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span> <span class="keyword">\ce</span>&#123;SO4<span class="built_in">^</span>2- + Ba<span class="built_in">^</span>2+ -&gt; BaSO4 v&#125; <span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span> <span class="keyword">\sin</span> <span class="keyword">\alpha</span> + <span class="keyword">\sin</span> <span class="keyword">\beta</span> =2 <span class="keyword">\sin</span> <span class="keyword">\frac</span>&#123;<span class="keyword">\alpha</span> + <span class="keyword">\beta</span>&#125;&#123;2&#125;<span class="keyword">\cos</span> <span class="keyword">\frac</span>&#123;<span class="keyword">\alpha</span> - <span class="keyword">\beta</span>&#125;&#123;2&#125; <span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span> <span class="keyword">\ce</span>&#123;Zn<span class="built_in">^</span>2+  &lt;=&gt;[+ 2OH-][+ 2H+]  <span class="built_in">$</span><span class="keyword">\underset</span>&#123;<span class="keyword">\text</span>&#123;amphoteres Hydroxid&#125;&#125;&#123;<span class="keyword">\ce</span>&#123;Zn(OH)2 v&#125;&#125;<span class="built_in">$</span>  &lt;=&gt;[+ 2OH-][+ 2H+]  <span class="built_in">$</span><span class="keyword">\underset</span>&#123;<span class="keyword">\text</span>&#123;Hydroxozikat&#125;&#125;&#123;<span class="keyword">\ce</span>&#123;[Zn(OH)4]<span class="built_in">^</span>2-&#125;&#125;<span class="built_in">$</span>&#125; <span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>$$ \LaTeX $$</p><p>$$ \frac{a}{b}\pm \frac{c}{d}= \frac{ad \pm bc}{bd}  $$</p><p>$$ \sin \alpha + \sin \beta =2 \sin \frac{\alpha + \beta}{2}\cos \frac{\alpha - \beta}{2} $$</p><p>$$ \ce{SO4^2- + Ba^2+ -&gt; BaSO4 v} $$</p><p>$$ \ce{Zn^2+  &lt;=&gt;[+ 2OH-][+ 2H+]  $\underset{\text{amphoteres Hydroxid}}{\ce{Zn(OH)2 v}}$  &lt;=&gt;[+ 2OH-][+ 2H+]  $\underset{\text{Hydroxozikat}}{\ce{[Zn(OH)4]^2-}}$} $$</p><p>如果你也在使用我维护的Yilia主题，只需要在需要使用 <svg xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" viewBox="0 -716.3 2781.3 931.8" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-122-TEX-I-1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path><path id="MJX-122-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-122-TEX-I-1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path><path id="MJX-122-TEX-I-1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path><path id="MJX-122-TEX-I-1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D43F"></use></g><g data-mml-node="mspace" transform="translate(681, 0)"></g><g data-mml-node="mpadded" transform="translate(356, 0)"><g transform="translate(0, 210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D434"></use></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3, 0)"></g><g data-mml-node="mi" transform="translate(716.3, 0)"><use xlink:href="#MJX-122-TEX-I-1D447"></use></g><g data-mml-node="mspace" transform="translate(1420.3, 0)"></g><g data-mml-node="mpadded" transform="translate(1280.3, 0)"><g transform="translate(0, -215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D438"></use></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3, 0)"></g><g data-mml-node="mi" transform="translate(1929.3, 0)"><use xlink:href="#MJX-122-TEX-I-1D44B"></use></g></g></g></svg> 的文章头部，添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>即可。</p><p>评论区暂时还未开启公式支持，想要在评论区讨论的，可用使用 <a href="https://www.latexlive.com/">https://www.latexlive.com/</a> 生成图片，然后粘贴到评论区。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的博客恢复 &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;6.293ex&quot; height=&quot;2.108ex&quot; viewBox=&quot;0 -716.3 2781.3 931.8&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; aria-hidden=&quot;true&quot; style=&quot;&quot;&gt;&lt;defs&gt;&lt;path id=&quot;MJX-122-TEX-I-1D43F&quot; d=&quot;M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;MJX-122-TEX-I-1D434&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;MJX-122-TEX-I-1D447&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;MJX-122-TEX-I-1D438&quot; d=&quot;M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;MJX-122-TEX-I-1D44B&quot; d=&quot;M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z&quot;&gt;&lt;/path&gt;&lt;/defs&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;use xlink:href=&quot;#MJX-122-TEX-I-1D43F&quot;&gt;&lt;/use&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mspace&quot; transform=&quot;translate(681, 0)&quot;&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mpadded&quot; transform=&quot;translate(356, 0)&quot;&gt;&lt;g transform=&quot;translate(0, 210)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot; transform=&quot;scale(0.707)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;use xlink:href=&quot;#MJX-122-TEX-I-1D434&quot;&gt;&lt;/use&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mspace&quot; transform=&quot;translate(886.3, 0)&quot;&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(716.3, 0)&quot;&gt;&lt;use xlink:href=&quot;#MJX-122-TEX-I-1D447&quot;&gt;&lt;/use&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mspace&quot; transform=&quot;translate(1420.3, 0)&quot;&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mpadded&quot; transform=&quot;translate(1280.3, 0)&quot;&gt;&lt;g transform=&quot;translate(0, -215.5)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;use xlink:href=&quot;#MJX-122-TEX-I-1D438&quot;&gt;&lt;/use&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mspace&quot; transform=&quot;translate(2044.3, 0)&quot;&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1929.3, 0)&quot;&gt;&lt;use xlink:href=&quot;#MJX-122-TEX-I-1D44B&quot;&gt;&lt;/use&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt; 支持啦！！！&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站笔记" scheme="https://blog.xxwhite.com/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Voicemeeter 界面介绍</title>
    <link href="https://blog.xxwhite.com/2020/voicemeeter.html"/>
    <id>https://blog.xxwhite.com/2020/voicemeeter.html</id>
    <published>2020-06-09T12:58:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>最近在帮忙做直播，用到了 Voicemeeter，就来简单的讲一下这个东西应该怎么用，顺便举例子说几个应用场景。</p><span id="more"></span><p>本文讲解用到的版本是 banana，版本号为 2.0.5.3，下载地址为 <a href="https://www.vb-audio.com/Voicemeeter/banana.htm">https://www.vb-audio.com/Voicemeeter/banana.htm</a>，官方文档 <a href="https://www.vb-audio.com/Voicemeeter/banana.htm#Documentation">https://www.vb-audio.com/Voicemeeter/banana.htm#Documentation</a>。</p><h2 id="界面">界面<a class="header-anchor" href="#界面">➴</a></h2><p>banana 版本拥有 3 个物理输入，2 个虚拟输入，3 个无论输出，2 个虚拟输出，共 5 个输入和 5 个输出。</p><p><img src="/assets/img/2020/Snipaste_2020-06-09_14-54-10.png" alt=""></p><p>输入输出口的对应关系分别为：</p><p><img src="/assets/img/2020/Snipaste_2020-06-09_14-43-34.png" alt=""></p><p>界面上主要就是这个东西，那个磁带标志是一个录音机，剩下的 EQ 之类的，作为进阶技巧，想要学习的话可以自己去看官方的文档。关于压缩门和噪声门，可以自行查找调音相关知识。</p><h2 id="使用示例">使用示例<a class="header-anchor" href="#使用示例">➴</a></h2><h3 id="解决炸麦">解决炸麦<a class="header-anchor" href="#解决炸麦">➴</a></h3><p>输入硬件(1)选择你的麦克风，输出硬件(A1)选择你的耳机，这个时候你说话是可以在耳机里听到的。</p><p>先调高噪音门，调到你不说话的时候完全静音，正常说话的时候可以正常收音。然后适当调高压缩器，不能解决炸麦的话再适当降低增益。</p><p>解决之后在输入那里取消 A1 的勾选，只留下 B1，将 VoiceMeeter Output 设为默认设备，或者在需要使用的软件里选择 VoiceMeeter Output 作为麦克风。</p><h3 id="声音分流">声音分流<a class="header-anchor" href="#声音分流">➴</a></h3><p>将声音分给多个设备输出，多机直播的时候会用得到。</p><p>将电脑的声音默认输出设备选择为 VoiceMeeter Input，也就是一个虚拟输入，然后将这一路输入同时分配给 A1 和 A2，这样就可以同时在 A1 和 A2 输出同样的声音了。</p><h3 id="虚拟音频通道">虚拟音频通道<a class="header-anchor" href="#虚拟音频通道">➴</a></h3><p>有的时候需要单独捕获某个程序的声音，这个时候可以将其单独输出到电脑某个硬件上，然后去捕获这个有硬件的声音，但是有的电脑只有一个声卡，也就是只有一个输出设备，我们就可以用 VoiceMeeter 组建一个虚拟通道了。</p><p>软件中声音输出选择 VoiceMeeter Aux Input（不被占用的那个），被选择的虚拟输入那里直接输出到 B2，然后在采集软件那里监听 VoiceMeeter Aux Output。</p><h3 id="混音">混音<a class="header-anchor" href="#混音">➴</a></h3><p>很简单，就是把需要的输入输出到同一个输出里面，然后调节相关参数就可以了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在帮忙做直播，用到了 Voicemeeter，就来简单的讲一下这个东西应该怎么用，顺便举例子说几个应用场景。&lt;/p&gt;</summary>
    
    
    
    
    <category term="涨姿势" scheme="https://blog.xxwhite.com/tags/%E6%B6%A8%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客自动化部署</title>
    <link href="https://blog.xxwhite.com/2020/blog-ci.html"/>
    <id>https://blog.xxwhite.com/2020/blog-ci.html</id>
    <published>2020-05-16T14:58:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>使用 ci 自动化构建博客，只需要写文章就可以了。</p><span id="more"></span><p>丝毫没有技术含量的文章，只是简单介绍一下我的博客是怎么使用自动化构建的。</p><p>这篇文章中会提到，Hexo 优雅的方式更新主题，Hexo 使用 ci 自动化构建，Hexo 部署到 GitHub Page，Hexo 部署到又拍云（u-file 方法相同）。</p><p>一张简图，简单介绍一下我博客现在的情况。</p><p><img src="/assets/img/2020/sketch1589621851548.png" alt="博客情况"></p><p>写完文章，往 GitHub 上一推，剩下的就全是自动化的了。</p><p>下面简单介绍一下细节</p><h2 id="主题子模块化">主题子模块化<a class="header-anchor" href="#主题子模块化">➴</a></h2><p>使用子模块更新 Hexo 主题，应该算是一种优雅的主题更新方式了，而且我的主题目前是我自己维护的，使用子模块就更方便了。</p><p>在 theme 目录下执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https:<span class="regexp">//gi</span>thub.com<span class="regexp">/MonoLogueChi/</span>hexo-theme-yilia</span><br></pre></td></tr></table></figure><p>怎么更新子模块，可以自行百度。</p><p>主题变成子模块之后，更新是方便了，但是配置文件怎么搞定呢？支持 data 的主题目前来说不多，一种更普遍的方式是把配置文件写在 Hexo 的 <code>_config.yml</code> 文件里。</p><p>具体方式是，添加一项 <code>theme_config:</code> 这里面的配置会覆盖主题的，注意，只会覆盖主题相同项的，所以这里面要完整复制主题的配置文件，然后修改成自己的。</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&quot;叉叉白&quot;</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&quot;叉叉白，听我跟你瞎白话&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;一个小白搞机的记事本&quot;</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">叉叉白</span></span><br><span class="line"><span class="comment">## ...</span></span><br><span class="line"><span class="comment">## 主题</span></span><br><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="comment"># Header</span></span><br><span class="line">  <span class="attr">menu:</span></span><br><span class="line">    <span class="string">主页:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="string">搞机:</span> <span class="string">&quot;/tags/搞机/&quot;</span></span><br><span class="line">    <span class="string">笔记:</span> <span class="string">&quot;/tags/建站笔记/&quot;</span></span><br><span class="line">    <span class="string">时光:</span> <span class="string">&quot;/tags/timeline/&quot;</span></span><br><span class="line">    <span class="string">留言:</span> <span class="string">&quot;/MessageBoard/&quot;</span></span><br><span class="line">    <span class="string">关于:</span> <span class="string">&quot;/aboutme/&quot;</span></span><br><span class="line">  <span class="comment">## ...</span></span><br></pre></td></tr></table></figure><h2 id="使用-Azure-Pipelines">使用 Azure Pipelines<a class="header-anchor" href="#使用-Azure-Pipelines">➴</a></h2><p>可以免费使用的 ci 有好多，我以自己常用的 Azure Pipelines 为例简单说明一下，其他 ci 可以参考相关文档。</p><p>Azure Pipelines 网址是 <a href="https://dev.azure.com/">https://dev.azure.com/</a> ，以下全部参考 <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started/pipelines-sign-up?view=azure-devops">Azure Pipelines 文档</a> ，如果有不理解的，请直接阅读文档。</p><p>可以使用 GitHub 登录，然后创建一个 project，在左侧点击 Pipelines，然后点击 new Pipeline，选择 GitHub，选择自己的博客仓库，然后会跳转到 GitHub 让你去授权，这里什么都不需要改，直接翻到最下面去点 <code>Approve and install</code>，然后就会再次跳转回 Azure Pipelines，耐心等待就可以，再后面模板随便选一个就可以，选什么无所谓。</p><p>然后修改模板，可以直接复制我的，其中部署部分会在下面一节讲解，配置我放在文章最后了。</p><h2 id="自动化部署到又拍云">自动化部署到又拍云<a class="header-anchor" href="#自动化部署到又拍云">➴</a></h2><p>自动化部署到又拍云和 u-file 配置是一模一样的，又拍云创建储存空间和绑定域名部分就不讲了，直接说部署。</p><p>在 <code>存储管理</code> 的最后面找到 <code>操作员授权</code> 新建一个操作员</p><p><img src="/assets/img/2020/Snipaste_2020-05-16_18-18-47.png" alt="操作员授权"></p><p><img src="/assets/img/2020/Snipaste_2020-05-16_18-17-50.png" alt="操作员授权"></p><p>记下创建的操作员名称和密码，等下要用。下面这个表格是 u-file 和又拍云的联系，只需要替换相应的变量，就可以把文件部署到 u-file 上</p><table><thead><tr><th>又拍云</th><th>u-file</th></tr></thead><tbody><tr><td>服务名称</td><td>存储器名称</td></tr><tr><td>操作员</td><td>用户名</td></tr><tr><td>密码</td><td>密码</td></tr></tbody></table><p>回到 Azure Pipelines，在左侧的 <code>Library</code> 选项卡中，新建一个变量组（variable group）。</p><p>看下图，记住要填写哪些变量，记得添加完把后面的锁给勾上，表示加密变量。</p><p><img src="/assets/img/2020/Snipaste_2020-05-16_18-32-22.png" alt="又拍云变量组"></p><p>使用变量组只需要在配置文件中写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">upyun</span></span><br></pre></td></tr></table></figure><p>使用其中的变量，可以使用</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(BUCKET)</span><br></pre></td></tr></table></figure><p>部署到又拍云（u-file）需要使用 <a href="https://github.com/upyun/upx">upx</a> 工具，具体怎么用，可以看本文最后的配置文件示例。</p><h2 id="部署到-Github-Page">部署到 Github Page<a class="header-anchor" href="#部署到-Github-Page">➴</a></h2><p>部署到 gh-page 需要使用 token，在 github，点击右上角的头像，选择 setting 选项，找到 Developer settings， 在 Personal access tokens 里生成一个新 token，一般来说勾上 <code>repo</code>里面的权限就足够了。</p><p>记住这个 token，只会出现一次，后面要用。</p><p>回到 Azure Pipelines，在左侧的 <code>Library</code> 选项卡中，新建一个变量组（variable group）。</p><p>看下图，记住要填写哪些变量，记得添加完把后面的锁给勾上，表示加密变量。</p><p><img src="/assets/img/2020/Snipaste_2020-05-16_18-46-46.png" alt="GitHub变量组"></p><p>使用变量组只需要在配置文件中写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">github</span></span><br></pre></td></tr></table></figure><p>详细的配置文件写在了文章最后。</p><p>记得在博客的 <code>source</code> 目录下创建一个 <code>CNAME</code> 文件，写上你的域名，测试 ci 没有问题只会，在仓库的设置里面开启 github page 功能，选择分支 <code>gh-page</code>。</p><h2 id="azure-pipelines-yml">azure-pipelines.yml<a class="header-anchor" href="#azure-pipelines-yml">➴</a></h2><figure class="highlight yaml"><figcaption><span>azure-pipelines.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&quot;ubuntu-latest&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">github</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">upyun</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">checkout:</span> <span class="string">self</span></span><br><span class="line">    <span class="attr">fetchDepth:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">UseNode@1</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Npm@1</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&quot;custom&quot;</span></span><br><span class="line">      <span class="attr">customCommand:</span> <span class="string">&quot;install hexo-cli -g&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Npm@1</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&quot;custom&quot;</span></span><br><span class="line">      <span class="attr">customCommand:</span> <span class="string">&quot;install --pure-lockfile&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">CmdLine@2</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#又拍云同步</span></span><br><span class="line">        <span class="string">wget</span> <span class="string">-O</span> <span class="string">upx</span> <span class="string">http://collection.b0.upaiyun.com/softwares/upx/upx-linux-amd64-v0.2.6</span></span><br><span class="line">        <span class="string">chmod</span> <span class="string">+x</span> <span class="string">upx</span></span><br><span class="line">        <span class="string">./upx</span> <span class="string">login</span> <span class="string">$(BUCKET)</span> <span class="string">$(OPERATOR)</span> <span class="string">$(OPERATOR_PASSWORD)</span></span><br><span class="line">        <span class="string">./upx</span> <span class="string">sync</span> <span class="string">public/</span> <span class="string">/</span> <span class="string">--delete</span></span><br><span class="line">        <span class="string">./upx</span> <span class="string">logout</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#部署到GitHub Page</span></span><br><span class="line">        <span class="string">cd</span> <span class="string">public</span></span><br><span class="line">        <span class="string">touch</span> <span class="string">.nojekyll</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;$(EMAIL)&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;$(USER)&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">init</span></span><br><span class="line">        <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">        <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">update</span></span><br><span class="line">        <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">https://$(TOKEN)@github.com/MonoLogueChi/blog.xxwhite.com.git</span> <span class="string">master:gh-pages</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 ci 自动化构建博客，只需要写文章就可以了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站笔记" scheme="https://blog.xxwhite.com/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>BiliBili的bvid查询cid</title>
    <link href="https://blog.xxwhite.com/2020/bilibili-bvid.html"/>
    <id>https://blog.xxwhite.com/2020/bilibili-bvid.html</id>
    <published>2020-03-23T21:58:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始，BiliBili 视频使用 bv 号代替以前的 av 号，知乎上已经有大佬给出了 bvid 转换成 aid 的算法。</p><span id="more"></span><h2 id="解释">解释<a class="header-anchor" href="#解释">➴</a></h2><p>昨天发现这个问题以后，看了一下 api，使用 bvid 是可以直接查询到 cid 的，这样对我的弹幕服务器影响甚小，对其他的视频下载器或者是什么解析服务影响应该也不大。</p><p>简单解释原理，B 站以前有两个比较重要的表示，分别是 aid 和 cid，现在使用 bvid 代替 aid，作用是一样的。不管是解析弹幕还是解析视频，最终都是使用 cid 查询的，大概可以这么理解，aid 或者是 bvid 对应的是投稿，cid 对应的是视频。</p><p><img src="/assets/img/2020/Snipaste_2020-03-24_09-46-00.png" alt=""></p><p>以前通过 aid 查询 cid 的 api 主要有两个，分别是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.bilibili.com<span class="regexp">/widget/g</span>etPageList?aid=&#123;aid&#125;</span><br><span class="line">https:<span class="regexp">//</span>api.bilibili.com<span class="regexp">/x/</span>player/pagelist?aid=&#123;aid&#125;</span><br></pre></td></tr></table></figure><p>第一个 api 不能使用 bvid 查询，第二个 api 可以，只需要使用参数 <code>bvid=&#123;bvid&#125;</code> 即可，比如 <code>https://api.bilibili.com/x/player/pagelist?bvid=BV18b411j72u</code>。</p><h2 id="修改">修改<a class="header-anchor" href="#修改">➴</a></h2><p>看过我上一篇文章的知道，我以前使用的是第一个接口，这次需要修改为使用第二个 api，难度不大，只是返回结果数据结构变了，而且压缩算法不再是 gzip 了。</p><p>总体来说，改动不大，只需要简单的 api，再加上一个参数就可以了。</p><p>具体详情可以看我的 <a href="https://github.com/MonoLogueChi/Danmu.Server">GitHub 项目</a></p><p>具体代码为 <a href="https://github.com/MonoLogueChi/Danmu.Server/commit/9abca85302d91f0ff72a80abd5232256f78c2e2f">aaf7e3b </a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天开始，BiliBili 视频使用 bv 号代替以前的 av 号，知乎上已经有大佬给出了 bvid 转换成 aid 的算法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C#" scheme="https://blog.xxwhite.com/tags/C/"/>
    
    <category term="dotnet" scheme="https://blog.xxwhite.com/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>BiliBili弹幕解析</title>
    <link href="https://blog.xxwhite.com/2020/bilibili-danmaku.html"/>
    <id>https://blog.xxwhite.com/2020/bilibili-danmaku.html</id>
    <published>2020-02-23T14:58:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>简单说一下我开发的<a href="https://github.com/MonoLogueChi/Dplayer.Danmaku">弹幕后端</a>的 BiliBili 弹幕解析过程，总结一下以前犯得新手错误，我的程序不是能用就行，我在能用的情况下还要有效率。</p><span id="more"></span><blockquote><p>超长文章预警，附带解题思路</p></blockquote><h2 id="B-站弹幕接口">B 站弹幕接口<a class="header-anchor" href="#B-站弹幕接口">➴</a></h2><p>目前我用的 B 站弹幕接口有：</p><ul><li><code>https://api.bilibili.com/x/v1/dm/list.so?oid=&#123;cid&#125;</code></li><li><code>https://api.bilibili.com/x/v2/dm/history?type=1&amp;oid=&#123;cid&#125;&amp;date=&#123;date&#125;</code></li></ul><p>第一个用于查询弹幕，第二个是查询历史弹幕。</p><p>关于历史弹幕这里要说一点，有些视频弹幕过多，默认只会显示最近的一部分弹幕，过多的都会在历史弹幕里面，但是历史弹幕的接口需要登录，后面会说登录的事。</p><p>查询弹幕的 cid 以前可以在分享里看的，现在好像是给隐藏掉了，不过幸好还有查询 cid 的接口</p><ul><li><code>https://www.bilibili.com/widget/getPageList?aid=&#123;aid&#125;</code></li></ul><p>上面的这个接口可以使用 av 号查询 cid。</p><p>前面三个接口先在浏览器里看一下，如果我不说下面这几个坑，没有爬虫经验的 C# 程序猿没准都不知道怎么解决</p><p><a href="https://api.bilibili.com/x/v1/dm/list.so?oid=1176840">https://api.bilibili.com/x/v1/dm/list.so?oid=1176840</a></p><p><img src="/assets/img/2020/Snipaste_2020-02-23_15-25-59.png" alt=""></p><p>注意一下，压缩算法是 <code>deflate</code>，编码 <code>UTF-8</code>，这里我踩过坑，压缩算法先看好了。</p><p><a href="https://www.bilibili.com/widget/getPageList?aid=810872">https://www.bilibili.com/widget/getPageList?aid=810872</a></p><p><img src="/assets/img/2020/Snipaste_2020-02-23_15-28-04.png" alt=""></p><p>注意，压缩算法是 <code>gzip</code>，编码 <code>UTF-8</code>。</p><h2 id="Http-请求">Http 请求<a class="header-anchor" href="#Http-请求">➴</a></h2><h3 id="基础">基础<a class="header-anchor" href="#基础">➴</a></h3><p>先使用最简单的方法获取数据，跑通了再优化。</p><p>可以参考这篇<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tutorials/console-webapiclient">文档</a></p><p>使用 .net core 版本为 3.1。</p><figure class="highlight cs"><figcaption><span>BiliBiliDanmakuController.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BiliBili.Danmaku.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">&quot;api/danmaku&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BiliBiliDanmakuController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">&quot;v1&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetV1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">            <span class="keyword">var</span> a = client.GetStringAsync(<span class="string">&quot;https://api.bilibili.com/x/v1/dm/list.so?oid=1176840&quot;</span>).Result;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面写的代码是中规中矩，看上去可以，但是一运行就会出问题。</p><p><img src="/assets/img/2020/Snipaste_2020-02-23_16-09-27.png" alt=""></p><p>解析出来的全都是乱码，为什么会这样呢？还记得上面说的压缩算法吗？</p><p>这个时候就有几种不同的解决思路了，我先说一下我最开始的解决思路，先用 <code>GetStreamAsync()</code> 直接获取数据流，然后再写一个解压方法，使用 <code>deflate</code> 算法解压数据流。</p><figure class="highlight cs"><figcaption><span>BiliBiliDanmakuController.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.IO.Compression;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BiliBili.Danmaku.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">&quot;api/danmaku&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BiliBiliDanmakuController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">&quot;v1&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetV1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">            <span class="keyword">var</span> a = client.GetStreamAsync(<span class="string">&quot;https://api.bilibili.com/x/v1/dm/list.so?oid=1176840&quot;</span>).Result;</span><br><span class="line">            <span class="keyword">return</span> DeDeflate(a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">DeDeflate</span>(<span class="params">Stream s</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> gZipStream = <span class="keyword">new</span> DeflateStream(s, CompressionMode.Decompress);</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(gZipStream);</span><br><span class="line">            <span class="keyword">return</span> reader.ReadToEndAsync().Result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我最开始用的是 <code>WebClient</code>，和 <code>HttpClient</code> 差不多，思路是一样。</p><p>上面的代码只能说能用，下面说一下另一种方法，也是我现在采用的方法。</p><p>从<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.http.httpclienthandler?view=netcore-3.1">相关文档</a>了解到，可以使用下面的方法</p><figure class="highlight cs"><figcaption><span>BiliBiliDanmakuController.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BiliBili.Danmaku.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">&quot;api/danmaku&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BiliBiliDanmakuController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">&quot;v1&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetV1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> handler = <span class="keyword">new</span> HttpClientHandler &#123;AutomaticDecompression = DecompressionMethods.Deflate&#125;;</span><br><span class="line">            <span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient(handler);</span><br><span class="line">            <span class="keyword">var</span> a = client.GetStringAsync(<span class="string">&quot;https://api.bilibili.com/x/v1/dm/list.so?oid=1176840&quot;</span>).Result;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cid 的查询接口使用的压缩算法是 gzip，处理方式类似，就不再赘述了。</p><h3 id="优化">优化<a class="header-anchor" href="#优化">➴</a></h3><p>前面只是能跑通了，但是并没有涉及到优化的问题。</p><p>首先是关于 <code>HttpClientHandler</code> 的问题，从<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.http.socketshttphandler?view=netcore-3.1">相关文档</a>了解到，.net core 2.1 以后，使用 <code>SocketsHttpHandler</code> 代替处理。</p><p>接下来还有<a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests">其他问题</a>。</p><blockquote><p>常见的原始 HttpClient 类非常易于使用，但在某些情况下，许多开发人员却并未正确使用该类。第一个问题，当此类可释放时，将其用于 using 语句并不是最佳选择，因为即使释放 HttpClient 对象，基础套接字也不会立即释放，并可能导致严重问题：“套接字耗尽”。 有关此问题的详细信息，请参阅你正在以错误方式使用 HttpClient，这将导致软件受损博客文章。因此，HttpClient 应进行一次实例化并在应用程序的生命周期中重复使用。 在负载较重的情况下，实例化每个请求的 HttpClient 类将耗尽可用的套接字数。 该问题会导致 SocketException 错误。 要解决此问题，可能的方法是将 HttpClient 对象创建为单一对象或静态对象，请参阅关于 HttpClient 用法的 Microsoft 文章中的说明。但将 HttpClient 对象用作单一对象或静态对象时还有一个问题。 在这种情况下，单一实例或静态 HttpClient 不考虑 DNS 更改，请参阅 dotnet/corefx GitHub 存储库中的此问题中的说明。为解决上述问题并使 HttpClient 实例管理更轻松，.NET Core 2.1 引入了新的 HttpClientFactory，后者可与 Polly 集成来实现弹性 HTTP 调用。</p></blockquote><p>说实话，看微软的文档是真的难受，要不是有人找出来，完全不知道该怎么看。</p><p>可以优化成下面这样的程序</p><figure class="highlight cs"><figcaption><span>BiliBiliDanmakuController.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BiliBili.Danmaku.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">&quot;api/danmaku&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BiliBiliDanmakuController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> HttpClientHandler Handler =</span><br><span class="line">                <span class="keyword">new</span> HttpClientHandler &#123; AutomaticDecompression = DecompressionMethods.Deflate &#125;;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> HttpClient Client = <span class="keyword">new</span> HttpClient(Handler);</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">&quot;v1&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetV1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> a = Client.GetStringAsync(<span class="string">&quot;https://api.bilibili.com/x/v1/dm/list.so?oid=1176840&quot;</span>).Result;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再根据<a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/http-requests?view=aspnetcore-3.1">相关文档</a>，可以这样做，修改 <code>Startup.cs</code> 。</p><figure class="highlight cs"><figcaption><span>Startup.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddControllers();</span><br><span class="line">    services.AddHttpClient(<span class="string">&quot;deflate&quot;</span>).ConfigurePrimaryHttpMessageHandler(() =&gt;</span><br><span class="line">        <span class="keyword">new</span> SocketsHttpHandler &#123; AutomaticDecompression = DecompressionMethods.Deflate &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以写</p><figure class="highlight cs"><figcaption><span>BiliBiliDanmakuController.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BiliBili.Danmaku.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">&quot;api/danmaku&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BiliBiliDanmakuController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> HttpClient _client;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BiliBiliDanmakuController</span>(<span class="params">IHttpClientFactory httpClientFactory</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _client = httpClientFactory.CreateClient(<span class="string">&quot;deflate&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">&quot;v1&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetV1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> a = _client.GetStringAsync(<span class="string">&quot;https://api.bilibili.com/x/v1/dm/list.so?oid=1176840&quot;</span>).Result;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者是用以下的解决方式，<a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests">文档</a></p><figure class="highlight cs"><figcaption><span>HttpBilibili.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BiliBili.Danmaku.Utils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HttpBilibili</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> HttpClient _httpClient;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HttpBilibili</span>(<span class="params">HttpClient client</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _httpClient = client;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task&lt;Stream&gt; <span class="title">GetDanmakuByCid</span>(<span class="params"><span class="built_in">int</span> cid</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> _httpClient.GetStreamAsync(<span class="string">$&quot;https://api.bilibili.com/x/v1/dm/list.so?oid=<span class="subst">&#123;cid&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><figcaption><span>Startup.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddControllers();</span><br><span class="line">    services.AddHttpClient&lt;HttpBilibili&gt;().ConfigurePrimaryHttpMessageHandler(() =&gt;</span><br><span class="line">        <span class="keyword">new</span> SocketsHttpHandler &#123; AutomaticDecompression = DecompressionMethods.Deflate &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><figcaption><span>BiliBiliDanmakuController.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> BiliBili.Danmaku.Utils;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BiliBili.Danmaku.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">&quot;api/danmaku&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BiliBiliDanmakuController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> HttpBilibili _bilibili;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BiliBiliDanmakuController</span>(<span class="params">HttpBilibili bilibili</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _bilibili = bilibili;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">&quot;v1&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task&lt;Stream&gt; <span class="title">GetV1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> a = _bilibili.GetDanmakuByCid(<span class="number">1176840</span>);</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，Http 请求部分就算是完成了后面就是反序列化的问题了。</p><h2 id="反序列化">反序列化<a class="header-anchor" href="#反序列化">➴</a></h2><p>说实话，反序列化相比上面，就简单的多了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chatserver</span>&gt;</span>chat.bilibili.com<span class="tag">&lt;/<span class="name">chatserver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chatid</span>&gt;</span>1176840<span class="tag">&lt;/<span class="name">chatid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mission</span>&gt;</span>0<span class="tag">&lt;/<span class="name">mission</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maxlimit</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">maxlimit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">real_name</span>&gt;</span>0<span class="tag">&lt;/<span class="name">real_name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span>&gt;</span>e-r<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">d</span> <span class="attr">p</span>=<span class="string">&quot;44.12500,1,25,16777215,1416323487,0,af4aa003,682225690&quot;</span>&gt;</span></span><br><span class="line">        我炮还能再战500年！！！我炮还能再战500年！！！我炮还能再战500年！！！我炮还能再战500年</span><br><span class="line">    <span class="tag">&lt;/<span class="name">d</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">d</span> <span class="attr">p</span>=<span class="string">&quot;52.63100,5,18,15772458,1416575349,0,f9289c56,684620215&quot;</span>&gt;</span></span><br><span class="line">        我炮还能再战五百年★☆★☆吾等炮党愿万世轮回❤只为换取公主一世笑颜★☆★☆我炮还能再战五百</span><br><span class="line">    <span class="tag">&lt;/<span class="name">d</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">d</span> <span class="attr">p</span>=<span class="string">&quot;44.93300,5,25,16737792,1417309755,0,fb8ee8a9,693992629&quot;</span>&gt;</span></span><br><span class="line">        我炮再战500年！在弹幕里为姐姐大人加油！我炮再战500年！在弹幕里为姐姐大人加油！我炮再战500年！在弹幕里为姐姐大人加油！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">d</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面只是截取了一小段，我们需要的仅仅是 <code>d</code> 标签，复制上面的内容，利用 Visual Studio 的选择性粘贴功能，创建一个类</p><p><code>编辑</code> &gt; <code>选择性粘贴</code> &gt; <code>将XML粘贴为类</code></p><p>然后适当的修改，下面的这段代码可能和直接粘贴的差别有点大，但肯定是从那里直接修改过来的。</p><figure class="highlight cs"><figcaption><span>DanmakuXml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BiliBili.Danmaku.Model</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializableAttribute</span>]</span><br><span class="line">    [<span class="meta">DesignerCategory(<span class="meta-string">&quot;code&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">XmlType(AnonymousType = true)</span>]</span><br><span class="line">    [<span class="meta">XmlRoot(<span class="meta-string">&quot;i&quot;</span>, Namespace = <span class="meta-string">&quot;&quot;</span>, IsNullable = false)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DanmakuXml</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">XmlElement(<span class="meta-string">&quot;d&quot;</span>)</span>] <span class="keyword">public</span> iD[] D &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">SerializableAttribute</span>]</span><br><span class="line">    [<span class="meta">DesignerCategory(<span class="meta-string">&quot;code&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">XmlType(AnonymousType = true)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">iD</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">XmlAttribute(<span class="meta-string">&quot;p&quot;</span>)</span>] <span class="keyword">public</span> <span class="built_in">string</span> P &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">XmlText</span>] <span class="keyword">public</span> <span class="built_in">string</span> Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对前面的 xml 解析，提前已经知道映射关系了。</p><p><img src="/assets/img/2020/Snipaste_2020-02-23_18-32-51.png" alt=""></p><p>在前面的 Http 请求部分，我把最后一次的返回类型从 <code>string</code> 改成了 <code>Stream</code> ，前面的 <code>string</code> 类型只是在测试的时候方便 Debug，改成 Stream 类型是为了优化右面的反序列化。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;DanmakuXml&gt; <span class="title">DXml</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = _bilibili.GetDanmakuByCid(<span class="number">1176840</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DanmakuXml(<span class="keyword">await</span> a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><figcaption><span>DanmakuXml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BiliBili.Danmaku.Model</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializableAttribute</span>]</span><br><span class="line">    [<span class="meta">DesignerCategory(<span class="meta-string">&quot;code&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">XmlType(AnonymousType = true)</span>]</span><br><span class="line">    [<span class="meta">XmlRoot(<span class="meta-string">&quot;i&quot;</span>, Namespace = <span class="meta-string">&quot;&quot;</span>, IsNullable = false)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DanmakuXml</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DanmakuXml</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>     从Dplayer弹幕转换</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ds&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DanmakuXml</span>(<span class="params">List&lt;DanmakuData&gt; ds</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            D = ds.Select(d =&gt; <span class="keyword">new</span> iD</span><br><span class="line">            &#123;</span><br><span class="line">                P = <span class="string">$&quot;<span class="subst">&#123;d.Time&#125;</span>,<span class="subst">&#123;(d.Type == <span class="number">2</span> ? <span class="number">4</span> : d.Type == <span class="number">1</span> ? <span class="number">5</span> : <span class="number">1</span>)&#125;</span>,25,<span class="subst">&#123;d.Color&#125;</span>,1512931469,1,354b5ade,4028451968&quot;</span>,</span><br><span class="line">                Value = d.Text</span><br><span class="line">            &#125;).ToArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>     反序列化</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;s&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BilibiliDanmakuData</span>(<span class="params">Stream s</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> serializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(BilibiliDanmakuData));</span><br><span class="line">            <span class="keyword">var</span> bd = (BilibiliDanmakuData) serializer.Deserialize(s);</span><br><span class="line">            D = bd.D;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">XmlElement(<span class="meta-string">&quot;d&quot;</span>)</span>] <span class="keyword">public</span> iD[] D &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>     转通用Data</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;DanmakuData&gt; <span class="title">ToDanmakuDataList</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> D.Select(s =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> d = s.P.Split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> t = <span class="built_in">int</span>.Parse(d[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> DanmakuData</span><br><span class="line">                &#123;</span><br><span class="line">                    Time = <span class="built_in">float</span>.Parse(d[<span class="number">0</span>]),</span><br><span class="line">                    Color = <span class="built_in">int</span>.Parse(d[<span class="number">3</span>]),</span><br><span class="line">                    Type = t == <span class="number">4</span> ? <span class="number">2</span> : t == <span class="number">5</span> ? <span class="number">1</span> : <span class="number">0</span>,</span><br><span class="line">                    Author = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    Text = s.Value</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToXml</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> ms = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            <span class="keyword">var</span> x = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(BilibiliDanmakuData));</span><br><span class="line">            x.Serialize(ms, <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> Encoding.UTF8.GetString(ms.ToArray());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">SerializableAttribute</span>]</span><br><span class="line">    [<span class="meta">DesignerCategory(<span class="meta-string">&quot;code&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">XmlType(AnonymousType = true)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">iD</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">XmlAttribute(<span class="meta-string">&quot;p&quot;</span>)</span>] <span class="keyword">public</span> <span class="built_in">string</span> P &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">XmlText</span>] <span class="keyword">public</span> <span class="built_in">string</span> Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><figcaption><span>DanmakuData.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BiliBili.Danmaku.Model</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DanmakuData</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> Time &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Color &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">MaxLength(16)</span>] <span class="keyword">public</span> <span class="built_in">string</span> Author &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">MaxLength(255)</span>] <span class="keyword">public</span> <span class="built_in">string</span> Text &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToJson</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> JsonSerializer.Serialize(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DanmakuData <span class="title">FromJson</span>(<span class="params"><span class="built_in">string</span> json</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> JsonSerializer.Deserialize&lt;DanmakuData&gt;(json);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果前面还是用 <code>GetStringAsync()</code> 的话，就要用到</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;DanmakuXml&gt; <span class="title">DXml</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = _bilibili.GetDanmakuByCid(<span class="number">1176840</span>);  <span class="comment">//这里a的类型是 Task&lt;string&gt;</span></span><br><span class="line">    <span class="keyword">using</span> StringReader sr = <span class="keyword">new</span> StringReader(<span class="keyword">await</span> a);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DanmakuXml(sr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话就有有一个问题，会有一个 <code>Stream</code> -&gt; <code>string</code> -&gt; <code>Stream</code> 的转换，造成不必要的资源浪费，json 反序列化的时候也是同理，用 <code>GetStreamAsync()</code> 而不是 <code>GetStringAsync()</code>。</p><p>至此，反序列化部分也已经完成了，后面需要的就是序列化，转换成其他播放器可以使用的格式。</p><p>后面的部分就比较简单了，相信一个初学者都可以顺利完成，就不再赘述了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单说一下我开发的&lt;a href=&quot;https://github.com/MonoLogueChi/Dplayer.Danmaku&quot;&gt;弹幕后端&lt;/a&gt;的 BiliBili 弹幕解析过程，总结一下以前犯得新手错误，我的程序不是能用就行，我在能用的情况下还要有效率。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C#" scheme="https://blog.xxwhite.com/tags/C/"/>
    
    <category term="dotnet" scheme="https://blog.xxwhite.com/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>在 .NET CORE 项目中使用 VUE</title>
    <link href="https://blog.xxwhite.com/2020/aspnetcore-vue.html"/>
    <id>https://blog.xxwhite.com/2020/aspnetcore-vue.html</id>
    <published>2020-02-22T13:08:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>最近在改造一个项目，想要在 .net core 项目中使用 vue 单页面应用。</p><span id="more"></span><h2 id="创建项目">创建项目<a class="header-anchor" href="#创建项目">➴</a></h2><p>正常创建一个 MVC 项目，用 Web 应用程序模板或者 API 模板都可以。我就使用 API 模板作为示例了。</p><h2 id="添加-Vue-支持">添加 Vue 支持<a class="header-anchor" href="#添加-Vue-支持">➴</a></h2><blockquote><p>以下内容可能已经过期，请以项目文档为标准</p><ul><li><a href="https://github.com/EEParker/aspnetcore-vueclimiddleware">VueCliMiddleware</a></li><li><a href="https://cli.vuejs.org/zh/guide/">Vue Cli</a></li></ul></blockquote><p>全局安装 <code>vue-cli</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g @vue/cli</span><br></pre></td></tr></table></figure><p>在项目目录下创建一个 vue 项目</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue create myapp</span></span><br></pre></td></tr></table></figure><p>修个 <code>package.json</code></p><figure class="highlight diff"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class="line"><span class="deletion">-   &quot;build&quot;: &quot;vue-cli-service build&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;build&quot;: &quot;vue-cli-service build --dest ../wwwroot/&quot;,</span></span><br><span class="line">    &quot;lint&quot;: &quot;vue-cli-service lint&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>项目安装 nuget 包 <code>VueCliMiddleware</code>，然后配置 <code>Startup.cs</code>，添加以下内容</p><figure class="highlight cs"><figcaption><span>Startup.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG //重点</span></span><br><span class="line"><span class="keyword">using</span> VueCliMiddleware;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WebApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Configuration = configuration;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            services.AddControllers();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseDeveloperExceptionPage();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            app.UseDefaultFiles(); <span class="comment">//重点</span></span><br><span class="line">            app.UseStaticFiles();  <span class="comment">//重点</span></span><br><span class="line"></span><br><span class="line">            app.UseRouting();</span><br><span class="line"></span><br><span class="line">            app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">            app.UseEndpoints(endpoints =&gt; &#123; endpoints.MapControllers(); &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//重点</span></span><br><span class="line">            app.UseSpa(spa =&gt;</span><br><span class="line">            &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">                spa.Options.SourcePath = <span class="string">&quot;ClientApp&quot;</span>;</span><br><span class="line">                spa.UseVueCli();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">                config.Options.SourcePath = <span class="string">&quot;wwwroot&quot;</span>;</span><br><span class="line">                config.Options.DefaultPage = <span class="string">&quot;/index.html&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Debug环境下条件 <code>#DEBUG</code>预编译指令</p><p><img src="/assets/img/2020/Snipaste_2020-02-22_10-15-44.png" alt=""></p><p>启动项目，访问 <code>http://localhost:5000</code></p><p><img src="/assets/img/2020/Snipaste_2020-02-22_10-25-21.png" alt=""></p><p>我目前是使用 visual studio 写api项目，使用visual studio code写vue项目。</p><h2 id="构建项目">构建项目<a class="header-anchor" href="#构建项目">➴</a></h2><p>发布项目之前需要先在<code>myapp</code>目录执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="builtin-name">run</span> build</span><br></pre></td></tr></table></figure><p>也可以配置成自动执行，但是我一直在用ci，所以就写在了ci里面，关键语句如下</p><figure class="highlight yaml"><figcaption><span>azure-pipelines.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">UseNode@1</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">CmdLine@2</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">cd</span> <span class="string">$(Build.SourcesDirectory)/WebApplication1</span></span><br><span class="line">        <span class="string">dotnet</span> <span class="string">remove</span> <span class="string">package</span> <span class="string">VueCliMiddleware</span></span><br><span class="line">        <span class="string">cd</span> <span class="string">clientapp</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br></pre></td></tr></table></figure><p>如果需要配置成在发布时自动执行，需要修改 <code>WebApplication1.csproj</code></p><p>```xml WebApplication1.csproj`<br><Project Sdk="Microsoft.NET.Sdk.Web"></p>  <PropertyGroup>    <TargetFramework>netcoreapp3.1</TargetFramework>  </PropertyGroup>  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">    <DefineConstants>DEBUG;TRACE</DefineConstants>  </PropertyGroup>  <ItemGroup>    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="3.1.1" />    <PackageReference Include="VueCliMiddleware" Version="3.1.1" />  </ItemGroup>  <!-- 下面是重点 -->  <Target Name="CheckNodeEnv" BeforeTargets="Build">    <Exec Command="npm --version" ContinueOnError="true">      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />    </Exec>  </Target>  <Target Name="NpmInstall" AfterTargets="CheckNodeEnv" Inputs="package.json" Outputs="packages-lock.json">    <Message Importance="high" Text="正在安装npm包" />    <Exec WorkingDirectory="$(ProjectDir)myapp" Command="npm install" />  </Target>  <Target Name="NpmRunBuild" AfterTargets="NpmInstall">    <Message Importance="high" Text="正在构建静态页面" />    <Exec WorkingDirectory="$(ProjectDir)myapp" Command="npm run build" />  </Target></Project>```]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在改造一个项目，想要在 .net core 项目中使用 vue 单页面应用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C#" scheme="https://blog.xxwhite.com/tags/C/"/>
    
    <category term="dotnet" scheme="https://blog.xxwhite.com/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>ArchLinux安装</title>
    <link href="https://blog.xxwhite.com/2020/archlinux-install.html"/>
    <id>https://blog.xxwhite.com/2020/archlinux-install.html</id>
    <published>2020-01-18T12:08:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>以前一直觉得ArchLinux安装很麻烦，不敢尝试，现在自以为Linux已经有一些基础了，就打算试一下。参考<a href="https://wiki.archlinux.org/index.php/Installation_guide">ArchWiki</a>，结合自己了解的一点知识，记录一下安装过程。</p><p>顺便说一下，想要玩转这个东西，看教程的时候一定要明白每一步的命令是在做什么，如果想要使用和教程不一样的方法，命令应该怎么写。比如想要boot单独分区，这个时候应该怎么挂载。</p><span id="more"></span><p>建议第一次尝试在虚拟机里安装，等熟悉了再上手，这个对新手真不简单，本文演示环境是Hyper-V虚拟机，没有安装图形界面，所以不会介绍显卡驱动值之类的问题。</p><h2 id="准备工作">准备工作<a class="header-anchor" href="#准备工作">➴</a></h2><h3 id="下载镜像">下载镜像<a class="header-anchor" href="#下载镜像">➴</a></h3><p>先下载一个Arch的镜像，建议从国内的镜像源去下载，可以直接从<a href="https://mirrors.huaweicloud.com/archlinux/iso/">华为开源镜像站</a>下载。</p><h3 id="制作启动盘">制作启动盘<a class="header-anchor" href="#制作启动盘">➴</a></h3><p>由于本文是在虚拟机里面安装，就没有这一步了，改成创建虚拟机，具体步骤就不记录了。但是有一点一定要注意，一定要能联网。</p><p>创建完虚拟机以后，挂载虚拟光驱，关闭安全启动，然后调整启动顺序为从光盘启动。连接，开机。</p><p>启动U盘建议使用<a href="http://rufus.ie/">rufus</a>制作，都是傻瓜一键式，很简单的。</p><h3 id="验证启动模式">验证启动模式<a class="header-anchor" href="#验证启动模式">➴</a></h3><p>现在大部分都说uefi启动了，bios方式本文就不记录了，就是记录上也是抄的别人的，没验证过的东西。如果哪里有不一样的地方，会顺带提一下，不一样的地方可以去参考<a href="https://wiki.archlinux.org/index.php/Installation_guide">WiKi</a></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ls <span class="regexp">/sys/</span>firmware<span class="regexp">/efi/</span>efivars</span><br></pre></td></tr></table></figure><h3 id="联网">联网<a class="header-anchor" href="#联网">➴</a></h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># dhcpcd</span></span><br></pre></td></tr></table></figure><p>如果路由器设置是动态分配ip的话，一般没啥问题，如果是静态ip，或者是使用无线网络，请参考<a href="https://wiki.archlinux.org/index.php/Installation_guide">WiKi</a></p><p>验证联网</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># ping www.baidu.com</span></span><br></pre></td></tr></table></figure><h3 id="更新系统时间">更新系统时间<a class="header-anchor" href="#更新系统时间">➴</a></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># timedatectl <span class="keyword">set</span>-ntp <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="磁盘分区">磁盘分区<a class="header-anchor" href="#磁盘分区">➴</a></h3><p>这一步是重点，和WiKi有点不一样，仔细看。</p><p>查看磁盘</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># fdiks -l</span></span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># fdisk <span class="regexp">/dev/</span>sda</span><br></pre></td></tr></table></figure><p>然后按照下图所示的方法创建几个分区，这里想怎么分就怎么分。只是你分完了分区别忘了挂载就可以了，我自认为自己的分区方法还算比较合理的，适合大部分用户使用。</p><p><img src="/assets/img/2020/Snipaste_2020-01-18_09-35-51.png" alt=""></p><p>上图还没有做完，还需要修改分区类型(最后不需要w，我是因为忘记改了，才直接w写入的)</p><p><img src="/assets/img/2020/Snipaste_2020-01-18_09-40-08.png" alt=""></p><p>如果是bios启动，不需要创建EFI分区，如果是已经有分区表的磁盘，不需要输入g创建gpt分区表。</p><p>然后再格式化分区</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># mkfs.fat <span class="regexp">/dev/</span>sda1</span><br><span class="line"></span><br><span class="line"># mkfs.ext4 <span class="regexp">/dev/</span>sda2</span><br><span class="line"></span><br><span class="line"># mkfs.ext4 <span class="regexp">/dev/</span>sda3</span><br><span class="line">或</span><br><span class="line"># mkfs.btrfs <span class="regexp">/dev/</span>sda3</span><br></pre></td></tr></table></figure><h3 id="挂载分区">挂载分区<a class="header-anchor" href="#挂载分区">➴</a></h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># mount <span class="regexp">/dev/</span>sda3 /mnt</span><br><span class="line"></span><br><span class="line"># mkdir <span class="regexp">/mnt/</span>boot</span><br><span class="line"># mkdir <span class="regexp">/mnt/</span>efi</span><br><span class="line"></span><br><span class="line"># mount <span class="regexp">/dev/</span>sda2 <span class="regexp">/mnt/</span>boot</span><br><span class="line"># mount <span class="regexp">/dev/</span>sda1 <span class="regexp">/mnt/</span>efi</span><br></pre></td></tr></table></figure><p>如果你不想这么做，想要把efi目录放在boot目录下，也是可以的，也就是<code>mkdir /boot/efi</code>和<code>mount /dev/sda1 /mnt/boot/efi</code>，后面安装引导时候的命令也会改变。反正如果你理解了Linux目录和分区是怎么回事，就可以想怎么搞就怎么搞。</p><p>如果是BIOS方式启动的话，这里没有efi分区的事。</p><h2 id="安装">安装<a class="header-anchor" href="#安装">➴</a></h2><h3 id="选择镜像">选择镜像<a class="header-anchor" href="#选择镜像">➴</a></h3><p>同样选择华为开源镜像，修改<code>/etc/pacman.d/mirrorlist</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim <span class="regexp">/etc/</span>pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>在前面插入</p><figure class="highlight properties"><figcaption><span>/etc/pacman.d/mirrorlist</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Server</span> = <span class="string">https://mirrors.huaweicloud.com/archlinux/$repo/os/$arch</span></span><br></pre></td></tr></table></figure><h3 id="安装基本包">安装基本包<a class="header-anchor" href="#安装基本包">➴</a></h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pacstrap /mnt <span class="built_in">base</span> <span class="built_in">base</span>-devel linux</span><br></pre></td></tr></table></figure><h2 id="配置系统">配置系统<a class="header-anchor" href="#配置系统">➴</a></h2><h3 id="Fstab">Fstab<a class="header-anchor" href="#Fstab">➴</a></h3><p>先配置分区挂载</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># genfstab -U <span class="regexp">/mnt &gt;&gt; /m</span>nt<span class="regexp">/etc/</span>fstab</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># genfstab -L <span class="regexp">/mnt &gt;&gt; /m</span>nt<span class="regexp">/etc/</span>fstab</span><br></pre></td></tr></table></figure><p>前面两个命令都可以，只是一个使用UUID，一个使用卷标。配置之后再检查一下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cat <span class="regexp">/mnt/</span>etc/fatab</span><br></pre></td></tr></table></figure><h3 id="Chroot">Chroot<a class="header-anchor" href="#Chroot">➴</a></h3><p>change root，也就是离开live环境，把操作权交给新安装的系统。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># arch-chroot /mnt</span></span><br></pre></td></tr></table></figure><h3 id="设置时区">设置时区<a class="header-anchor" href="#设置时区">➴</a></h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ln -sf <span class="regexp">/usr/</span>share<span class="regexp">/zoneinfo/</span>Asia<span class="regexp">/Shanghai /</span>etc/localtime</span><br><span class="line"></span><br><span class="line"># hwclock --systohc</span><br></pre></td></tr></table></figure><h3 id="提前安装一些软件包">提前安装一些软件包<a class="header-anchor" href="#提前安装一些软件包">➴</a></h3><p>因为后面需要用到一些软件，所有提前安装好</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># pacman -S vim net-tools</span></span><br></pre></td></tr></table></figure><h3 id="语言本地化">语言本地化<a class="header-anchor" href="#语言本地化">➴</a></h3><p>修改<code>/etc/locale.gen</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim <span class="regexp">/etc/</span>locale.gen</span><br></pre></td></tr></table></figure><p>把下面几行注释删除，使其生效</p><figure class="highlight properties"><figcaption><span>/etc/locale.gen</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">en_US.UTF-8</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="meta">zh_CN.UTF-8</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="meta">zh_TW.UTF-8</span> <span class="string">UTF-8</span></span><br></pre></td></tr></table></figure><p>接着执行 locale-gen</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># locale-gen</span></span><br></pre></td></tr></table></figure><p>创建locale.conf，并编辑</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim <span class="regexp">/etc/</span>locale.conf</span><br></pre></td></tr></table></figure><p>插入</p><figure class="highlight properties"><figcaption><span>locale.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LANG</span>=<span class="string">en_US.UTF-8</span></span><br></pre></td></tr></table></figure><h3 id="配置网络">配置网络<a class="header-anchor" href="#配置网络">➴</a></h3><p>首先设置主机名，比如说我设置的叫arch</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim <span class="regexp">/etc/</span>hostname</span><br></pre></td></tr></table></figure><figure class="highlight properties"><figcaption><span>/etc/hostname</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">acrh</span></span><br></pre></td></tr></table></figure><p>修改hosts，添加下面的内容</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure><figure class="highlight properties"><figcaption><span>/etc/hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">127.0.0.1</span>        <span class="string">localhost</span></span><br><span class="line">::1         localhost</span><br><span class="line"><span class="meta">127.0.1.1</span>     <span class="string">arch.local        arch</span></span><br></pre></td></tr></table></figure><h3 id="设置root密码">设置root密码<a class="header-anchor" href="#设置root密码">➴</a></h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># passwd</span></span><br></pre></td></tr></table></figure><h2 id="安装引导程序">安装引导程序<a class="header-anchor" href="#安装引导程序">➴</a></h2><h3 id="安装Intel-ucode">安装Intel-ucode<a class="header-anchor" href="#安装Intel-ucode">➴</a></h3><p>这一步可省略，非intel跳过</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># pcanma -S intel-ucode</span></span><br></pre></td></tr></table></figure><h3 id="安装grub">安装grub<a class="header-anchor" href="#安装grub">➴</a></h3><p>这里如果是BIOS方式启动，会不一样，EFI启动可以接着看</p><p>这一步之前请先检查<code>/boot</code>目录</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">ls</span> /<span class="keyword">boot</span></span><br></pre></td></tr></table></figure><p>查看是否有</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">initramfs-linux-fallback.img</span><br><span class="line">initramfs-linux.img</span><br><span class="line">vmlinuz-linux</span><br></pre></td></tr></table></figure><p>如果没有这几个文件，就是Linux没有部署好，执行</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># pacman -S linux</span></span><br></pre></td></tr></table></figure><p>然后再重新检查，确定有这几个文件，继续安装引导</p><p>安装os-prober、grub和efibootmgr</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># pacman -S os-prober grub efibootmgr</span></span><br></pre></td></tr></table></figure><p>部署grub</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span> <span class="comment">grub</span><span class="literal">-</span><span class="comment">install</span> --<span class="comment">target=x86_64</span><span class="literal">-</span><span class="comment">efi</span> --<span class="comment">efi</span><span class="literal">-</span><span class="comment">directory=/efi</span> --<span class="comment">bootloader</span><span class="literal">-</span><span class="comment">id=grub</span></span><br></pre></td></tr></table></figure><p>生成配置文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># grub-mkconfig -o <span class="regexp">/boot/g</span>rub/grub.cfg</span><br></pre></td></tr></table></figure><h2 id="安装完成">安装完成<a class="header-anchor" href="#安装完成">➴</a></h2><p>完活，重启</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># exit</span></span><br><span class="line"><span class="meta"># reboot</span></span><br></pre></td></tr></table></figure><p>重启以后会看到如下画面</p><p><img src="/assets/img/2020/Snipaste_2020-01-18_10-58-13.png" alt=""></p><p>再接下来就是设置交换分区文件，配置ssh等等，这些都说常识操作了，就不再记录了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;以前一直觉得ArchLinux安装很麻烦，不敢尝试，现在自以为Linux已经有一些基础了，就打算试一下。参考&lt;a href=&quot;https://wiki.archlinux.org/index.php/Installation_guide&quot;&gt;ArchWiki&lt;/a&gt;，结合自己了解的一点知识，记录一下安装过程。&lt;/p&gt;
&lt;p&gt;顺便说一下，想要玩转这个东西，看教程的时候一定要明白每一步的命令是在做什么，如果想要使用和教程不一样的方法，命令应该怎么写。比如想要boot单独分区，这个时候应该怎么挂载。&lt;/p&gt;</summary>
    
    
    
    
    <category term="涨姿势" scheme="https://blog.xxwhite.com/tags/%E6%B6%A8%E5%A7%BF%E5%8A%BF/"/>
    
    <category term="Linux" scheme="https://blog.xxwhite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>迟到的2019年终总结</title>
    <link href="https://blog.xxwhite.com/2020/yearend-summary.html"/>
    <id>https://blog.xxwhite.com/2020/yearend-summary.html</id>
    <published>2020-01-11T20:08:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>一直没有想好2019的年终总结要写什么，就迟到了。</p><span id="more"></span><p>自己回忆2019，说的好听点就过的平平淡淡，不好听就是浑浑噩噩。</p><h2 id="十二个月">十二个月<a class="header-anchor" href="#十二个月">➴</a></h2><h3 id="一月">一月<a class="header-anchor" href="#一月">➴</a></h3><p>2019年1月，我辞职了，这辈子第一次辞职，第一份工作也只有7个月整。说起来有点惭愧，高考考进了985大学，结果毕业混的那么惨，说出去都有点不好意思。</p><p>怎么说这件事呢，不喜欢那份工作的内容，具体是什么内容就不说了，但是绝对不适合刚刚毕业的大学生去做，和我做同样工作的一个人早我两个月离职了，那样的工作就应该交给那些工作了好多年的老油条去做，刚毕业的大学生太耿直了，容易自己把自己逼疯。</p><p>不管是什么原因，结束了第一份工作，接下来就是新的开始了。</p><h3 id="二月">二月<a class="header-anchor" href="#二月">➴</a></h3><p>2019年2月，新公司入职，这份工作在2018年年底就已经联系好了，算是无缝切换，那边辞职，回家过个好年，然后这边就入职了。</p><p>这次入职，也代表着完成了转行，从一个工厂里的工艺员，变成了一个程序猿。以前家里穷，没机会接触电脑，偶尔能摸一下也都忙着打游戏呢，也没发现自己对编程有多高的兴趣，如果很早就知道自己想要干这行，高考填志愿的时候就填一个计算机类的专业了。</p><h3 id="三月、四月、五月">三月、四月、五月<a class="header-anchor" href="#三月、四月、五月">➴</a></h3><p>入职的第一个项目，在加上这个项目是给我们学院做的，特别有干劲，经常主动加班，回忆一下，这几个月应该是今年的巅峰吧。</p><p>3月份买了一台小主机，在宿舍里自己搭建了一个小服务器，这也是我第一次做这种事年轻人的第一台私人服务器get，也是在这台服务器上做了越来越多的尝试，尝试自建git，尝试自己搭建直播服务器，尝试…</p><p>3月22日，2019年投稿的<a href="https://www.bilibili.com/video/av47027321/">第一个视频</a>，为了蹭热度去投稿的视频，高清重制版的烂苹果，使用ffmpeg分割成图片，然后waifu2x放大，再用pr补帧合成，原本计划是做一个2K版的，再做一个4K版的，但是4K版的一拖再拖，一直拖到年底也没做。主要是这东西太耗时了，4K放大，就算我拿1080去跑，至少也要一天一夜，然后补帧也需要时间。因为懒，就一直没搞。</p><h3 id="六月">六月<a class="header-anchor" href="#六月">➴</a></h3><p>6月份，前面做的那个项目谈崩了，所有努力都白费了，公司损失了多少不清楚，虽然心里不太好受，但是生活确实轻松了好多。</p><p>这个时候也开始考虑自己写点东西了，于是我今年的第一个开源项目就在这个时候诞生了。</p><p><a href="https://github.com/MonoLogueChi/Dplayer.Danmaku">Dplayer.Danmaku</a>，一个Dplayer的弹幕服务器，半年时间获得了39个星星，也是到写这篇文章为止，star最多的一个项目。</p><p>为了这个项目，大概花了三百多RMB，自己租了一个VPS当演示服务器。</p><h3 id="七月、八月">七月、八月<a class="header-anchor" href="#七月、八月">➴</a></h3><p>我也不知道这两个月都做了什么，完全没有印象了，每天都是混日子。</p><h3 id="九月">九月<a class="header-anchor" href="#九月">➴</a></h3><p>9月份，我把以前发服务器寄回了家，然后又装了一台，功率更小，更实用的服务器，也是从这开始折腾软路由和openwrt的。</p><h3 id="十月">十月<a class="header-anchor" href="#十月">➴</a></h3><p>10月初，我又开了一个项目，<a href="https://github.com/MonoLogueChi/MetingJS.Server">MetingJS.Server</a>，技术含量相当低的一个项目，就是把别人的一个类库封装成网络API，项目虽然简单，但是很实用，我自己一直在用。</p><h3 id="十一月">十一月<a class="header-anchor" href="#十一月">➴</a></h3><p>11月我买了一台二手微单，喜欢到处去拍一些照片，一开始还有点不好意思拿出去拍，但是拍多了就发现根本没人在意我，也就能大大方方的拿出相机来拍了。买微单是为了逼着我多出去走一走，如果有机会的话，还想多拍几个视频。</p><h3 id="十二月">十二月<a class="header-anchor" href="#十二月">➴</a></h3><p>到年底了，但这个月做了一些自己喜欢做的事，首先是前面买了一台竞斗云，就把软路由改成了nas，做了三期nas相关的视频，把以前买的一个平板改成了游戏机，这样下班以后就可以打打游戏，魂斗罗、忍者神龟，这两个系列算是我最喜欢玩的游戏了。</p><p>还有，公司的新项目，也终于有自己发挥的空间了，硬件控制台，自己设计板子，在淘宝上找人做，自己选购元器件，然后又关在小黑屋里搞了三天，终于拼出来了两块板子。</p><p>开源项目上，12月开始动工了一个hexo的脚本，也就是<a href="https://github.com/MonoLogueChi/hexo-tag-mmedia">这个项目</a>最初的原型，自己感觉是个很实用的项目，改成npm包发布以后，前3天的下载量有120，也算是比较满意了。</p><h2 id="总结一下">总结一下<a class="header-anchor" href="#总结一下">➴</a></h2><p>2019年，换了一份工作，从一个工艺技术员变成了程序猿；<br>2019年，开源了3个项目，都是和我的博客相关的；<br>2019年，投稿了10个视频，大部分都是和电脑网络相关的；<br>2019年，我真的编不下去了，编了一份自己能看的过去的总结，骗网友，骗自己，假装自己过的很好。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一直没有想好2019的年终总结要写什么，就迟到了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随便水水" scheme="https://blog.xxwhite.com/tags/%E9%9A%8F%E4%BE%BF%E6%B0%B4%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>昨天发布了第一个npm包</title>
    <link href="https://blog.xxwhite.com/timeline/2020/2020-01-09.html"/>
    <id>https://blog.xxwhite.com/timeline/2020/2020-01-09.html</id>
    <published>2020-01-09T14:55:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>昨天发布了第一个npm包，人生又一个第一次没了。</p><span id="more"></span><p>第一个npm包贡献给了 <a href="https://www.npmjs.com/package/hexo-tag-mmedia">hexo-tag-mmedia</a> 。本来名字想要叫<code>media</code>来着，但是想着这么好的名字，应该留空，就加了一个<code>m</code>，叫<code>mmedia</code>。</p><p>截至这篇文章写作的时间，已经有10个star了，这有可能会成为我星星数最多的一个开源项目。说起来有点可笑，我一个业余后端，星星数量最多的是一个前端项目，而且这个前端项目也是这里copy一点，那里copy一点做出来的。</p><p>当然，做出来一个项目，身上也就又多了一个包袱，以后还要不断维护这个项目。</p><p>简单放一个小视频，测试一下，如果视频没挂，插件状态就是可用。</p><style>.bbplayer{width: 100%; max-width: 950px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-hdZOmlYibuVyeAwB" src="https://player.bilibili.com/player.html?bvid=BV1ug4y167Rg&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-hdZOmlYibuVyeAwB").style.height=document.getElementById("mmedia-hdZOmlYibuVyeAwB").scrollWidth*0.76+"px";    window.onresize = function(){      document.getElementById("mmedia-hdZOmlYibuVyeAwB").style.height=document.getElementById("mmedia-hdZOmlYibuVyeAwB").scrollWidth*0.76+"px";    }; </script>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天发布了第一个npm包，人生又一个第一次没了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="timeline" scheme="https://blog.xxwhite.com/tags/timeline/"/>
    
  </entry>
  
  <entry>
    <title>想到了一个好玩的板块</title>
    <link href="https://blog.xxwhite.com/timeline/2020/2020-01-04.html"/>
    <id>https://blog.xxwhite.com/timeline/2020/2020-01-04.html</id>
    <published>2020-01-04T16:12:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>今天突然有一个想法，在博客里开一个单独的板块，用来随手记录一些生活中东西。</p><span id="more"></span><h2 id="特点">特点<a class="header-anchor" href="#特点">➴</a></h2><p>这个板块里面的内容不会出现在博客首页上</p><h2 id="内容">内容<a class="header-anchor" href="#内容">➴</a></h2><p>这个板块的内容大多是与技术无关的，比如某天做了一个有意思的东西，某天发了一个视频。</p><p>说到视频，我就想起来了，最近鸡汤看的有点多，打算用心做一下视频，不知道后面能做到什么程度，尽力吧，反正是不能再混了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天突然有一个想法，在博客里开一个单独的板块，用来随手记录一些生活中东西。&lt;/p&gt;</summary>
    
    
    
    
    <category term="timeline" scheme="https://blog.xxwhite.com/tags/timeline/"/>
    
  </entry>
  
  <entry>
    <title>Hexo脚本</title>
    <link href="https://blog.xxwhite.com/2019/hexo-scripts.html"/>
    <id>https://blog.xxwhite.com/2019/hexo-scripts.html</id>
    <published>2019-11-29T19:48:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>事情的起因是这样的，我博客里用的音乐插件<a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a>太久没更新了，已经不能支持新版的<a href="https://github.com/metowolf/MetingJS">MetingJS</a>，我便决定自己尝试解决一下。</p><span id="more"></span><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script><script> var meting_api='https://sm.sm9.top/api.php?server=:server&type=:type&id=:id&auth=:auth&r=:r'; </script><meting-js order="random" metin="meting" id="002vALgR3hRRlv" server="tencent" type="artist" ></meting-js><p>对于 js 那一套东西，我实在是不懂，所以开发一个插件就算了，打算写一个简单一点的脚本就好。所有 hexo 插件实现的功能，都可以用脚本实现，功能太复杂了，而且想要把这个东西共享给别人，就会打包成插件去发布。</p><p>关于 Hexo 脚本和插件的介绍，可以看<a href="https://hexo.io/zh-cn/docs/plugins#%E8%84%9A%E6%9C%AC%EF%BC%88Scripts%EF%BC%89">官方文档</a>。</p><p>脚本开发我也是个半吊子，只会写一些简单的脚本。</p><p>我写的 Aplayer 脚本的开源地址：<a href="https://github.com/MonoLogueChi/hexo-tag-aplayer-scripts">hexo-tag-aplayer-scripts</a>。</p><p>已合并到新项目：<a href="https://github.com/u2sb/hexo-tag-mmedia">hexo-tag-mmedia</a></p><h2 id="目的">目的<a class="header-anchor" href="#目的">➴</a></h2><p>简单介绍一下怎么写脚本，就拿上面这个脚本为例。我的目的是，在文章中插入标签：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting <span class="string">&quot;60198&quot;</span> <span class="string">&quot;netease&quot;</span> <span class="string">&quot;playlist&quot;</span> %&#125;</span><br></pre></td></tr></table></figure><p>在网页中要自动生成代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;meting-js</span><br><span class="line">    server=<span class="string">&quot;netease&quot;</span></span><br><span class="line">    type=<span class="string">&quot;playlist&quot;</span></span><br><span class="line">    id=<span class="string">&quot;60198&quot;</span>&gt;</span><br><span class="line">&lt;/meting-js&gt;</span><br></pre></td></tr></table></figure><h2 id="基础版">基础版<a class="header-anchor" href="#基础版">➴</a></h2><p>看过<a href="https://hexo.io/zh-cn/api/tag">文档</a>以后，大致知道怎么写了，首先是需要一个标签：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.tag.register(<span class="string">&quot;meting&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;返回需要插入网页的内容&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样，在文章中写<code>&#123;% meting %&#125;</code>标签就不会报错了。接下来就是需要处理里面的内容了，因为对 js 和 hexo 不是很熟，就先从最简单的开始，跑通了以后再优化。注意一点，参数<code>args</code>是一个数组，传入的每一个参数都说数组里面的一个元素，比如</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting <span class="string">&quot;60198&quot;</span> <span class="string">&quot;netease&quot;</span> <span class="string">&quot;playlist&quot;</span> %&#125;</span><br></pre></td></tr></table></figure><p>取参数的时候分别是<code>args[0]</code>、<code>args[1]</code>、<code>args[2]</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.tag.register(<span class="string">&quot;meting&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;meting-js</span></span><br><span class="line"><span class="string">        server=&quot;<span class="subst">$&#123;args[<span class="number">1</span>]&#125;</span>&quot;</span></span><br><span class="line"><span class="string">        type=&quot;<span class="subst">$&#123;args[<span class="number">2</span>]&#125;</span>&quot;</span></span><br><span class="line"><span class="string">        id=&quot;<span class="subst">$&#123;args[<span class="number">0</span>]&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/meting-js&gt;`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样，一个最简单脚本就写出来了，可以接收三个参数，自动插入 meting 标签。</p><h2 id="稍进阶">稍进阶<a class="header-anchor" href="#稍进阶">➴</a></h2><p>上面的脚本是能跑了，但是十分简陋，支持程度也不高，要进一步加强。首先是要对脚本能配置，查 api 以后可以知道，获取配置需要用到<code>hexo.config</code>，所以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = hexo.config.aplayer;</span><br></pre></td></tr></table></figure><p>这样就可以获取到<code>_config.yml</code>中<code>aplayer</code>项的配置了。除了这三个标签，其他标签怎么搞？还需要一个通用的解析方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetOptions</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  args.forEach(<span class="function">(<span class="params">option</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> d = option.indexOf(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (d != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> key = option.substring(<span class="number">0</span>, d);</span><br><span class="line">      <span class="keyword">var</span> value = option.substring(d + <span class="number">1</span>, option.length);</span><br><span class="line">      options[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> options;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法可以将<code>key:value</code>解析成一个字典（我不知道 js 里怎么称呼，我就用 C#里的称呼，称他为字典吧）。后面这一步跨步有点大，而且我写的代码又不规范，将就着看一下吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.tag.register(<span class="string">&quot;meting&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> tag = CreatMetingTag(args);</span><br><span class="line">    <span class="keyword">return</span> tag;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">console.error(&quot;<span class="subst">$&#123;e&#125;</span>&quot;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatMetingTag</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> jsCdn =</span><br><span class="line">    config.cdn != <span class="literal">null</span> &amp;&amp; config.cdn.length &gt; <span class="number">0</span></span><br><span class="line">      ? config.cdn</span><br><span class="line">      : <span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> cssCdn =</span><br><span class="line">    config.style_cdn != <span class="literal">null</span> &amp;&amp; config.style_cdn.length &gt; <span class="number">0</span></span><br><span class="line">      ? config.style_cdn</span><br><span class="line">      : <span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> metingCdn =</span><br><span class="line">    config.meting_cdn != <span class="literal">null</span> &amp;&amp; config.meting_cdn.length &gt; <span class="number">0</span></span><br><span class="line">      ? config.meting_cdn</span><br><span class="line">      : <span class="string">&quot;https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> text = <span class="string">`&lt;link rel=&quot;stylesheet&quot; href=&quot;<span class="subst">$&#123;cssCdn&#125;</span>&quot;&gt;&lt;script src=&quot;<span class="subst">$&#123;jsCdn&#125;</span>&quot;&gt;&lt;/script&gt;&lt;script src=&quot;<span class="subst">$&#123;metingCdn&#125;</span>&quot;&gt;&lt;/script&gt;`</span>;</span><br><span class="line">  text =</span><br><span class="line">    (config.meting_api != <span class="literal">null</span> &amp;&amp; config.meting_api.length &gt; <span class="number">0</span></span><br><span class="line">      ? <span class="string">`&lt;script&gt;var meting_api=&#x27;<span class="subst">$&#123;config.meting_api&#125;</span>?server=:server&amp;type=:type&amp;id=:id&amp;auth=:auth&amp;r=:r&#x27;;&lt;/script&gt;`</span></span><br><span class="line">      : <span class="string">&quot;&quot;</span>) + text;</span><br><span class="line">  <span class="keyword">var</span> op = GetOptions(args);</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="string">&quot;auto&quot;</span> <span class="keyword">in</span> op) &amp;&amp; !(<span class="string">&quot;id&quot;</span> <span class="keyword">in</span> op)) &#123;</span><br><span class="line">    op[<span class="string">&quot;id&quot;</span>] = args[<span class="number">0</span>];</span><br><span class="line">    op[<span class="string">&quot;server&quot;</span>] = args[<span class="number">1</span>];</span><br><span class="line">    op[<span class="string">&quot;type&quot;</span>] = args[<span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> metingOptions = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> op) &#123;</span><br><span class="line">    metingOptions += <span class="string">`<span class="subst">$&#123;key&#125;</span>=&quot;<span class="subst">$&#123;op[key]&#125;</span>&quot;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  text += <span class="string">`&lt;meting-js <span class="subst">$&#123;metingOptions&#125;</span>&gt;&lt;/meting-js&gt;`</span>;</span><br><span class="line">  <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetOptions</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  args.forEach(<span class="function">(<span class="params">option</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> d = option.indexOf(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (d != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> key = option.substring(<span class="number">0</span>, d);</span><br><span class="line">      <span class="keyword">var</span> value = option.substring(d + <span class="number">1</span>, option.length);</span><br><span class="line">      options[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> options;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后续更新">后续更新<a class="header-anchor" href="#后续更新">➴</a></h2><p>先起一个头，更新的话后面慢慢再来了，现在我自己用是足够了。</p><p>最近半个月估计没啥时间了，后面有个开箱视频要做，还有一个 NAS 的教程和视频需要做。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;事情的起因是这样的，我博客里用的音乐插件&lt;a href=&quot;https://github.com/MoePlayer/hexo-tag-aplayer&quot;&gt;hexo-tag-aplayer&lt;/a&gt;太久没更新了，已经不能支持新版的&lt;a href=&quot;https://github.com/metowolf/MetingJS&quot;&gt;MetingJS&lt;/a&gt;，我便决定自己尝试解决一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站笔记" scheme="https://blog.xxwhite.com/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于5G Wi-Fi 想到的一些名词解释</title>
    <link href="https://blog.xxwhite.com/2019/5g-wifi.html"/>
    <id>https://blog.xxwhite.com/2019/5g-wifi.html</id>
    <published>2019-11-26T19:48:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>昨天帮同事修笔记本，我那里路由器只开了5G，但是他的老本子不支持。然后我说给路由器开2.4G的时候，给他解释，我这里只开了5G Wi-Fi，他说“现在运营商也不是不让用4G”，我想他是搞混了，看来有必要科普一下了。</p><span id="more"></span><h2 id="2-4G、5G-Wi-Fi">2.4G、5G Wi-Fi<a class="header-anchor" href="#2-4G、5G-Wi-Fi">➴</a></h2><p>简单一点讲，5G Wi-Fi就是工作在5GHz频段的Wi-Fi，虽然有人说 802.11ac才能叫5G Wi-Fi，运行在5G上的802.11n不能叫5G，如果这样的话，你管802.11ax叫什么？不要把5G和802.11ac绑定，使用5GHz通信的Wi-Fi，就是5G Wi-Fi。同样，工作在2.4GHz频段的Wi-Fi就是2.4G Wi-Fi。</p><p>网上都在说，5G频段是一条高速路，相比2.4G能提供更高的通信速度，其他设备干扰较少等等。缺点是穿墙能力较差，信号衰减快等等。</p><p>关于5G Wi-Fi，普通人只要知道，<strong>5G Wi-Fi是工作在5GHz频段的Wi-Fi，比2.4G更快，但是穿墙能力较差</strong>，其他的不需要过多的了解。</p><h2 id="Wi-Fi6">Wi-Fi6<a class="header-anchor" href="#Wi-Fi6">➴</a></h2><p>Wi-Fi6是什么呢？就是前面稍微提到的一个名词 <code>802.11ax</code>。</p><p>为什么叫Wi-Fi6？很简单啊，802.11a/b/g/n/ac/ax，到ax这里正好是第6代，就叫Wi-Fi6咯。</p><p>为什么前面没有Wi-Fi5、Wi-Fi4呢？这个还真有，Wi-Fi5就是802.11ac，Wi-Fi4就是802.11n。至于为什么没有人这么叫，这就涉及到一个历史问题了，因为它们是在2018年10月才改的名字。802.11a/b/g/n/ac都叫了这么多年了，突然改名，大家在称呼上的改变估计也要过很久。但是802.11ax不一样，它一出生就顶着Wi-Fi6的名字，而且对于大多数人来说，Wi-Fi6相比802.11ax更容易理解。</p><p>说了关于名字的事，简单介绍一下802.11ax，2018年10月份，802.11ax成为正规军。802.11ax支持2.4GHz和5GHz频段，向下兼容a/b/g/n/ac，支持的最高带宽为2.4Gbps。需要了解的是，<strong>Wi-Fi6就是802.11ax标准，比802.11ac更快，可以工作在5GHz和2.4GHz频段</strong>，目前来说商用产品较少，价格较高。</p><p>这里顺便提一句，路由器这种东西，三五百块钱的真不贵，新装修的房子，尽量用上ac+ap的Wi-Fi部署方式，一次多投资一点，以后肯定能少一些麻烦，至于是否需要支持802.11ax，那就要看经济实力了，现在是没必要，但是再过几年就说不准了。光纤，光交换机以后肯定也会越来越便宜，布线的时候尽量预埋光纤。</p><p>吐槽一下，我笔记本网卡换了支持802.11ax协议的ax200，但是路由器却是一个150M路由器（只支持802.11a/b/g/n），别说802.11ax了，连802.11ac都用不上，现在用的是25块钱买的au路由器，以后自己买房了肯定上一个好一点的路由器。都说好马配好鞍，我现在有了好鞍却没有好马。</p><center><img width="960px" alt="左AC3165，右AX200" src="/assets/img/2019/DSC_0090.jpg"><p>左AC3165，右AX200</p></center><h2 id="5G">5G<a class="header-anchor" href="#5G">➴</a></h2><p>5G，第五代移动通信技术。</p><p>2019年，5G炒的很火，大家都想拿5G搞点事情，都想分一块蛋糕。5G有什么不一样？更快？</p><p>更快有两方面的含义，一个是网速更快，也就是通常说的下载速度更快，这也是大众比较关心的一方面。作为一个程序猿，我更关心的是另一个方面，延时更低。打开一个正常的网页，用10M网和100M网，哪个更快？但从打开网页这方面，10M网和100M网的带宽都不会有瓶颈，真正的差别是延时，也就是TTFB，也就是你发出请求，多久服务器才能给你回应，放在游戏里面，体现出来的就是Ping值。</p><p>作为一个VR开发者，简单解释一下为什么很多人想把VR和5G结合起来？就是因为5G具有低延时的特点。如果仅仅是看带宽的话，4G也不是不能用，只是画质可能压缩的严重一点，重点在延时上，VR对延时的要求特别高。如果从你做出动作，到画面渲染到眼镜里，这个过程时间过长的话，眩晕感会特别强烈，基本上只要超过20ms，就别想正常游戏了，玩一分钟下来就想吐，比较好的体验是控制在12ms左右（当然是越低越好）。利用5G低延时的特点，预想是可以在云端渲染，也了解过华为这方面的工作，现在他们在实验室里延时也就降低到勉强能用（他们说的能用，我也不知道眩晕感有多强），到商用，路还远着呢。</p><h2 id="频宽">频宽<a class="header-anchor" href="#频宽">➴</a></h2><p>我不是学通信的，对于这东西理解也不是很透彻，所以不能瞎讲，只需要知道，<strong>频宽越大，传输速率越高</strong>。</p><p>比如802.11n的2.4G和5G，都可以选择20MHz和40MHz的频宽，当使用40MHz频宽时，速度会更快。<br>802.11ac使用Wave2可以使用160MHz的频宽，也就是有更高的速度。</p><p><img src="/assets/img/2019/s.png" alt="WiFi属性"> <img src="/assets/img/2019/s1.png" alt="无线网卡设置"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天帮同事修笔记本，我那里路由器只开了5G，但是他的老本子不支持。然后我说给路由器开2.4G的时候，给他解释，我这里只开了5G Wi-Fi，他说“现在运营商也不是不让用4G”，我想他是搞混了，看来有必要科普一下了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随便水水" scheme="https://blog.xxwhite.com/tags/%E9%9A%8F%E4%BE%BF%E6%B0%B4%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>Unity2D动画绑定</title>
    <link href="https://blog.xxwhite.com/2019/unity-2danimation.html"/>
    <id>https://blog.xxwhite.com/2019/unity-2danimation.html</id>
    <published>2019-11-13T15:48:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>这次做了一个Unity的2D动画，记录一下，怕下次忘了怎么做。</p><span id="more"></span><h2 id="要求">要求<a class="header-anchor" href="#要求">➴</a></h2><h3 id="unity3d">unity3d<a class="header-anchor" href="#unity3d">➴</a></h3><p>首先是先决条件，推荐使用Unity2019.2或更高版本，安装<code>2D Animation</code>和<code>2D PSD Importer</code>包。</p><p>官方文档：</p><ul><li><a href="https://docs.unity3d.com/Packages/com.unity.2d.animation@3.0/manual/index.html">https://docs.unity3d.com/Packages/com.unity.2d.animation@3.0/manual/index.html</a></li><li><a href="https://docs.unity3d.com/Packages/com.unity.2d.psdimporter@2.0/manual/index.html">https://docs.unity3d.com/Packages/com.unity.2d.psdimporter@2.0/manual/index.html</a></li></ul><p><img src="/assets/img/2019/Snipaste_2019-11-13_15-05-41.png" alt="包管理器"></p><h3 id="资源文件">资源文件<a class="header-anchor" href="#资源文件">➴</a></h3><p>资源文件需要<code>PSB</code>格式，直接使用PS另存为PSB格式就可以了。</p><video id="video1" autoplay loop muted src="/assets/img/2019/1.gif"></video><p>我是线在手机上随便画了一个，然后传到电脑上，用PS另存为PSB格式。</p><h2 id="绑定骨骼">绑定骨骼<a class="header-anchor" href="#绑定骨骼">➴</a></h2><h3 id="导入">导入<a class="header-anchor" href="#导入">➴</a></h3><p>直接把PSB文件拖进Unity里就可以了。</p><h3 id="编辑">编辑<a class="header-anchor" href="#编辑">➴</a></h3><p>打开骨骼编辑系统。</p><video id="video2" autoplay loop muted src="/assets/img/2019/2.gif"></video><p>如果使用自动处理会简单一些，先创建骨骼，然后绑定，使用<code>Auto Geometry</code>绑定，并自动创建权重。这个时候会发现网格分好了，但是这些东西全都是连成一片的，动手臂身子也会跟着动。</p><p>这里身子部分是不需要动画的，所以直接把身体部分的网格删掉就可以了。</p><video id="video3" autoplay loop muted src="/assets/img/2019/3.gif"></video><p>也可以先选定图层，然后再自动创建网格。</p><video id="video4" autoplay loop muted src="/assets/img/2019/4.gif"></video><p>如果是手动处理的话，会麻烦一点，但是很多情况下更需要手动去处理。我这里只演示一部分。</p><video id="video5" autoplay loop muted src="/assets/img/2019/5.gif"></video><h2 id="编辑动画">编辑动画<a class="header-anchor" href="#编辑动画">➴</a></h2><p>动画编辑就和3D动画没什么区别了，正常做就可以了。</p><video id="video5" autoplay loop muted src="/assets/img/2019/6.gif"></video>]]></content>
    
    
    <summary type="html">&lt;p&gt;这次做了一个Unity的2D动画，记录一下，怕下次忘了怎么做。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Unity" scheme="https://blog.xxwhite.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Azure DevOps Pipelines</title>
    <link href="https://blog.xxwhite.com/2019/azure-ci.html"/>
    <id>https://blog.xxwhite.com/2019/azure-ci.html</id>
    <published>2019-10-21T13:48:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间给我的一个项目上了Azure DevOps 的 Pipelines，顺带着就给那个项目的文档和这个博客一起换上了 Azure 的 CI。</p><span id="more"></span><h2 id="开始使用">开始使用<a class="header-anchor" href="#开始使用">➴</a></h2><p>先在 <a href="https://azure.microsoft.com/en-us/services/devops/">https://azure.microsoft.com/en-us/services/devops/</a> 使用GitHub登录，具体是不是必须要绑定一个微软账号我记不清了。</p><p>然后就是授权什么的，选定你需要用ci的项目，然后巴拉巴拉一度操作，这些不重要的就略过了，详细说一下后面的操作。</p><h2 id="GitHub-Releases">GitHub Releases<a class="header-anchor" href="#GitHub-Releases">➴</a></h2><p>这个是我的<a href="https://github.com/MonoLogueChi/Dplayer.Danmaku">弹幕后端</a>配置的CI，简单说一下流程，就是我push到<code>master</code>分支，ci会自动帮我检查编译，需要发布新版本的时候，只需要创建一个tag就可以了，这个时候ci会帮我自动编译，并发布一个新版本出来。</p><p>如果你也需要做 .net core 项目的ci，可以参考一下我写的配置文件。</p><p>编辑界面是这样的，后面会简单解释一下这个是怎么写出来的。</p><p><img src="/assets/img/2019/Snipaste_2019-10-21_10-47-48.png" alt=""></p><figure class="highlight yaml"><figcaption><span>azure-pipelines.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">releases/*</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;ubuntu-latest&#x27;</span></span><br></pre></td></tr></table></figure><p>这一部分没什么说的，看文档就好了，master分支和releases会触发ci，系统镜像是 Ubuntu 18.04（写这篇文章的时候是这样的，以后可能会更新）。</p><figure class="highlight yaml"><figcaption><span>azure-pipelines.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">publish</span></span><br><span class="line">    <span class="attr">publishWebProjects:</span> <span class="literal">True</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;-c Release-Linux64 -r linux-x64 --self-contained false --output $(Build.ArtifactStagingDirectory)&#x27;</span></span><br><span class="line">    <span class="attr">zipAfterPublish:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">ArchiveFiles@2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">rootFolderOrFile:</span> <span class="string">&#x27;$(Build.ArtifactStagingDirectory)/Danmaku&#x27;</span></span><br><span class="line">    <span class="attr">includeRootFolder:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">archiveType:</span> <span class="string">&#x27;tar&#x27;</span></span><br><span class="line">    <span class="attr">tarCompression:</span> <span class="string">&#x27;xz&#x27;</span></span><br><span class="line">    <span class="attr">archiveFile:</span> <span class="string">&#x27;$(Build.ArtifactStagingDirectory)/linux64.tar.xz&#x27;</span></span><br><span class="line">    <span class="attr">replaceExistingArchive:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">GithubRelease@0</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Edit GitHub Release&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">gitHubConnection:</span> <span class="string">MonoLogueChiToken</span></span><br><span class="line">    <span class="attr">repositoryName:</span> <span class="string">MonoLogueChi/Dplayer.Danmaku</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">create</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="string">$(Build.BuildNumber)</span></span><br><span class="line">    <span class="attr">assets:</span> <span class="string">$(Build.ArtifactStagingDirectory)/*.tar.xz</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这一部分就是任务流程了</p><p>第一个任务是publish，也就是编译。在侧栏的Task里找到 <code>.NET Core</code>，应该就是第一个，然后选择<code>publish</code>，参数的话就是你在正常发布时候用的参数，不懂的可以看<a href="https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-publish">文档</a></p><p><img src="/assets/img/2019/Snipaste_2019-10-21_11-03-35.png" alt=""></p><p>这样就好发布一个版本出来，在<code>$(Build.ArtifactStagingDirectory)</code>目录下。</p><p>发布完成以后就是打包，由于是Linux版本，就用tar压缩，我选择的是tar.xz。找到<code>Archive files</code>，然后填上参数就可以了。</p><p><img src="/assets/img/2019/Snipaste_2019-10-21_12-02-20.png" alt=""></p><p>打包也完成了，就剩最后一步，发布，上传到GitHub上。</p><p>首先要有一个GitHub Connection，需要使用Token连接，这个具体操作看<a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&amp;tabs=yaml#sep-github">文档</a>，然后按照下图设置就可以了，其实更简单的是直接复制配置文件然后去更改。</p><p><img src="/assets/img/2019/Snipaste_2019-10-21_14-11-22.png" alt=""> <img src="/assets/img/2019/Snipaste_2019-10-21_14-11-51.png" alt=""></p><p>需要发布新版本出去的时候，只需要commit之后创建一个tag再push就可以了，这样CI就会自动将编译好的文件发布到GitHub上，并且还会带上更新日志。</p><h2 id="GitHub-Pages">GitHub Pages<a class="header-anchor" href="#GitHub-Pages">➴</a></h2><p>这一部分我是纯手打出来的，虽然也有现成的插件，但是那个东西和自己手打有啥区别呢？都不能直接使用GitHub Connection里的Token。我自己也写了一个插件，但是局限性也比较大，后面看看能不能优化一下，如果可以的话争取开源出来。</p><p>这一部分主要就是将生成的静态网页提交到<code>gh-pages</code>分支上。</p><figure class="highlight yml"><figcaption><span>azure-pipelines.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">doc-source</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;ubuntu-latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">group:</span> <span class="string">github</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">UseNode@1</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">checkLatest:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Npm@1</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;custom&#x27;</span></span><br><span class="line">    <span class="attr">customCommand:</span> <span class="string">&#x27;install hexo-cli -g&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Npm@1</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;custom&#x27;</span></span><br><span class="line">    <span class="attr">customCommand:</span> <span class="string">&#x27;install --pure-lockfile&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Npm@1</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;custom&#x27;</span></span><br><span class="line">    <span class="attr">customCommand:</span> <span class="string">&#x27;install --pure-lockfile&#x27;</span></span><br><span class="line">    <span class="attr">workingDir:</span> <span class="string">&#x27;themes/hexo-theme-doc/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">CmdLine@2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line">      <span class="string">cd</span> <span class="string">public</span></span><br><span class="line">      <span class="string">touch</span> <span class="string">.nojekyll</span></span><br><span class="line">      <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;$(EMAIL)&quot;</span></span><br><span class="line">      <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;$(USER)&quot;</span></span><br><span class="line">      <span class="string">git</span> <span class="string">init</span></span><br><span class="line">      <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">      <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">update</span></span><br><span class="line">      <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">https://$(TOKEN)@github.com/MonoLogueChi/Dplayer.Danmaku.git</span> <span class="string">master:gh-pages</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提交到doc-source分支以后，会自动生成静态网页，然后提交到<code>gh-pages</code>分支上，其中<code>EMAIL</code>、<code>USER</code>、<code>TOKEN</code>变量都设置再<code>github</code>组中，详细设置方法可以看<a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&amp;tabs=yaml%2Cbatch">变量</a>和<a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&amp;tabs=yaml">变量组</a>相关文档。</p><p>再说一下我的博客，因为除了GitHub Pages，还需要提交到又拍云上，还有百度推送，这样就又多了两个步骤</p><figure class="highlight yml"><figcaption><span>azure-pipelines.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;ubuntu-latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">group:</span> <span class="string">github</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">group:</span> <span class="string">upyun</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">group:</span> <span class="string">search</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">UseNode@1</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">checkLatest:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Npm@1</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;custom&#x27;</span></span><br><span class="line">    <span class="attr">customCommand:</span> <span class="string">&#x27;install hexo-cli -g&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Npm@1</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;custom&#x27;</span></span><br><span class="line">    <span class="attr">customCommand:</span> <span class="string">&#x27;install --pure-lockfile&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">CmdLine@2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line">      <span class="comment">#百度搜索推送Token</span></span><br><span class="line">      <span class="string">sed</span> <span class="string">-i</span> <span class="string">&#x27;s/your_token/$(BAIDU_PUSH_TOKEN)/g&#x27;</span> <span class="string">./_config.yml</span></span><br><span class="line">      <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#又拍云同步</span></span><br><span class="line">      <span class="string">wget</span> <span class="string">-O</span> <span class="string">upx</span> <span class="string">http://collection.b0.upaiyun.com/softwares/upx/upx-linux-amd64-v0.2.4</span></span><br><span class="line">      <span class="string">chmod</span> <span class="string">+x</span> <span class="string">upx</span></span><br><span class="line">      <span class="string">./upx</span> <span class="string">login</span> <span class="string">$(BUCKET)</span> <span class="string">$(OPERATOR)</span> <span class="string">$(OPERATOR_PASSWORD)</span></span><br><span class="line">      <span class="string">./upx</span> <span class="string">sync</span> <span class="string">public/</span> <span class="string">/</span> <span class="string">--delete</span></span><br><span class="line">      <span class="string">./upx</span> <span class="string">logout</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">#GitHub Pages</span></span><br><span class="line">      <span class="string">cd</span> <span class="string">public</span></span><br><span class="line">      <span class="string">touch</span> <span class="string">.nojekyll</span></span><br><span class="line">      <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;$(EMAIL)&quot;</span></span><br><span class="line">      <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;$(USER)&quot;</span></span><br><span class="line">      <span class="string">git</span> <span class="string">init</span></span><br><span class="line">      <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">      <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">update</span></span><br><span class="line">      <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">https://$(TOKEN)@github.com/MonoLogueChi/blog.xxwhite.com.git</span> <span class="string">master:gh-pages</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前段时间给我的一个项目上了Azure DevOps 的 Pipelines，顺带着就给那个项目的文档和这个博客一起换上了 Azure 的 CI。&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站笔记" scheme="https://blog.xxwhite.com/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
    <category term="涨姿势" scheme="https://blog.xxwhite.com/tags/%E6%B6%A8%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云使用自定义镜像</title>
    <link href="https://blog.xxwhite.com/2019/custom-mirror.html"/>
    <id>https://blog.xxwhite.com/2019/custom-mirror.html</id>
    <published>2019-10-02T22:15:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现服务器上一些服务已经没用了，趁着十一假期整理一下，顺便研究一下腾讯云怎么使用自定义的镜像安装系统。</p><span id="more"></span><p>不得不吐槽一下，腾讯云的官方镜像实在是太少了，不像阿里那么丰富，对个人来说也许不怎么友好，但是对企业来说那就无所谓了。</p><h2 id="工具">工具<a class="header-anchor" href="#工具">➴</a></h2><ul><li>系统：win 10（家庭版不行）</li><li>虚拟机：Hyper-V</li><li>Linux镜像文件（以Debian10为例）</li></ul><h2 id="文档">文档<a class="header-anchor" href="#文档">➴</a></h2><p>首先先看一下腾讯云的<a href="https://cloud.tencent.com/document/product/213/4942">官方文档</a>。如果是不太熟悉虚拟化的朋友读下来，可能就是感觉云里雾里，不知道在讲什么。下面我就用一种很简单的方法去操作一边，演示怎么使用自定义的镜像。</p><h2 id="创建快照">创建快照<a class="header-anchor" href="#创建快照">➴</a></h2><p>数据才是最重要的，使用自定义镜像装系统之前一定要创建快照。这一步你可以在后面制作完镜像以后再去做，但是重装系统之前一定要做。</p><p><img src="/assets/img/2019/0.png" alt="创建快照"></p><h2 id="基本要求">基本要求<a class="header-anchor" href="#基本要求">➴</a></h2><p>还是看文档，确定一下基本要求，要满足这些要求才可以正常制作镜像。</p><p><img src="/assets/img/2019/1.png" alt="镜像要求"></p><p>排除操作系统不说，镜像格式需要注意一下，这次我打算选用VHD格式。<br>文件系统，不能使用GPT分区，这个一定要注意，这是一个坑。</p><h2 id="具体过程">具体过程<a class="header-anchor" href="#具体过程">➴</a></h2><h3 id="创建虚拟机">创建虚拟机<a class="header-anchor" href="#创建虚拟机">➴</a></h3><p><img src="/assets/img/2019/3.png" alt="创建虚拟机"></p><p>一定要注意，创建虚拟机要选择<strong>第一代</strong>，还记得前面提到的条件吗，虚拟硬盘要MBR分区表，不能使用GPT分区表。</p><h3 id="安装系统">安装系统<a class="header-anchor" href="#安装系统">➴</a></h3><p>创建完虚拟机之后挂载已经下载好的镜像文件，由于Debian10镜像在第一代虚拟机里有问题，所以我用的Live版的Debian10镜像。<br>附Debian10下载地址：<a href="https://mirrors.cloud.tencent.com/debian-cd">https://mirrors.cloud.tencent.com/debian-cd/</a> （腾讯源，下载速度还可以）。</p><p><img src="/assets/img/2019/4.png" alt="安装系统"></p><h3 id="必要的配置">必要的配置<a class="header-anchor" href="#必要的配置">➴</a></h3><p>这一部分请详细阅读前面的官方文档，如果文档和本文有冲突，请以官方文档为准。</p><ul><li>安装一些常用的工具，比如 <code>sudo</code>、<code>vim</code>等；</li><li>更新系统；</li><li>安装<code>cloud-init</code>，这一部分详见：<a href="https://cloud.tencent.com/document/product/213/12587">https://cloud.tencent.com/document/product/213/12587</a></li></ul><p>这里重点说一下安装<code>cloud-init</code>，我选择的是自动安装方式：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install cloud-<span class="keyword">init</span></span><br></pre></td></tr></table></figure><p>Debian不需要修改<code>/etc/cloud/cloud.cfg</code>就可以直接使用，其他Linux没有尝试过。当然如果你愿意改那就改，比如说改一下镜像源等等，但是我相信如果你能知道怎么修改，就已经不需要看本文了。</p><p>后面几步操作我也不太明白具体是为了什么（仅Debian和Ubuntu需要，其他系统不清楚），反正按照官方要求删几个文件，改一个文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cloud-init init --local</span><br><span class="line">rm -rf <span class="regexp">/var/</span>lib/cloud</span><br><span class="line"></span><br><span class="line">rm -rf <span class="regexp">/etc/</span>network<span class="regexp">/interfaces.d/</span><span class="number">50</span>-cloud-init.cfg</span><br></pre></td></tr></table></figure><p>修改<code>/etc/network/interfaces</code>为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file describes the network interfaces available on your system</span></span><br><span class="line"><span class="comment"># and how to activate them. For more information, see interfaces(5).</span></span><br><span class="line">source <span class="regexp">/etc/</span>network<span class="regexp">/interfaces.d/</span>*</span><br></pre></td></tr></table></figure><p>也就是把后面的那部分删掉。</p><p>修改完之后直接关机。</p><h3 id="转换虚拟硬盘格式">转换虚拟硬盘格式<a class="header-anchor" href="#转换虚拟硬盘格式">➴</a></h3><p>Hyper-V虚拟机的默认硬盘格式是VHDX，需要转换成VHD，Hyper-V虚拟机管理器本身就有这个功能，所以不需要再去额外安装其他的软件了。</p><p>如果有检查点的话，需要先删除检查点，右键点击然后选删除就可以了，不删除检查点是不能操作虚拟硬盘的。</p><p>在虚拟机设置里选中虚拟硬盘，转换之前先压缩一下（虽然什么用也没有，心理安慰）。</p><p><img src="/assets/img/2019/5.png" alt="转换格式"></p><p><img src="/assets/img/2019/6.png" alt="转换格式"></p><p><img src="/assets/img/2019/7.png" alt="转换格式"></p><p><img src="/assets/img/2019/8.png" alt="转换格式"></p><p>保存好导出的虚拟硬盘，等下需要上传这个东西。</p><h3 id="导入自定义镜像">导入自定义镜像<a class="header-anchor" href="#导入自定义镜像">➴</a></h3><p>按照<a href="https://cloud.tencent.com/document/product/213/4945#.E5.AF.BC.E5.85.A5.E6.AD.A5.E9.AA.A4">官方文档</a>给出的导入步骤，一部一部走下来就可以了。</p><p>记住上传的文件一定要有<code>公有读</code>权限。</p><p><img src="/assets/img/2019/9.png" alt="转换格式"></p><p>我暂时不能确定是否是必须上传的<code>OOS</code>上，其他的链接没有尝试过，如果有大佬愿意尝试的话，可以试一下上传到其他服务器，看看分享出来的链接能不能用。</p><h2 id="安装系统-2">安装系统<a class="header-anchor" href="#安装系统-2">➴</a></h2><p>这一步没啥说的，常规操作，记得一定要先创建快照，一定要先做好备份。</p><p>装完系统以后再修改一下软件源，改为腾讯云的好了，例如Debian10就修改为：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.cloud.tencent.<span class="keyword">com</span>/debian buster main contrib non-free</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.cloud.tencent.<span class="keyword">com</span>/debian buster-updates main contrib non-free</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.cloud.tencent.<span class="keyword">com</span>/debian buster-backports main contrib non-free</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.cloud.tencent.<span class="keyword">com</span>/debian buster-proposed-updates main contrib non-free</span><br><span class="line">#deb-src http<span class="variable">s:</span>//mirrors.cloud.tencent.<span class="keyword">com</span>/debian buster main contrib non-free</span><br><span class="line">#deb-src http<span class="variable">s:</span>//mirrors.cloud.tencent.<span class="keyword">com</span>/debian buster-updates main contrib non-free</span><br><span class="line">#deb-src http<span class="variable">s:</span>//mirrors.cloud.tencent.<span class="keyword">com</span>/debian buster-backports main contrib non-free</span><br><span class="line">#deb-src http<span class="variable">s:</span>//mirrors.cloud.tencent.<span class="keyword">com</span>/debian buster-proposed-updates main contrib non-free</span><br><span class="line"></span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.cloud.tencent.<span class="keyword">com</span>/debian-security buster/updates main</span><br><span class="line">#deb-src http<span class="variable">s:</span>//mirrors.cloud.tencent.<span class="keyword">com</span>/debian-security buster/updates main</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近发现服务器上一些服务已经没用了，趁着十一假期整理一下，顺便研究一下腾讯云怎么使用自定义的镜像安装系统。&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站笔记" scheme="https://blog.xxwhite.com/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>代理和异地组网</title>
    <link href="https://blog.xxwhite.com/2019/proxy1.html"/>
    <id>https://blog.xxwhite.com/2019/proxy1.html</id>
    <published>2019-09-13T13:48:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>关于搭建代理和异地组网的一些想法。</p><span id="more"></span><p>异地组网暂且不说，先说一下代理问题，因为公司有一些特殊需求，需要使用代理上网。因为我住在学校里，网络算是校园网，可以使用学校的一些资源，公司其他同事有的时候也需要用一下，所以就需要搭建一个代理。</p><p>先说一下基本情况，宿舍是一百兆电信宽带，上下不对等。公司是一百兆电信宽带，上下对等。再说一下可以利用的资源，宿舍有台小服务器，还在上面搭建了一个软路由，公司有台群晖。</p><h2 id="第一种方案">第一种方案<a class="header-anchor" href="#第一种方案">➴</a></h2><p>我最开始的构想是：</p><p><img src="/assets/img/2019/20190911141506882_29873.png" alt="v2ray通道"></p><p>在宿舍的服务器和公司的群晖之间创建一个vmess连接，然后在公司就可以通过群晖代理上网了。</p><h2 id="第二种方案">第二种方案<a class="header-anchor" href="#第二种方案">➴</a></h2><p>后来我就在想，为什么不把宿舍的服务器直接搞成一个代理服务器，然后再公司使用正向代理上网呢？大概就是下面这张图这样：</p><p><img src="/assets/img/2019/20190911143605977_29640.png" alt="https代理"></p><p>这里使用了Caddy做正向代理，需要插件 <code>http.forwardproxy</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>a.b.com &#123;</span><br><span class="line">    gzip</span><br><span class="line">    tls <span class="regexp">/xxx.pem /</span>xxx.key</span><br><span class="line">    forwardproxy &#123;</span><br><span class="line">        basicauth user password</span><br><span class="line">        hide_ip</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器使用插件 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">SwitchyOmega</a>，就可以使用搭建好的代理去上网了。</p><p>宿舍的路由器上还加了一层透明代理，这样通过宿舍的服务器正向代理上网，顺便还能实现留学上网（我也不知道留学上网这个名词是怎么来的 ╮(╯-╰)╭ ）。</p><p>因为某些特殊的原因，具体配置文件和搭建方法我就不贴出来了，反正网上都有，稍微思考一下就能想出来怎么搞。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于搭建代理和异地组网的一些想法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站笔记" scheme="https://blog.xxwhite.com/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
    <category term="随便水水" scheme="https://blog.xxwhite.com/tags/%E9%9A%8F%E4%BE%BF%E6%B0%B4%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>RSS+RSSHub连接世界</title>
    <link href="https://blog.xxwhite.com/2019/rss-rsshub.html"/>
    <id>https://blog.xxwhite.com/2019/rss-rsshub.html</id>
    <published>2019-08-08T23:23:46.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>都说现在是一个信息爆炸的时代，我需要一个信息聚合入口。</p><p>一说到信息聚合，第一个想到的就是RSS。这都9102年了，还在用RSS的人不多了，而我就算是一个。</p><span id="more"></span><p>以前一直用 InoReader ，但是这货是越用越慢，最后终于忍不了那速度了，然后就是有一段时间彻底放弃了RSS。而让我捡回来的原因，可能是那改版之后辣鸡的微信公众号阅读模式吧。</p><p>我选择的RSS服务器是 <a href="https://miniflux.app/">Miniflux</a> ，至于为什么没有选择比较热门的 Tiny ，是因为我被那货坑了之后才换的 Miniflux。</p><h2 id="Miniflux-安装过程">Miniflux 安装过程<a class="header-anchor" href="#Miniflux-安装过程">➴</a></h2><p>首先是要安装 <a href="https://www.postgresql.org/">PostgreSQL</a>，可以参考 <a href="https://dandoc.u2sb.top/other/pgsql.html">https://dandoc.u2sb.top/other/pgsql.html</a>。记得同时安装一下<code>contrib</code>下的工具。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> contrib</span><br><span class="line"><span class="keyword">make</span></span><br><span class="line">sudo <span class="keyword">make</span> install</span><br></pre></td></tr></table></figure><p>下载已经编译好的<a href="https://github.com/miniflux/miniflux/releases">二进制文件</a>，选择Linux amd64 版本就可以，至于自动启动，进程守护和配置文件打算自己管理。</p><p>下载完成之后解压上传，然后授权可执行权限</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">chmod</span> +x miniflux-linux-amd<span class="number">64</span></span><br></pre></td></tr></table></figure><p>创建配置文件，并且写入配置</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> miniflux.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>写入内容</p><figure class="highlight toml"><figcaption><span>miniflux.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LOG_DATE_TIME</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">ARCHIVE_READ_DAYS</span>=<span class="number">360</span></span><br><span class="line"><span class="attr">LISTEN_ADDR</span>=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">11200</span></span><br><span class="line"><span class="attr">DATABASE_URL</span>=user=user password=password dbname=miniflux sslmode=disable</span><br></pre></td></tr></table></figure><p>更多配置可以看这里：<a href="https://miniflux.app/docs/configuration.html">https://miniflux.app/docs/configuration.html</a>。</p><p>数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su - postgres</span><br><span class="line">createuser -P miniflux</span><br><span class="line"><span class="keyword">createdb</span> -O miniflux miniflux</span><br><span class="line">psql miniflux</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTENSION</span> hstore</span><br></pre></td></tr></table></figure><p>返回普通用户模式</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./miniflux-linux-amd64</span> -migrate</span><br><span class="line"><span class="string">./miniflux-linux-amd64</span> -create-admin</span><br></pre></td></tr></table></figure><p>然后用命令行测试一下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/miniflux-linux-amd64 -c ./mi</span>niflux.conf</span><br></pre></td></tr></table></figure><p>如果能正常启动的话，那就进行下一步吧，如果不能正常启动，反回去排查问题。</p><p>如果方便的话，这里可以测试一下能不能正常登录。</p><p>启动管理和进程守护，统一使用 <code>pm2</code> ，在已经安装node和npm的情况下，安装pm2</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install pm<span class="number">2</span> -g</span><br></pre></td></tr></table></figure><p>创建配置文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vim</span> miniflux.yml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>miniflux.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">miniflux</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">miniflux-linux-amd64</span></span><br><span class="line">  <span class="attr">cwd:</span> <span class="string">/www/go/miniflux</span></span><br><span class="line">  <span class="attr">autorestart:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">args:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;-c&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;/www/go/miniflux/miniflux.conf&#x27;</span></span><br><span class="line">  <span class="attr">env:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">error_file:</span> <span class="string">/www/go/miniflux/log/error.log</span></span><br><span class="line">  <span class="attr">out_file:</span> <span class="string">/www/go/miniflux/log/out.log</span></span><br><span class="line">  <span class="attr">merge_logs:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>记得把里面的路径换成你自己的路径，然后启动就可以了</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 <span class="literal">start</span> miniflux.yml</span><br><span class="line">pm2 save</span><br></pre></td></tr></table></figure><p>反向代理服务器我用的是caddy，当然nginx或者apache也是没问题的。</p><figure class="highlight plain"><figcaption><span>rss.caddyfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;x.y.com &#123;</span><br><span class="line">    gzip</span><br><span class="line">    root &#x2F;www&#x2F;wwwroot&#x2F;rss</span><br><span class="line">    tls &#123;</span><br><span class="line">        load    &#x2F;www&#x2F;caddy&#x2F;ssl&#x2F;star.xxwhite.com</span><br><span class="line">    &#125;</span><br><span class="line">    proxy &#x2F; http:&#x2F;&#x2F;localhost:11200</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成这些之后再测试一下能不能用就可以了，上面涉及到的知识不难，有不懂的直接百度就行，基本都能找到答案，反正这一整套东西我很快就上手了。</p><h2 id="RSSHub-安装过程">RSSHub 安装过程<a class="header-anchor" href="#RSSHub-安装过程">➴</a></h2><p><a href="https://docs.rsshub.app/">RSSHub</a>安装那就更简单了，直接clone仓库下来</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/DIYgod/RSSHub.git -b <span class="keyword">master</span> <span class="title">--depth</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>创建环境变量，并且写入</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .<span class="keyword">env</span></span><br></pre></td></tr></table></figure><figure class="highlight toml"><figcaption><span>.env</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CACHE_TYPE</span>=redis</span><br><span class="line"><span class="attr">CACHE_EXPIRE</span>=<span class="number">600</span></span><br><span class="line"><span class="attr">CACHE_CONTENT_EXPIRE</span>=<span class="number">3600</span></span><br><span class="line"><span class="attr">PORT</span>=<span class="number">1200</span></span><br></pre></td></tr></table></figure><p>然后再从caddy创建一个反向代理（可选项）</p><figure class="highlight plain"><figcaption><span>rsshub.caddyfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;x.y.com &#123;</span><br><span class="line">    gzip</span><br><span class="line">    root &#x2F;www&#x2F;wwwroot&#x2F;rss</span><br><span class="line">    tls &#123;</span><br><span class="line">        load    &#x2F;www&#x2F;caddy&#x2F;ssl&#x2F;star.xxwhite.com</span><br><span class="line">    &#125;</span><br><span class="line">    proxy &#x2F; http:&#x2F;&#x2F;localhost:1120</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接用pm2命令启动</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 start lib/<span class="built_in">index</span>.js --<span class="keyword">name</span> rsshub</span><br><span class="line">pm2 <span class="keyword">save</span></span><br></pre></td></tr></table></figure><p>然后就可以直接订阅啦。</p><h2 id="示例">示例<a class="header-anchor" href="#示例">➴</a></h2><p>同一服务器上可以直接使用内网</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1200</span><span class="regexp">/bilibili/u</span>ser<span class="regexp">/dynamic/</span><span class="number">257851644</span></span><br><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1200</span><span class="regexp">/bilibili/u</span>ser<span class="regexp">/dynamic/</span><span class="number">280793434</span></span><br></pre></td></tr></table></figure><p>更多订阅选项可以看 <a href="https://docs.rsshub.app/">https://docs.rsshub.app/</a></p><h2 id="移动端">移动端<a class="header-anchor" href="#移动端">➴</a></h2><p>上面做了这么多，都是为了信息聚合，要说方便阅读多话，一定是在手机上</p><p>推荐两个安卓客户端</p><p><a href="https://play.google.com/store/apps/details?id=com.isaiasmatewos.readably">Readably - RSS</a><br><a href="https://play.google.com/store/apps/details?id=com.seazon.feedme">FeedMe</a></p><p>这两款软件都可以使用 Fever API 连接 Miniflux ，我现在就是 Readably-RSS &lt;------&gt; Miniflux &lt;------&gt; RSSHub &lt;------&gt; 互联网</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;都说现在是一个信息爆炸的时代，我需要一个信息聚合入口。&lt;/p&gt;
&lt;p&gt;一说到信息聚合，第一个想到的就是RSS。这都9102年了，还在用RSS的人不多了，而我就算是一个。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随便水水" scheme="https://blog.xxwhite.com/tags/%E9%9A%8F%E4%BE%BF%E6%B0%B4%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>域名解析的MX和CNAME记录冲突问题的解决</title>
    <link href="https://blog.xxwhite.com/2019/mx-and-cname.html"/>
    <id>https://blog.xxwhite.com/2019/mx-and-cname.html</id>
    <published>2019-07-14T14:48:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>最近又遇到了MX记录和CNAME记录冲突的问题，简单记录一个解决办法，方便以后参考一下</p><span id="more"></span><p>CloudXNS免费业务要关停了，这样就不得不把我的域名迁出去。我选择的是以前用过的DNSPOD，这次迁移成本其实不大，把解析记录从CloudXNS导出到excel中，然后复制粘贴替换就可以轻松转化成DNSPOD的格式，再导入到DNSPOD就可以了，当你看到这篇文章时，已经迁移完成了。</p><p>说一下中间遇到的一个比较麻烦的问题吧，因为我有两个域名做了域名邮箱，这样MX记录就必须要有，但是我这两个域名同时也需要可以正常访问我的网站，网站用了CDN，这样就必须要有CNAME记录，但是正常来说，CNAME记录和MX记录时冲突的。</p><table><thead><tr><th>主机记录</th><th>记录类型</th><th>记录值</th></tr></thead><tbody><tr><td>@</td><td>MX</td><td><a href="http://mxbiz1.qq.com">mxbiz1.qq.com</a>.</td></tr><tr><td>@</td><td>CNAME</td><td>CDN的CNAME记录</td></tr></tbody></table><p>其实@记录解析过去，也是会301跳转到blog记录上的。听起来和显性URL功能一样，但是显性URL也会和MX记录冲突。</p><p>CloudXNS有一个独有的Link记录可以解决这个问题，当时也正是看重了这个功能，才把域名解析迁移到CloudXNS上的。现在换到了DNSPOD上，没有了这个功能了，无奈只能想其他的解决办法了。</p><p>灵机一动，想到我还有一台跑各种服务的VPS，那就在VPS上做个301吧。</p><p>首先把<code>@</code>的A记录记录解析到VPS的IP上，然后在NGINX上配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$host</span> ~ <span class="string">&#x27;^xxwhite.com&#x27;</span>)&#123;</span><br><span class="line">    return <span class="number">301</span> https:<span class="regexp">//</span>blog.xxwhite.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$host</span> ~ <span class="string">&#x27;^xxwhite.com&#x27;</span>)&#123;</span><br><span class="line">    return <span class="number">302</span> https:<span class="regexp">//</span>blog.xxwhite.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就解决了前面提到的问题。</p><p>那如果我不想跳转的话，要怎么办？那就用反向代理吧，如果访问量特别大的话，反向代理肯定时不合适的，但这也是没有办法的办法了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近又遇到了MX记录和CNAME记录冲突的问题，简单记录一个解决办法，方便以后参考一下&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站笔记" scheme="https://blog.xxwhite.com/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Unity WebGL平台开发遇到的坑</title>
    <link href="https://blog.xxwhite.com/2019/unity-webgl-keng.html"/>
    <id>https://blog.xxwhite.com/2019/unity-webgl-keng.html</id>
    <published>2019-04-29T20:48:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>最近在用 Unity 做一个 WebGL 平台的项目，开发过程中遇到了各种各样的坑，这里简单记录一下，以免以后再踩。</p><span id="more"></span><h2 id="WebRequest-请求（异步的问题）">WebRequest 请求（异步的问题）<a class="header-anchor" href="#WebRequest-请求（异步的问题）">➴</a></h2><p>首先是 Http 请求的问题，我最开始想的是，直接用 C#里的写法，编辑器里测试毫无问题，但是一打包出来就不行，会报出 <code>SystemException: Thread creation failed.</code> 的错误，无奈只能用 Unity 自己的 <code>UnityWebRequest</code>。</p><p>错误的示范 0：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WrongGet</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (HttpClient httpClient = <span class="keyword">new</span> HttpClient())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> text = httpClient.GetStringAsync(<span class="string">&quot;https://www.baidu.com/艹&quot;</span>).Result;</span><br><span class="line">        Debug.Log(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误的示范 1：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WrongGet</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (WebClient webClient = <span class="keyword">new</span> WebClient())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> text = webClient.DownloadString(<span class="string">&quot;https://www.baidu.com/艹&quot;</span>);</span><br><span class="line">        Debug.Log(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写后果会比上面这种更严重，整个程序直接崩溃</p><p><img src="https://s2.ax1x.com/2019/04/29/E1c9i9.png" alt="后果"></p><p>正确的示范：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IEnumerator <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> webRequest = UnityWebRequest.Get(<span class="string">&quot;https://www.baidu.com/艹&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> webRequest.SendWebRequest();</span><br><span class="line">        <span class="keyword">if</span> (!webRequest.isNetworkError &amp;&amp; !webRequest.isHttpError)</span><br><span class="line">            Debug.Log(webRequest.downloadHandler.text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉这是异步的问题，因为 js 是单线程的。</p><p><strong>如果确定要打包 WebGL 平台，就不要用异步，用协程比较稳，另外，尽量用 Unity 自己的那一套东西</strong></p><h2 id="SSL-证书">SSL 证书<a class="header-anchor" href="#SSL-证书">➴</a></h2><p>这个不知道是什么鬼问题，Unity 编辑器不支持 ECC 证书？还是其他什么问题，测试是在我的服务器上测试的，我的服务器配的是 ECC 证书，最开始在我的电脑上是不支持的，一直报错，后来不知道发生了什么，竟然莫名奇妙的支持了，这件事也就网了，但是后面代码合并的时候，到我同事的电脑上，又出现了这个问题，没办法，只能暂时先用 http 顶着了，后面再说申请 RSA 证书的事。</p><p>到后面打包出来测试的时候，又出问题了，里面的资源已经数据请求，都是用的 http 协议，但是我最后访问页面的时候，用的是 https 协议，https 页面里，会阻断不安全的 http 请求，没办法，RSA 证书的事提上日程，先搞定。</p><p><strong>Unity Editor 中发起 https 请求，如果后端是 RSA 证书没问题，后端是 ECC 证书可能会出问题</strong></p><h2 id="JSON">JSON<a class="header-anchor" href="#JSON">➴</a></h2><p>接下来是 JSON 序列化和反序列化，一提到 JSON，最先想到的是 <code>JSON.NET库</code>，也就是<code>Newtonsoft.Json</code>库。用这个没毛病，从 nuget 上下载下来，然后把 dll 文件拖进去，OK。在编辑器里一切都没问题，但是一打包成网页就出问题。</p><p>什么问题呢？写一段正常的代码</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> json = <span class="string">&quot;json字符串&quot;</span>;</span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dic = JsonConvert.DeserializeObject&lt;Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;(json);</span><br></pre></td></tr></table></figure><p>这样没毛病，一切 OK，但是要按照下面这样写，就会踩雷</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> code &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dic <span class="title">DeDic</span>(<span class="params"><span class="built_in">string</span> json</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;Dic&gt;(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是按照上面这样写，恭喜你，打包出来的东西肯定报错，反序列化得到的全都是 null。</p><p>而且网上搜索的话，很难搜到原因，貌似遇到这个问题的人并不多？没办法，求着后端小哥哥帮忙改接口，把接口全都写成 key-value 的形式就可以用了。</p><p>为什么会出现这个问题？在原本都已经放弃的时候，无意中发现了这个插件 <a href="https://assetstore.unity.com/packages/tools/input-management/json-net-for-unity-11347">JSON.NET FOR UNITY</a>，在这个插件的介绍里找到了答案</p><blockquote><p>While many in the Unity Community have succeeded in getting JSON .NET to work for their games, it has never worked properly with iOS or IL2CPP. The iOS errors are due to incompatibilities with AOT (Ahead of Time Compilation) that is used by Mono/IL2CPP in iOS.</p></blockquote><p>大致的意思就是，<a href="http://JSON.NET">JSON.NET</a> 在 iSO 平台上因为 ATO 的问题不能直接用，我想 WebGL 应该也是类似的问题吧，看着这个插件的支持平台上，写了 WebGL，抱着试一试的想法尝试了一下，还真的可以，行得通，这个坑算是解决了，反序列化 Json 不能直接用 <a href="http://JSON.NET">JSON.NET</a> 库，要用 Unity 商店里的那个插件。</p><p><strong>在 Unity 里，非桌面平台，尽量少用 nuget 仓库里的东西，如果要用，也要先确保 Unity 不同平台的支持情况，尽量用 Unity 商店里的插件，因为 Unity 商店里的插件一般都会注明平台支持情况</strong></p><blockquote><p>更新 推荐使用 <a href="https://github.com/neuecc/Utf8Json">Utf8Json</a> 更快，但相比 <a href="http://Json.Net">Json.Net</a> 缺少 JArray 和 JObject 等特性，推荐使用 <a href="https://github.com/jilleJr/Newtonsoft.Json-for-Unity">Newtonsoft.Json-for-Unity</a>，版本更新，功能更多。</p></blockquote><h2 id="跨域">跨域<a class="header-anchor" href="#跨域">➴</a></h2><p>相比其他问题，这个问题已经不能叫问题了，只要稍微有点 Web 开发经要就能解决，因为所有请求都是从 js 里发出的，所以很容易遇到跨域问题，只要加上对应的返回头就可以了 <code>Access-Control-Allow-Origin</code>。</p><p><strong>Unity 打包 WebGL 平台文件时，要尤其注意跨域问题，一定要提前和后端讲明</strong></p><h2 id="AB-包">AB 包<a class="header-anchor" href="#AB-包">➴</a></h2><p>相比之下，AB 包就没什么坑了，中规中矩，常规用法就可以了，建议按场景打包，虽然会有重复资源，但是操作简单啊，如果自己手动分包的话，麻烦的要死。</p><p>唯一要注意的一点就是 IL2CPP 编译时代码剥离的问题，这一点随便一百度，都会有很多教程告诉你怎么做。</p><h2 id="音频">音频<a class="header-anchor" href="#音频">➴</a></h2><p>我们使用了网络音频，所以要注意网络音频的格式，打包出来的网页网络音频要用 wav 格式的，而在客户端可以使用 ogg 格式。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IEnumerator <span class="title">PlayWebAudio</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">float</span> d</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR || !UNITY_WEBGL</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> www = UnityWebRequestMultimedia.GetAudioClip(url, AudioType.OGGVORBIS))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> UNITY_WEBGL</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> www = UnityWebRequestMultimedia.GetAudioClip(url, AudioType.WAV))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> www.SendWebRequest();</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params">d</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (www.isNetworkError || www.isHttpError)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(www.error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> clip = DownloadHandlerAudioClip.GetContent(www);</span><br><span class="line">            PlayAudioClip(clip);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Unity 在使用网络资源的时候，要注意音频格式，不同平台的支持情况不一样，不确定的时候就用 wav 格式吧</strong></p><h2 id="程序内与网页传参">程序内与网页传参<a class="header-anchor" href="#程序内与网页传参">➴</a></h2><p>这个看了半天也没搞懂真正的用法，只能写个简单点的函数</p><p>先说明一下，能百度到的东西，很多都是过时的，而且大家都是你抄我，他抄你，抄来抄去，没啥意思。我找了一圈，就发现一篇是比较实用的，而且写得也挺易懂的 <a href="https://blog.csdn.net/beihuanlihe130/article/details/76214551">链接</a></p><p>最好的工具是 Unity 的官方文档，这个文档写的真不错，很多方法都有很详细的示例 <a href="https://docs.unity3d.com/Manual/webgl-interactingwithbrowserscripting.html">文档</a></p><p>因为以前在 UE4 上也研究过这个东西，所以对 Emscripten 也有一定的了解。看一下文档就大致该知道怎么做了。</p><p>首先是在 <code>Plugins目录下</code> 创建一个 <code>.jslib</code> 文件，名字叫什么都无所谓，然后在里面写一些函数，尽量简单一点，越简单越好，函数的形式可以参考官方文档，要注意，官方文档给的这几个示例函数都是比较具有代表性的，基本上你能用到的东西，都已经告诉你该怎么处理了，传参，返回值，资源处理，该有的都有了。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mergeInto(LibraryManager.library, &#123;</span><br><span class="line">  <span class="attribute">Hello</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.alert(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attribute">HelloString</span>: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.alert(Pointer_stringify(str));</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attribute">PrintFloatArray</span>: <span class="function"><span class="keyword">function</span> (<span class="params">array, size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">    <span class="built_in">console</span>.log(HEAPF32[(array &gt;&gt; <span class="number">2</span>) + i]);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attribute">AddNumbers</span>: <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attribute">StringReturnValueFunction</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> returnStr = <span class="string">&quot;bla&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> bufferSize = lengthBytesUTF8(returnStr) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> buffer = _malloc(bufferSize);</span><br><span class="line">    stringToUTF8(returnStr, buffer, bufferSize);</span><br><span class="line">    <span class="keyword">return</span> buffer;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attribute">BindWebGLTexture</span>: <span class="function"><span class="keyword">function</span> (<span class="params">texture</span>) </span>&#123;</span><br><span class="line">    GLctx.bindTexture(GLctx.TEXTURE_2D, GL.textures[texture]);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在需要调用的时候，这样写</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NewBehaviourScript</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">&quot;__Internal&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Hello</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">&quot;__Internal&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">HelloString</span>(<span class="params"><span class="built_in">string</span> str</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">&quot;__Internal&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">PrintFloatArray</span>(<span class="params"><span class="built_in">float</span>[] array, <span class="built_in">int</span> size</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">&quot;__Internal&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">AddNumbers</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">&quot;__Internal&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">string</span> <span class="title">StringReturnValueFunction</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">&quot;__Internal&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">BindWebGLTexture</span>(<span class="params"><span class="built_in">int</span> texture</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        Hello();</span><br><span class="line"></span><br><span class="line">        HelloString(<span class="string">&quot;This is a string.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">float</span>[] myArray = <span class="keyword">new</span> <span class="built_in">float</span>[<span class="number">10</span>];</span><br><span class="line">        PrintFloatArray(myArray, myArray.Length);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> result = AddNumbers(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">        Debug.Log(result);</span><br><span class="line"></span><br><span class="line">        Debug.Log(StringReturnValueFunction());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> texture = <span class="keyword">new</span> Texture2D(<span class="number">0</span>, <span class="number">0</span>, TextureFormat.ARGB32, <span class="literal">false</span>);</span><br><span class="line">        BindWebGLTexture(texture.GetNativeTextureID());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例，能看懂的人肯定是一看就懂，看不懂的估计还要再补一下基础知识，仿照这个示例，咱们自己来写一个</p><p>jslib：</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mergeInto(<span class="type">LibraryManager</span>.library, &#123;</span><br><span class="line">  <span class="type">GetUrlParam</span>: function (str) &#123;</span><br><span class="line">    <span class="keyword">var</span> paraName = <span class="type">Pointer_stringify</span>(str);</span><br><span class="line">    <span class="keyword">var</span> <span class="literal">result</span> = <span class="type">GetUrlParamFun</span>(paraName);</span><br><span class="line">    <span class="keyword">var</span> bufferSize = lengthBytesUTF8(<span class="literal">result</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> buffer = _malloc(bufferSize);</span><br><span class="line">    stringToUTF8(<span class="literal">result</span>, buffer, bufferSize);</span><br><span class="line">    <span class="keyword">return</span> buffer;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>简单分析一下，有个方法叫<code>GetUrlParam</code>，带有一个参数，已经确定需要传字符串进来，所以需要使用<code>Pointer_stringify()</code>方法，注意传参是将内容写入内存，使用指针去指的所以要用<code>Pointer_stringify</code>，再下面，调用一个叫<code>GetUrlParamFun</code>的函数，获取返回值，再后面就是将结果返回给 Unity，也是将结果写入内存，然后用指针去指。（我指针理解的不够透彻，上面这段话难免会有一些问题）</p><p>需要在网页中插入一段 js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetUrlParamFun</span>(<span class="params">paraName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">document</span>.location.toString();</span><br><span class="line">    <span class="keyword">var</span> arrObj = url.split(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (arrObj.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> arrPara = arrObj[<span class="number">1</span>].split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> arr;</span><br><span class="line">            arr = arrPara[i].split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (arr != <span class="literal">null</span> &amp;&amp; arr[<span class="number">0</span>] == paraName) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(arr[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这一段代码是用来获取页面 url 中的参数的</p><p>C#脚本中写</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !UNITY_EDITOR &amp;&amp; UNITY_WEBGL</span></span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XXXX</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !UNITY_EDITOR &amp;&amp; UNITY_WEBGL</span></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">&quot;__Internal&quot;</span>)</span>] <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">string</span> <span class="title">GetUrlParam</span>(<span class="params"><span class="built_in">string</span> str</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !UNITY_EDITOR &amp;&amp; UNITY_WEBGL</span></span><br><span class="line">    <span class="built_in">string</span> <span class="keyword">from</span> = GetUrlParam(<span class="string">&quot;from&quot;</span>);</span><br><span class="line">    Debug.Log(<span class="keyword">from</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就会打印出来我们访问地址参数 form，例如访问 <code>http://localhost?id=0&amp;from=kkkkkk</code>，会打印出来 <code>kkkkkk</code></p><p><strong>Unity 调用 JS 代码，一点都不难，只要按照官方文档走就可以了，Unity 的生态真的非常好，对新手友好，吐槽一下辣鸡 UE4，文档乱的像坨翔</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在用 Unity 做一个 WebGL 平台的项目，开发过程中遇到了各种各样的坑，这里简单记录一下，以免以后再踩。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Unity" scheme="https://blog.xxwhite.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>在家搭建网站-DDNS</title>
    <link href="https://blog.xxwhite.com/2019/ddns.html"/>
    <id>https://blog.xxwhite.com/2019/ddns.html</id>
    <published>2019-04-14T18:48:35.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>上次说了新买了一台小JJ，并且在上面搭建了个人网站，但是生命不息，折腾不止。</p><span id="more"></span><p>利用frp做内网穿透，确实是可以完成网站的搭建，但是frp的流量是要全部从服务器走的，速度受限，延时也比较高，所以一直想办法要改善一下，于是便想到了另一种解决方案——DDNS。</p><p>DDNS的先决条件是，你要有公网IP，如果没用公网IP的话，就别想了，乖乖的用内网穿透吧。</p><h2 id="DDNS">DDNS<a class="header-anchor" href="#DDNS">➴</a></h2><p>这次DDNS是使用了CloudXNS的API，其他DNS服务器应该也有类似的API，感兴趣的话可以自己去看一下。</p><p>DDNS脚本我是直接在GitHub上搜的 <a href="https://github.com/kkkgo/CloudXNS-DDNS-with-BashShell">https://github.com/kkkgo/CloudXNS-DDNS-with-BashShell</a>，具体使用方法我简单示例一下。</p><p>首先是将域名DNS服务器改为CloudXNS（CloudXNS需要实名，介意请使用其他DNS服务器），具体教程可以看 <a href="https://www.cloudxns.net/Support/detail/id/208.html">帮助</a>。</p><p>接入之后，我们先创建一条A记录解析，比如 <code>ddns.xyzabc.com</code>，然后再<a href="https://www.cloudxns.net/AccountManage/apimanage.html">API管理</a>页面开启API，注意不用设置白名单。</p><p>我用的是宝塔面板，所以设置定时任务就非常简单了，把GitHub上的脚本复制到本地记事本里，然后改一下前面的变量，CHECKURL修改完了之后记得验证一下是否有效。本地搞完了，复制到宝塔的定时任务里，设置定时时间一分钟，然后立即执行一次，去CloudXNS检查一下，是不是IP已经解析过去了。</p><p>有了这条A记录之后，后面的就可以使用CNAME解析了。</p><h2 id="端口映射">端口映射<a class="header-anchor" href="#端口映射">➴</a></h2><p>这个需要路由器支持，比如说我现在用的磊科的路由器，以前老板留下的。需要把外部的端口映射到NAT内网的某个IP上的某个端口</p><p><img src="https://s2.ax1x.com/2019/04/29/E3bH9x.png" alt="端口映射"></p><p>这样，从外网的访问8080端口，就可访问到网站上的80端口。</p><h2 id="CDN">CDN<a class="header-anchor" href="#CDN">➴</a></h2><p>做完上面的就可以了，但是我为什么还要套一层CDN呢？因为我想要80端口和443端口。套CDN也很简单，和其他一样，回源地址填写你DNS解析A记录的域名，端口填写上面端口映射设置的外网域名就可以了，例如 <code>ddns.xyzabc.com:8083</code>，协议选择对应的协议。</p><p>目前我的小JJ上已经搭建了好多服务了，三个网站，一个webdav网站，视频转码，直播推流都放在了上面，小JJ总感觉不太够用，打算过几个月再换一台大JJ。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上次说了新买了一台小JJ，并且在上面搭建了个人网站，但是生命不息，折腾不止。&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站笔记" scheme="https://blog.xxwhite.com/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
    <category term="随便水水" scheme="https://blog.xxwhite.com/tags/%E9%9A%8F%E4%BE%BF%E6%B0%B4%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>又入手一台小JJ</title>
    <link href="https://blog.xxwhite.com/2019/small-jj.html"/>
    <id>https://blog.xxwhite.com/2019/small-jj.html</id>
    <published>2019-04-07T16:30:09.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>上个月花了点钱购置了一台小jj用作服务器，简单记录了一下装配过程，正好清明节假干完两天的活，休息一天，就写一点出来。</p><span id="more"></span><h2 id="硬件配置">硬件配置<a class="header-anchor" href="#硬件配置">➴</a></h2><table><thead><tr><th style="text-align:center">硬件</th><th style="text-align:center">配置</th><th style="text-align:center">价格</th></tr></thead><tbody><tr><td style="text-align:center">机箱主板电源</td><td style="text-align:center">惠普800G1小主机，Q87主板</td><td style="text-align:center">315</td></tr><tr><td style="text-align:center">CPU</td><td style="text-align:center">魔改4870HQ</td><td style="text-align:center">598</td></tr><tr><td style="text-align:center">内存</td><td style="text-align:center">二手杂牌 DDR3L 1600 * 2（有一条是从以前笔记本上拆下来的）</td><td style="text-align:center">158 + 0</td></tr><tr><td style="text-align:center">硬盘0</td><td style="text-align:center">建兴 128G mSATA接口</td><td style="text-align:center">146</td></tr><tr><td style="text-align:center">硬盘1</td><td style="text-align:center">西数500G（笔记本拆机）</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">总计</td><td style="text-align:center"></td><td style="text-align:center">1217</td></tr></tbody></table><p>硬件上来说就是这样了，这肯定不是最实惠的方案，也不要跟我说XXX更省钱了，反正我没翻车，连续开机29天没重启，照样跑的稳稳的。</p><p>选择机箱的时候，考虑体积价格和拓展性，最终选择了惠普的800G1，真的很小的一个机箱<br><img src="https://s2.ax1x.com/2019/04/07/AhyDqf.jpg" alt="整体"></p><p>而CPU在魔改4带BGA封装U和E3上权衡了很久，因为我不确定这机器上能不能上E3，因为惠普那尿性的微码问题，包括我现在也没有解决，每次开机都要按F1才能进，虽然网上有人放出了修改过的微码，但是我的编程器坏了（估计是太久没用了，再加上两次搬家，旅途劳顿，挂掉了），懒得再去搞了，按F1就按F1吧。</p><p><img src="https://s2.ax1x.com/2019/04/07/AhyBsP.jpg" alt="CPU"></p><p>16G内存，目前来说稍微有点浪费，但是浪费就浪费吧，但是指不定以后会在上面跑什么呢。</p><h2 id="系统">系统<a class="header-anchor" href="#系统">➴</a></h2><p>先装个Windows，测试一下整机数据，然后再去搞服务器环境</p><p>服务器系统选择没什么说的，自己一直在用Debian，自然就直接上Debian了，装完之后又上了宝塔邪教，这东西很方便，因为测试环境配置什么的都要经常改，所以很适合使用宝塔，别BB什么什么的，我点几下，一分钟就能解决的事，有必要花五分钟去写一个配置文件嘛。</p><h2 id="网络">网络<a class="header-anchor" href="#网络">➴</a></h2><p>网络的话，我这里是电信百兆，上行带宽最快能到2M/S这个水平吧，其中比较难解决的是外网访问问题，虽然这有公网IP，但是没有80端口很难受啊，这时就想到了以前在V2见过的Sakura Frp，简单记录一下使用方法</p><p>首先是注册一个账号 <a href="https://www.natfrp.org/">https://www.natfrp.org/</a> ；<br>登录之后在<code>映射列表</code>里先创建一个SSH通道，可以参考这里<a href="https://www.zerobbs.net/thread/50">https://www.zerobbs.net/thread/50</a>；<br>然后按照 <a href="https://www.zerobbs.net/thread/6">https://www.zerobbs.net/thread/6</a> 的方法下载客户端，解压完停下来就好，后面就不需要继续了；<br>先测试一下连接，首先直接启动frp服务<code>./Sakura_frpc_linux_amd64</code> 然后会让你输入账号密码，具体参考官方论坛；<br>上一步如果提示连接成功了，咱们再进行下一步测试，记住了自己选择的服务器和第二步选择的端口，然后连接一下SSH服务看一下 <code>ssh root@s21.natfrp.org -p xxxx</code> 其中 <code>s21.natfrp.org</code> 是你选择的服务器，<code>-p</code> 参数是你映射的端口，如果可以联通的话，就算是测试成功了，咱们就可以进行下一步了；<br><img src="https://s2.ax1x.com/2019/04/07/AhUbPx.png" alt="SSH连接成功"><br>后面要解决的是守护进程的问题，我曾经用两种不同的守护工具实现过，都是对应不同的实际环境，这里简单的介绍一下怎么写配置文件。</p><p>首先是 <code>Supervisor</code></p><p>怎么安装和使用，可以看完以前的文章<a href="/2018/run-dotnetcore.html">.net core 程序示例</a>，这里简单说一下配置文件就可以了</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[program:frp]</span></span><br><span class="line"><span class="attr">command</span>=/www/frp/Sakura_frpc_linux_amd64 --su=&#123;用户名&#125; --sp=&#123;密码&#125; --sid=&#123;前面命令行启动时候的编号&#125;</span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="attr">stopsignal</span>=INT</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">stderr_logfile</span>=/www/frp/frp.log</span><br><span class="line"><span class="attr">stdout_logfile</span>=/www/frp/frp.out.log</span><br></pre></td></tr></table></figure><p>里面的变量替换成你自己的（没用括号），路径也换成你自己的</p><p>另一种方法是用 <code>PM2</code></p><p>首先宝塔面板自带了pm2管理器，可以在软件管理里直接安装，如果没用使用宝塔面板的话，可以选择先安装Node和npm，然后用npm安装pm2，具体怎么安装，可以百度</p><p>在frp解压的目录下新建一个文本文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/xxxxxxxxxx</span></span><br><span class="line">touch <span class="string">./frp.json</span></span><br></pre></td></tr></table></figure><p>然后修改配置文件 <code>vim ./frp.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;apps&quot;</span>: [&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;frp&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;script&quot;</span>: <span class="string">&quot;Sakura_frpc_linux_amd64&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;/www/frp/&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;autorestart&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;node_args&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;--su=用户名&quot;</span>, <span class="string">&quot;--sp=密码&quot;</span>, <span class="string">&quot;--sid=8&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>script</code>是要执行的命令，<code>cwd</code>是路径，换成你自己的，后面的参数同样换成你自己的，写好之后</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 <span class="keyword">start</span> frp.json</span><br></pre></td></tr></table></figure><p>再确定一下有没有启动</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p<span class="name">m2</span> list</span><br><span class="line"></span><br><span class="line">p<span class="name">m2</span> show <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/04/07/AhDPv6.png" alt="pm2状态"></p><p>再次用ssh连接测试，看看能不能在外网连上，如果没问题的话，守护进程的问题就算是解决了。</p><p>再添加几条隧道，比如http和https隧道，这里就不再啰嗦了，按照官方论坛上的教程来就可以了。</p><h2 id="服务">服务<a class="header-anchor" href="#服务">➴</a></h2><p>目前这台小JJ主要用来测试，搭建了几个比较简单的服务，直播服务（主要在局域网内测试），二维码生成服务 <a href="https://qr.sm9.top/api/qr?tt=%E5%8F%82%E6%95%B0">https://qr.sm9.top/api/qr?tt=参数</a>，函数图像生成服务（自己测试使用，还没写完），以及日常开发过程中的测试</p><h2 id="总结">总结<a class="header-anchor" href="#总结">➴</a></h2><p>闲的蛋疼，又搞了台机器回来吃灰了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上个月花了点钱购置了一台小jj用作服务器，简单记录了一下装配过程，正好清明节假干完两天的活，休息一天，就写一点出来。&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站笔记" scheme="https://blog.xxwhite.com/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
    <category term="随便水水" scheme="https://blog.xxwhite.com/tags/%E9%9A%8F%E4%BE%BF%E6%B0%B4%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>SONY XZP Root</title>
    <link href="https://blog.xxwhite.com/2019/xzp-root.html"/>
    <id>https://blog.xxwhite.com/2019/xzp-root.html</id>
    <published>2019-02-06T10:55:25.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>没有root和xp的生活已经有一个多月了，也顺利升级到了9.0，临近春节，打算把root和xp都给搞回来，在这记录一下过程，算是给其他朋友一点参考吧。</p><span id="more"></span><p>本教程仅针对9.0设备，其他版本的看看就好，没有这么麻烦的。</p><h2 id="推荐">推荐<a class="header-anchor" href="#推荐">➴</a></h2><p>首先推荐一下<a href="https://www.atmb.top/">秋之盒</a>，我也算是合作开发者之一，这次解锁就是使用了秋之盒辅助。</p><p>ROOT管理，推荐使用 <a href="https://forum.xda-developers.com/apps/magisk">Magisk</a></p><h2 id="解锁">解锁<a class="header-anchor" href="#解锁">➴</a></h2><h3 id="获取解锁码">获取解锁码<a class="header-anchor" href="#获取解锁码">➴</a></h3><p>搞机的前提就是解锁，索尼解锁的教程在网上可以搜到的不多，也没有讲的特别明白的，好在我知道固定的套路，很容易就解锁了。</p><p>首先是获取解锁码，打开<a href="https://developer.sony.com/develop/open-devices/get-started/unlock-bootloader">索尼开发者网站</a>，按照提示获取解锁码，网站的验证码有点坑，开始总是说我的验证码是错的，试了好多次之后才成功。有些设备无法解锁，请详细阅读上面提到的网站，每一句都可能是有用的信息。</p><blockquote><p>注意，网站是英文页面，如果你但是提示还是比较全面的，如果你连这一步都无法独立完成的话，不建议继续解锁，因为你独立解决问题的能力还不够，后面遇到问题肯定也是无法解决。</p></blockquote><p>获取到解锁码之后复制下来，建议保存在一个文本文件里备份，以后会有用的。</p><h3 id="解锁-2">解锁<a class="header-anchor" href="#解锁-2">➴</a></h3><p>在手机开发者选项里，打开<code>OEM解锁</code>选项，启用USB调试，连接电脑，打开秋之盒。</p><blockquote><p>如果秋之盒无法连接，请查看<a href="https://www.atmb.top/help/">说明书</a></p></blockquote><p>重启到FastBoot<br><img src="https://s2.ax1x.com/2019/02/06/kYgY2n.png" alt="重启到Fastboot"></p><p>重启之后手机可能是黑屏的，不要担心，如果秋之盒无法连接，一般是驱动问题，Win10很容易解决，Win7没有尝试过。这里使用Win10演示一遍怎么解决驱动问题。</p><p>首先右键开始菜单（很老的Win10是没有的，需要在控制面版里），打开<code>设备管理器</code>，一般是在通用串行设备里，可能是未知设备或者是Android设备，右键 <code>更新驱动程序</code>-<code>浏览我的计算机以查找驱动程序软件</code>-<code>从我的计算机上的可用程序列表选择</code>，选择<code>ADB设备</code>，可能会提示不兼容，但那只是提示，具体怎么样你自己不会判断嘛。<br><img src="https://s2.ax1x.com/2019/02/06/kYgBaF.png" alt="选择驱动"></p><p>不出意外的话，这个时候秋之盒已经连接上设备了，如果没有连接的话，就拔线重插或者开机重来一遍。</p><p>我们需要使用秋之盒的命令行功能<br><img src="https://s2.ax1x.com/2019/02/06/kYgD54.png" alt="打开命令行"></p><p>先看一下设备连接情况</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fastboot devices</span></span><br></pre></td></tr></table></figure><p>如果是显示</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XXXXXXX fastboot</span></span><br></pre></td></tr></table></figure><p>就可以继续了，如果不是，上面的重新来过。</p><p>解锁设备</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fastboot</span> oem unlock <span class="number">0</span>x&lt;insert your unlock code&gt;</span><br></pre></td></tr></table></figure><p><strong>注意，解锁会使你的设备重置，请注意资料备份</strong></p><h2 id="ROOT">ROOT<a class="header-anchor" href="#ROOT">➴</a></h2><h3 id="提取boot-img">提取boot.img<a class="header-anchor" href="#提取boot-img">➴</a></h3><p>提取方法有多种多样，网上的教程也有很多，这里推荐使用TWRP来提取</p><p>首先下载对应的<a href="https://twrp.me/Devices/">TWRP REC</a></p><p>然后用TWRP引导启动</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot <span class="keyword">boot </span>xxxxrec.img</span><br></pre></td></tr></table></figure><blockquote><p>可以先输入<code>fastboot boot</code>，然后把rec文件拖进去</p></blockquote><p><img src="https://s2.ax1x.com/2019/02/06/kY21L6.png" alt="REC引导启动"></p><p>进入TWRP以后，提取boot镜像</p><p>复制<code>/dev/block/platform/soc/1da4000.ufshc/by-nema/boot</code>（不同设备具体路径可能不同）到<code>/data/media/0</code>下，然后将复制过去的文件重命名<code>boot.img</code>（或者是开机之后在文件管理器中重名）</p><p><img src="https://s2.ax1x.com/2019/02/06/kY24O0.png" alt="提取boot"></p><h3 id="修补boot镜像">修补boot镜像<a class="header-anchor" href="#修补boot镜像">➴</a></h3><p>安装<code>Magisk Manager</code>，打开之后选择（需要联网）<code>Magisk 安装</code>-<code>修补 Boot 镜像文件</code>，选择刚才我们提取出来的<code>boot.img</code>，会生成<code>patched_boot.img</code>在<code>Download</code>目录里。</p><p>将修补后的镜像搞到电脑上，等下会用到，提取的boot，也就是未修补的，建议备份到安全的位置，这个以后可能会有用的。</p><h3 id="获取ROOT权限">获取ROOT权限<a class="header-anchor" href="#获取ROOT权限">➴</a></h3><p>到了这一步，就有两种方法选择了</p><h4 id="直接刷入修补的boot">直接刷入修补的boot<a class="header-anchor" href="#直接刷入修补的boot">➴</a></h4><p>这种方法很简单，使用秋之盒重启到fastboot模式。然后使用秋之盒的<code>刷入boot.img</code>功能，直接将修补后的boot文件刷入就可以了。</p><p>或者是依旧使用命令行，手动输入命令，将你修补后的boot文件刷入</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash <span class="keyword">boot </span>patched_boot.img</span><br></pre></td></tr></table></figure><h4 id="使用临时root权限获取永久root">使用临时root权限获取永久root<a class="header-anchor" href="#使用临时root权限获取永久root">➴</a></h4><p>相比上一种方法，我更喜欢这种方法，但是操作会稍微多几步。</p><p>首先是使用修补后的boot启动，重启到fastboot后使用命令行</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot <span class="keyword">boot </span>patched_boot.img</span><br></pre></td></tr></table></figure><blockquote><p>可以先输入<code>fastboot boot </code>然后再将你修补后的boot文件拖进去</p></blockquote><p>这样启动之后，打开<code>Magisk Manager</code>应该就可以显示设备已经root，但是此时的root权限是临时的，重启就会消失，我们需要获取永久的root权限，使用<code>Magisk 安装</code>-<code>直接安装</code>步骤，等提示成功之后，重启手机验证一下是否获取了永久root权限就可以了。</p><h2 id="Xposed">Xposed<a class="header-anchor" href="#Xposed">➴</a></h2><p>安卓9.0使用Xposed，推荐使用<code>太极</code>，关注微信公众号<code>虚拟框架</code>就可以获取了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;没有root和xp的生活已经有一个多月了，也顺利升级到了9.0，临近春节，打算把root和xp都给搞回来，在这记录一下过程，算是给其他朋友一点参考吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="搞机" scheme="https://blog.xxwhite.com/tags/%E6%90%9E%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>自己动手修改完善yilia主题（下）</title>
    <link href="https://blog.xxwhite.com/2019/your-own-yilia-2.html"/>
    <id>https://blog.xxwhite.com/2019/your-own-yilia-2.html</id>
    <published>2019-02-01T14:40:40.000Z</published>
    <updated>2021-03-25T02:35:30.816Z</updated>
    
    <content type="html"><![CDATA[<p>这一期咱们接着来说自定义Yilia主题的事。</p><span id="more"></span><p>本文涉及到的修改稍微有一点点复杂，可以参考我的<a href="https://github.com/MonoLogueChi/hexo-theme-yilia">GitHub仓库</a>。</p><h2 id="修改webpack打包路径">修改webpack打包路径<a class="header-anchor" href="#修改webpack打包路径">➴</a></h2><p>为了方便管理代码，也是为了看起来干净一点，我简单修改了一下主题文档结构，把资源文件放在了<code>assets</code>目录下</p><p>修改<code>webpack.config.js</code>的<code>output</code>模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: __dirname+<span class="string">&quot;/source/assets/&quot;</span>,</span><br><span class="line">    publicPath: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    filename: <span class="string">&quot;[name].[chunkhash:6].js&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="删除文章中那一堆无用的代码">删除文章中那一堆无用的代码<a class="header-anchor" href="#删除文章中那一堆无用的代码">➴</a></h2><p>使用yilia主题，每篇文章中都会出现一坨js代码，至今为止我也不知道是什么作用，删掉貌似也没有什么影响，每个页面能精简七八十K吧。</p><p>删掉<code>source-src\scrept.ejs</code>中的</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">for</span> (var asset <span class="keyword">in</span> compilation.assets) &#123; %&gt;&lt;% <span class="keyword">if</span> (asset.indexOf(<span class="string">&#x27;mobile&#x27;</span>) &gt;= <span class="number">0</span>) &#123; %&gt;&lt;%= compilation.assets[asset].<span class="keyword">source</span>() %&gt;&lt;% &#125; %&gt;&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h2 id="Js后加载">Js后加载<a class="header-anchor" href="#Js后加载">➴</a></h2><p>新建模板<code>layout\_partial\load-scrept.ejs</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">function</span> load<span class="constructor">Script(<span class="params">e</span>,<span class="params">t</span>)</span>&#123;d=document,o=d.create<span class="constructor">Element(<span class="string">&quot;script&quot;</span>)</span>,s=d.get<span class="constructor">ElementsByTagName(<span class="string">&quot;head&quot;</span>)</span><span class="literal">[<span class="number">0</span>]</span>.append<span class="constructor">Child(<span class="params">o</span>)</span>,o.set<span class="constructor">Attribute(<span class="string">&quot;src&quot;</span>,<span class="params">e</span>)</span>,t&amp;&amp;o.add<span class="constructor">EventListener(<span class="string">&quot;load&quot;</span>,<span class="params">function</span>(<span class="params">e</span>)</span>&#123;t(e)&#125;),s.parentNode.insert<span class="constructor">Before(<span class="params">o</span>,<span class="params">s</span>)</span>&#125;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码是已经压缩的，直接放进页面就可以</p></blockquote><p>降新建的模板放入head部分，在<code>layout\_partial\head.ejs</code>后面加入</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span>- partial<span class="comment">(&#x27;load-script&#x27;)</span> <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><p>有了这段代码，我们就可以使用<code>loadScript</code>加载各种Js文件了。</p><p>首先是主题本身的Js文件，也就是<code>slider.js</code>，先分离<code>scrept.ejs</code>，创建一个<code>main.ejs</code></p><p><code>main.ejs</code></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span> var left = <span class="string">&#x27;&lt;%=&#x27;</span> <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span> var right = <span class="string">&#x27;%&#x27;</span> <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span> var right<span class="number">2</span> = <span class="string">&#x27;&gt;&#x27;</span> <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span> for <span class="comment">(var chunk in htmlWebpackPlugin.files.chunks)</span> &#123; <span class="meta">%</span>&gt;&lt;<span class="meta">%</span> <span class="keyword">if</span> <span class="comment">(chunk === &#x27;main&#x27;)</span> &#123; <span class="meta">%</span>&gt;&lt;script defer src=<span class="string">&quot;&lt;%= left %&gt;config.root&lt;%= right %&gt;&lt;%= right2 %&gt;assets/&lt;%=htmlWebpackPlugin.files.chunks[chunk].entry %&gt;&quot;</span>&gt;&lt;/script&gt;&lt;<span class="meta">%</span> &#125; <span class="meta">%</span>&gt;&lt;<span class="meta">%</span> &#125; <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><p><code>script.ejs</code></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;<span class="meta">%</span> var left = <span class="string">&#x27;&lt;%=&#x27;</span> <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span> var right = <span class="string">&#x27;%&#x27;</span> <span class="meta">%</span>&gt;</span><br><span class="line">&lt;<span class="meta">%</span> var right<span class="number">2</span> = <span class="string">&#x27;&gt;&#x27;</span> <span class="meta">%</span>&gt;</span><br><span class="line"><span class="comment">(function()</span> &#123;</span><br><span class="line">    &lt;<span class="meta">%</span> for <span class="comment">(var asset in compilation.assets)</span> &#123; <span class="meta">%</span>&gt;&lt;<span class="meta">%</span> <span class="keyword">if</span> <span class="comment">(asset.indexOf(&#x27;slider&#x27;)</span> &gt;= <span class="number">0</span>) &#123; <span class="meta">%</span>&gt;&lt;<span class="meta">%</span> var slider = asset <span class="meta">%</span>&gt;&lt;<span class="meta">%</span> &#125; <span class="meta">%</span>&gt;&lt;<span class="meta">%</span> &#125; <span class="meta">%</span>&gt;loadScript<span class="comment">(&quot;&lt;%= left %&gt;config.root&lt;%= right %&gt;&lt;%= right2 %&gt;assets/&lt;%= slider %&gt;&quot;)</span></span><br><span class="line">&#125;)<span class="comment">()</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code>，修改<code>plugins</code>，增加main部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">new</span> <span class="string">HtmlWebpackPlugin(&#123;</span></span><br><span class="line">      <span class="attr">inject:</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line">      <span class="attr">cache:</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line">      <span class="attr">minify:</span> <span class="string">minifyHTML,</span></span><br><span class="line">      <span class="attr">template:</span> <span class="string">&#x27;./source-src/script.ejs&#x27;</span><span class="string">,</span></span><br><span class="line">      <span class="attr">filename:</span> <span class="string">&#x27;../../layout/_partial/script.ejs&#x27;</span></span><br><span class="line">    <span class="string">&#125;),</span></span><br><span class="line">    <span class="string">new</span> <span class="string">HtmlWebpackPlugin(&#123;</span></span><br><span class="line">      <span class="attr">inject:</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line">      <span class="attr">cache:</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line">      <span class="attr">minify:</span> <span class="string">minifyHTML,</span></span><br><span class="line">      <span class="attr">template:</span> <span class="string">&#x27;./source-src/main.ejs&#x27;</span><span class="string">,</span></span><br><span class="line">      <span class="attr">filename:</span> <span class="string">&#x27;../../layout/_partial/main.ejs&#x27;</span></span><br><span class="line">    <span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><p>在<code>layout\_partial\head.ejs</code>中再加入</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span>- partial<span class="comment">(&#x27;main&#x27;)</span> <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><p>为了优化其他js文件的加载速度，将不必要的js放在页面尾部，也就是<code>after-footer.ejs</code>，具体修改可以参考我的GitHub仓库</p><h2 id="优化中英文混排">优化中英文混排<a class="header-anchor" href="#优化中英文混排">➴</a></h2><p>优化中英文混排，可以引入<code>pangu.js</code>，创建模板<code>layout\_partial\pangu.ejs</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.pangu)&#123; %&gt;</span><br><span class="line">&lt;script async&gt;</span><br><span class="line">load<span class="constructor">Script(&#x27;<span class="params">https</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">cdn</span>.<span class="params">jsdelivr</span>.<span class="params">net</span><span class="operator">/</span><span class="params">npm</span><span class="operator">/</span><span class="params">pangu</span><span class="operator">/</span><span class="params">dist</span><span class="operator">/</span><span class="params">browser</span><span class="operator">/</span><span class="params">pangu</span>.<span class="params">min</span>.<span class="params">js</span>&#x27;,<span class="params">function</span>()</span>&#123;pangu.spacing<span class="constructor">Page()</span>;&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>在<code>after-footer.ejs</code>中引入</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span>- partial<span class="comment">(&#x27;pangu&#x27;)</span> <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><p>在主题的配置文件<code>_config.yml</code>中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pangu.js，中英文混排优化</span></span><br><span class="line"><span class="attr">pangu:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="更优雅的方式引入valine">更优雅的方式引入valine<a class="header-anchor" href="#更优雅的方式引入valine">➴</a></h2><p>上一篇文章写了引入valine，但是这样做并不是最佳方式，修改模板<code>layout\_partial\post\valine.ejs</code>（需要用到上面提到的js后加载方式）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vcomment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> notify = &lt;%= theme.valine.notify %&gt; == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> verify = &lt;%= theme.valine.verify %&gt; == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> visitor = &lt;%= theme.valine.visitor %&gt; == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    loadScript(<span class="string">&#x27;https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    loadScript(<span class="string">&#x27;https://cdn.jsdelivr.net/npm/leancloud-storage/dist/av-min.js&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Valine(&#123;</span></span><br><span class="line">            av: AV,</span><br><span class="line"><span class="javascript">            el: <span class="string">&#x27;#vcomment&#x27;</span>,</span></span><br><span class="line">            notify: notify,</span><br><span class="line">            verify: verify,</span><br><span class="line"><span class="javascript">            app_id: <span class="string">&#x27;&lt;%= theme.valine.appid %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            app_key: <span class="string">&#x27;&lt;%= theme.valine.appkey %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            placeholder: <span class="string">&#x27;&lt;%= theme.valine.placeholder %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            avatar: <span class="string">&#x27;&lt;%= theme.valine.avatar %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            avatar_cdn: <span class="string">&#x27;&lt;%= theme.valine.avatar_cdn %&gt;&#x27;</span>,</span></span><br><span class="line">            pageSize: &lt;%= theme.valine.pageSize %&gt;,</span><br><span class="line"><span class="javascript">            path: <span class="string">&#x27;&lt;%- url_for(post.path) %&gt;&#x27;</span>,</span></span><br><span class="line">            visitor: visitor</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上篇文章里的主题样式，我放到了<code>comment.scss</code>中（这里为了方便管理，并没有把移动端代码放到<code>mobile.scss</code>中）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#vcomment</span>&#123;<span class="attribute">margin</span>:<span class="number">30px</span>;<span class="attribute">padding</span>:<span class="number">10px</span>;<span class="attribute">background</span>:<span class="number">#fff</span>&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">800px</span>)&#123;<span class="selector-id">#vcomment</span>&#123;<span class="attribute">margin</span>:auto;<span class="attribute">padding</span>:<span class="number">10px</span>;<span class="attribute">background</span>:<span class="number">#fff</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="更多骚操作">更多骚操作<a class="header-anchor" href="#更多骚操作">➴</a></h2><p>更多骚操作请看我<a href="https://github.com/MonoLogueChi/hexo-theme-yilia">GitHub仓库</a>中的修改。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这一期咱们接着来说自定义Yilia主题的事。&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站笔记" scheme="https://blog.xxwhite.com/tags/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
